#include "_client_defines.fos"
#include "_macros.fos"
#include "_colors.fos"

import int[] control() from "client_gui";
import uint8 current() from "client_gui";


/*****Instruction:
   If you wish to add new command:
   1. Define its name.
   2. Add Command's derived class.
   2.1 Assign required arguments value to "argsRequired" in constructor.
   2.2 You can also set command description in constructor by assigning description text to "description" field in constructor.
   2.3 Override "private void process()" method. See Command and CommandArgument classes definition for needed fields, methods etc. You can also look at existing implementation examples.
   3. Add code to GetCommandByName function.
*****************/

// NO ARGUMENTS COMMANDS
#define CHAR_LIST_COMMAND_NAME                         ( "#cs" )		 	 // #cl - открывает браузер с чарлистом
#define CLEAR_HEX_COMMAND_NAME    			           ( "#clhx" )		 	 // #clhx - очищает гекс от содержимого
#define MAKE_FURNITURE					               ( "#frm" )			 // #frm - создаёт в инвентаре ГМа переносимую мебель из объекта под курсором.
#define RESPAWN_COMMAND_NAME                           ( "#r" )              // #r - respawns self
#define TELEPORT_TO_TARGET_COMMAND_NAME                ( "#t" )              // #t - moves self to target
#define DELETE_MOB_COMMAND_NAME                        ( "#delmob" )         // #delmob - deletes target critter
#define MOR_COMMAND_NAME                               ( "#mor" )            // #mor - applies desease to target critter
#define MOB_INIT_COMMAND_NAME                          ( "#mobinit" )        // #mobinit - initializes target critter
#define LEX_COMMAND_NAME                               ( "#lex" )            // #lex - ???
#define MOB_HOME_COMMAND_NAME                          ( "#mobhome" )        // #mobhome - returns target critter to home hex
#define GET_ALL_COMMAND_NAME                           ( "#getall" )         // #getall - moves all items from target critter's inventory to the player's one
#define GIVE_ALL_COMMAND_NAME                          ( "#giveall" )        // #giveall - moves all items from player's inventory to the target critter's one
#define DELETE_ALL_COMMAND_NAME                        ( "#deleteall" )      // #deleteall - deletes all items from target critter's inventory
#define GM_CLONE_COMMAND_NAME                          ( "#gmclone" )        // #gmclone - clones target critter's SPECIAL, skills, resists, perks, traits, and karma to GM
#define GUARD_COMMAND_NAME                             ( "#guard" )          // #guard - sets guard behavior to target critter (???)
#define CLONE_COMMAND_NAME                             ( "#clone" )          // #clone - ???
#define UNCLONE_COMMAND_NAME                           ( "#unclone" )        // #unclone - ???
#define GOD_COMMAND_NAME                               ( "#god" )            // #god - sets all SPECIAL to 10, skills to 300, activates invisibility, and adds few useful perks
#define DELETE_ITEM_COMMAND_NAME                       ( "#delitem" )        // #delitem - deletes target item
#define OPEN_DOOR_COMMAND_NAME                         ( "#open" )           // #open - opens target door
#define CLOSE_DOOR_COMMAND_NAME                        ( "#close" )          // #close - closes target door
#define BLOCK_DOOR_COMMAND_NAME                        ( "#blockdoor" )      // #blockdoor - makes target door not openable
#define CLEAR_DOOR_COMMAND_NAME                        ( "#cleardoor" )      // #cleardoor - clears target door settings and locks
#define SAVE_COMMAND_NAME                              ( "#save" )           // #save - ???
#define ZOMBIE_COMMAND_NAME                            ( "#zomb" )           // #zomb - ???
#define SWITCH_GLOBAL_GRID_COMMAND_NAME                ( "#global_grid" )    // #global_grid - switches grid on the global map
#define SWITCH_GLOBAL_WILD_COMMAND_NAME                ( "#global_wild" )    // #global_wild - switches wildness map on the global map
#define PUPPET_CONTROL_COMMAND_NAME                    ( "#zc" )             // #zc - takes target mob under GM's control (makes it "puppet")
#define PUPPET_DELETE_COMMAND_NAME                     ( "#zd" )             // #zd - delete puppets
#define PUPPET_ATTACK_COMMAND_NAME                     ( "#za" )             // #za - makes puppet attack target critter
#define PUPPET_RAID_COMMAND_NAME                       ( "#zr" )             // #zr - sends all puppets to attack players around
#define PUPPET_HOME_COMMAND_NAME                       ( "#zh" )             // #zh - sends puppets to their home positions
#define PUPPET_GATHER_COMMAND_NAME                     ( "#zg" )             // #zg - teleports puppets to GM
#define PUPPET_WALK_COMMAND_NAME                       ( "#zw" )             // #zw - makes puppets walk to target hex
#define PUPPET_STOP_COMMAND_NAME                       ( "#zs" )             // #zs - makes puppets stop, look at cursor and prepare weapons
#define PUPPET_TIE_COMMAND_NAME                        ( "#zp" )             // #zp - ties puppets to target critter

// 1 ARGUMENT COMMANDS
#define CHANGE_ITEM_PICTURE_COMMAND_NAME               ( "#picture" )		 // #picture pid:[proto_id] - устанавливает картинку от прото объекту под курсором
#define ADD_ITEM_COMMAND_NAME                          ( "#additem" )        // #additem [proto_id] - adds item to target hex
#define SET_AUTO_DOOR_MODE_COMMAND_NAME                ( "#autodoor" )       // #autodoor [mode] - 0 - for everyone, 1 - for outlaws, 2 - disable autoopening
#define GIVE_ITEM_COMMAND_NAME                         ( "#give" )           // #give [id] - gives item to target critter
#define GET_PARAMETER_COMMAND_NAME                     ( "#getp" )           // #getp [param_id] - prints value of parameter with specified id
#define TRADER_INIT_COMMAND_NAME                       ( "#trader" )         // #trader [critter_id] - sets trader behavior to critter with specified id
#define POLICE_INIT_COMMAND_NAME                       ( "#police" )         // #police [critter_id] - sets police behavior to critter with specified id
#define DARKEN_SCREEN_COMMAND_NAME                     ( "#black" )          // #black [time_in_ms] - darkens target critter's screen
#define SET_SKIN_COMMAND_NAME                          ( "#skin" )           // #skin [proto_id] - sets skin to target critter
#define GM_SAY_COMMAND_NAME                            ( "#gm_say" )         // #gm_say [message_type] - say phrase on behalf of target critter. 1 - speech, 3 - shout, 5 - emotion, 7 - whisper
#define DEACTIVATE_COMMAND_NAME                        ( "#deact" )          // #deact [id] - deactivate
#define ACTIVATE_COMMAND_NAME                          ( "#act" )            // #act [id] - activate
#define MUTATE_NAME                                    ( "#mutate" )         // #mutate [id] - fast mutation
#define GHOUL_NAME                                     ( "#ghoul" )          // #ghoul [id] - fast ghoul
#define GET_ITEM_NAME                                  ( "#getitem" )        // #get item [id] - get item by id
#define CALL_CRITTER_COMMAND_NAME                      ( "#cr2me" )          // #cr2me [critter_id] - teleport critter to self
#define TELEPORT_TO_CRITTER_COMMAND_NAME               ( "#me2cr" )          // #me2cr [critter_id] - teleport to critter
#define GET_ITEMS_BY_PID_COMMAND_NAME                  ( "#getitems" )       // #getitems [proto_id] - get all items with specified proto
#define GET_CRITTER_NAME_COMMAND_NAME                  ( "#name" )           // #name [id] - get name of specified critter
#define SHOW_ITEM_VALUES_COMMAND_NAME                  ( "#showval" )        // #showval [id] - show item values by id
#define WARNING_COMMAND_NAME                           ( "#w" )              // #w [id] - warnings
#define SERVICE_INFO_COMMAND_NAME                      ( "#sinf" )           // #sinf [flags] - make service info appear according to flags
#define FACTION_LIST_NAME                              ( "#faction" )        // #faction [faction_number] - shows command description
#define COMMAND_HELP_COMMAND_NAME                      ( "#chelp" )          // #chelp [command_name] - shows command description
#define TEST_TILE                                      ( "#testtile" )

// 2 ARGUMENTS COMMANDS
#define STOP_AREA_COMMAND_NAME    			           ( "#stop" )		 	 // #stop X Y - останавливает всех в радиусе ’ на Y секунд.
#define RESTORE_COMMAND_NAME                           ( "#restore" )        // #restore [unknown] [unknown] - ???
#define SET_PARAMETER_COMMAND_NAME                     ( "#setp" )           // #setp [param_id] [value] - sets parameter value for target critter
#define SET_DOOR_CODE_COMMAND_NAME                     ( "#setcodedoor" )    // #setcodedoor [digit_amount] [code] - sets code for target door
#define LOCK_DOOR_COMMAND_NAME                         ( "#lock" )           // #lock [complexity] [locker_id] - locks target door and places key in the inventory
#define BREAK_ITEM_COMMAND_NAME                        ( "#break" )          // #break [item_id] [breakage_rate] - breaks item for specified rate
#define LOCATION_TELEPORT_COMMAND_NAME                 ( "#tele" )           // #tele [location_id] [map_id] - teleport to specified location
#define SET_FACTION_NAME                               ( "#setfaction" )     // #faction [critter_id] [faction_number] - set faction for player
#define KILL                                           ( "#kill" )           // #kill id deathAnim

#define CELL_DEL                                       ( "#celldel" )        // #celldel [x] [y]

// 3 AND MORE ARGUMENTS COMMANDS
#define ADVANCED_SPAWN_COMMAND_NAME                    ( "#spawn" )          // #spawn [mob_type] [weapon] [behavior_type] - complex mob spawn
#define BUILD_COMMAND_NAME                             ( "#build" )          // #build [unknown] [unknown] [unknown] [unknown] - ???
#define BAN                                            ( "#ban" )            // #banid [id] [hours] [kick]
#define BAN_KICK                                       ( "#kick" )           // #kick [id]
#define BAN_IP                                         ( "#banip" )          // #banip [id] [hours] [mask_level]
#define BAN_UNBAN                                      ( "#unban" )          // #unban [id]
#define BAN_GETIPS                                     ( "#getips" )         // #getips [id]

#define COMPARE_STAT                                   ( "#compare" )        // #compare [stat] [id0] [id1] ... [idN]
#define COMPARE_STAT_RADIUS                            ( "#compareradius" )  // #compare [stat] [radius]

#define CELL_CREATE                                    ( "#cellcreate" )     // #cellcreate [pid] [x] [y] [force]
#define CELL_CREATE_WILD                               ( "#cellcreatewild" ) // #cellcreate [pid] [x] [y] [wild] [livetime] [force]
#define CELL_MOVE                                      ( "#cellmove" )       // #cellcreate [x] [y] [x1] [y1]
#define CELL_SIZE                                      ( "#cellsize" )       // #cellsize [x] [y] [sizeX] [sizeY]

#define ITEM_RADIATE_COMMAND_NAME                      ( "#radiate" )        // #radiate VAL FADE DIST TIME PID

// STRING COMMANDS
#define MEMORIZE_NAME_COMMAND_NAME                     ( "$name" )           // $name - deprecated
#define HASH_COMMAND_NAME                              ( "$hash" )           // $hash [string] - prints hash of specified string
#define SAY_TO_ALL_COMMAND_NAME                        ( "$s2a" )            // $s2a [message] - say message that everyone will hear
#define ANSWER_TO_GM_COMMAND_NAME                      ( "$ans" )            // $ans [message] - answer to GM who used $s2a last
#define ASK_HELP_COMMAND_NAME                          ( "$help" )           // $help [message] - sends message to all online GMs and admins
#define POLL_COMMAND_NAME                              ( "$poll" )           // $poll [poll_question@variant1@vartiant2@...@vatiantN] - starts poll
#define SET_CRITTER_DESCRIPTION_BY_ID_COMMAND_NAME     ( "$gmlex" )          // $gmlex [critter_id] [description] - sets critter description
#define SET_TARGET_CRITTER_DESCRIPTION_COMMAND_NAME    ( "$gmlex2" )         // $gmlex2 [description] - sets target critter description
#define SET_ITEM_DESCRIPTION_BY_ID_COMMAND_NAME        ( "$gmitemlex" )      // $gmitemlex [item_id] [description] - sets item description
#define SEND_SERVICE_MESSAGE_BY_ID_COMMAND_NAME        ( "$pm" )             // $pm [critter_id] [message] - sends private message to player
#define SEND_SERVICE_MESSAGE_TO_TARGET_COMMAND_NAME    ( "$pm2" )            // $pm2 [message] - sends private message to target player
#define UNSAFE_ACTIVATE_COMMAND_NAME                   ( "$act" )            // $act [unknown] - ???

#define GET_ACCESS_COMMAND_NAME				("$getaccess")		//$getaccess [account] [password]

// RUN COMMANDS
#define RUN_DEBUG_COMMAND_NAME                         ( "%d" )              // %d - same as "~run debug"
#define RUN_TEST_COMMAND_NAME                          ( "%t" )              // %t - same as "~run test"
#define RUN_ACTIVATION_COMMAND_NAME                    ( "%ac" )             // %ac - same as "~run activation"
#define RUN_SKINS_COMMAND_NAME                         ( "%sk" )             // %sk - same as "~run skins"
#define RUN_QMAP_DEBUG_COMMAND_NAME                    ( "%qd" )             // %qd - same as "~run qmap_debug"

// AUXILIARY
#define DEBUG_MODULE_NAME                              ( "debug" )
#define TEST_MODULE_NAME                               ( "test" )
#define ACTIVATION_MODULE_NAME                         ( "activation" )
#define SKINS_MODULE_NAME                              ( "skins" )
#define QMAP_DEBUG_MODULE_NAME                         ( "qmap_debug" )
#define RUN_MODULE_COMMAND_PREFIX                      ( "%" )

// arcade hive commands
#define ARCADE_HIVE_LIST                               ( "#hivelist" )
#define ARCADE_HIVE_DEL                                ( "#hivedel" ) // #arcadehivedel index
#define ARCADE_HIVE_ADD                                ( "#hiveadd" ) // #arcadehiveadd x y type

class Command
{
    private         CommandArgument[] args;

    private uint    argsRequired;

    private string@ description;

    private string@ reformedMessage;


    Command()
    {
        argsRequired = 0;
        @description = null;
        @reformedMessage = null;
    }

    CommandArgument@ getArg( uint index )
    {
        if( index >= args.length() )
        {
            return null;
        }
        return args[ index ];
    }

    uint argAmount()
    {
        return args.length();
    }

    void pushBackArg( CommandArgument arg )
    {
        args.insertLast( arg );
    }

    // returns command description (should be set in constructor)
    string getDescription()
    {
        string desc;
        if( !valid( description ) )
        {
            desc = "No description found.";
        }
        else
        {
            desc = description;
        }
        return desc;
    }

    // joins arguments and returns result
    string getArgumentString()
    {
        const string COMMAND_ARG_SEPARATOR = " ";
        string@[] arguments;
        for( uint i = 0; i < argAmount(); ++i )
        {
            arguments.insertLast( getArg( i ).getStringData() );
        }
        return join( arguments, COMMAND_ARG_SEPARATOR );
    }

    // used to pass message to global handler
    string@ getReformedMessage()
    {
        return reformedMessage;
    }

    // better make it pure virtual. But I'm not sure if such methods exist in AngelScript
    private void process()
    {}

    void run()
    {
        if( argAmount() >= argsRequired )
        {
            process();
        }
    }
}

class CommandArgument
{
    private ArgumentType type;
    private int          intData;
    private string       stringData;

    CommandArgument( int number )
    {
        intData = number;
        stringData = "" + number;
        type = INTEGER;
    }

    CommandArgument( string str )
    {
        stringData = str;
        type = STRING;
    }

    ArgumentType getType()
    {
        return type;
    }

    int getIntData()
    {
        return intData;
    }

    string getStringData()
    {
        return stringData;
    }
}

enum ArgumentType
{
    INTEGER, STRING
};

// returns null if no command with commandName name exists
Command@ GetCommandByName( string& commandName )
{
    Command@ command = null;
    if( commandName == RESPAWN_COMMAND_NAME )
    {
        @command = RespawnCommand();
    }
	else if( commandName == ITEM_RADIATE_COMMAND_NAME )
    {
        @command = ItemRadiateCommand();
    }
    else if( commandName == TELEPORT_TO_TARGET_COMMAND_NAME )
    {
        @command = TeleportToTargetCommand();
    }
    else if( commandName == DELETE_MOB_COMMAND_NAME )
    {
        @command = DeleteMobCommand();
    }
    else if( commandName == MOR_COMMAND_NAME )
    {
        @command = MorCommand();
    }
    else if( commandName == MOB_INIT_COMMAND_NAME )
    {
        @command = MobInitCommand();
    }
    else if( commandName == LEX_COMMAND_NAME )
    {
        @command = LexCommand();
    }
    else if( commandName == MOB_HOME_COMMAND_NAME )
    {
        @command = MobHomeCommand();
    }
    else if( commandName == GET_ALL_COMMAND_NAME )
    {
        @command = GetAllCommand();
    }
    else if( commandName == GIVE_ALL_COMMAND_NAME )
    {
        @command = GiveAllCommand();
    }
    else if( commandName == DELETE_ALL_COMMAND_NAME )
    {
        @command = DeleteAllCommand();
    }
    else if( commandName == GM_CLONE_COMMAND_NAME )
    {
        @command = GMCloneCommand();
    }
    else if( commandName == GUARD_COMMAND_NAME )
    {
        @command = GuardCommand();
    }
    else if( commandName == CLONE_COMMAND_NAME )
    {
        @command = CloneCommand();
    }
    else if( commandName == UNCLONE_COMMAND_NAME )
    {
        @command = UncloneCommand();
    }
    else if( commandName == GOD_COMMAND_NAME )
    {
        @command = GodCommand();
    }
    else if( commandName == DELETE_ITEM_COMMAND_NAME )
    {
        @command = DeleteItemCommand();
    }
    else if( commandName == OPEN_DOOR_COMMAND_NAME )
    {
        @command = OpenDoorCommand();
    }
    else if( commandName == CLOSE_DOOR_COMMAND_NAME )
    {
        @command = CloseDoorCommand();
    }
    else if( commandName == BLOCK_DOOR_COMMAND_NAME )
    {
        @command = BlockDoorCommand();
    }
    else if( commandName == CLEAR_DOOR_COMMAND_NAME )
    {
        @command = ClearDoorCommand();
    }
    else if( commandName == SAVE_COMMAND_NAME )
    {
        @command = SaveCommand();
    }
    else if( commandName == ZOMBIE_COMMAND_NAME )
    {
        @command = ZombieCommand();
    }
    else if( commandName == SWITCH_GLOBAL_GRID_COMMAND_NAME )
    {
        @command = SwitchGlobalGridCommand();
    }
    else if( commandName == SWITCH_GLOBAL_WILD_COMMAND_NAME )
    {
        @command = SwitchGlobalWildCommand();
    }
    else if( commandName == ADD_ITEM_COMMAND_NAME )
    {
        @command = AddItemCommand();
    }
    else if( commandName == SET_AUTO_DOOR_MODE_COMMAND_NAME )
    {
        @command = SetAutoDoorModeCommand();
    }
    else if( commandName == GIVE_ITEM_COMMAND_NAME )
    {
        @command = GiveItemCommand();
    }
    else if( commandName == GET_PARAMETER_COMMAND_NAME )
    {
        @command = GetParameterCommand();
    }
    else if( commandName == TRADER_INIT_COMMAND_NAME )
    {
        @command = TraderInitCommand();
    }
    else if( commandName == POLICE_INIT_COMMAND_NAME )
    {
        @command = PoliceInitCommand();
    }
    else if( commandName == DARKEN_SCREEN_COMMAND_NAME )
    {
        @command = DarkenScreenCommand();
    }
    else if( commandName == SET_SKIN_COMMAND_NAME )
    {
        @command = SetSkinCommand();
    }
    else if( commandName == GM_SAY_COMMAND_NAME )
    {
        @command = GMSayCommand();
    }
    else if( commandName == DEACTIVATE_COMMAND_NAME )
    {
        @command = DeactivateCommand();
    }
    else if( commandName == ACTIVATE_COMMAND_NAME )
    {
        @command = ActivateCommand();
    }
    else if( commandName == CALL_CRITTER_COMMAND_NAME )
    {
        @command = CallCritterCommand();
    }
    else if( commandName == MUTATE_NAME )
    {
        @command = MutateCommand();
    }
    else if( commandName == GHOUL_NAME )
    {
        @command = GhoulCommand();
    }
    else if( commandName == GET_ITEM_NAME )
    {
        @command = GetItemCommand();
    }
    else if( commandName == TELEPORT_TO_CRITTER_COMMAND_NAME )
    {
        @command = TeleportToCritterCommand();
    }
    else if( commandName == GET_ITEMS_BY_PID_COMMAND_NAME )
    {
        @command = GetItemsByPidCommand();
    }
    else if( commandName == GET_CRITTER_NAME_COMMAND_NAME )
    {
        @command = GetCritterNameCommand();
    }
    else if( commandName == SHOW_ITEM_VALUES_COMMAND_NAME )
    {
        @command = ShowItemValuesCommand();
    }
    else if( commandName == WARNING_COMMAND_NAME )
    {
        @command = WarningCommand();
    }
    else if( commandName == SERVICE_INFO_COMMAND_NAME )
    {
        @command = ServiceInfoCommand();
    }
    else if( commandName == FACTION_LIST_NAME )
    {
        @command = FactionListCommand();
    }
    else if( commandName == RESTORE_COMMAND_NAME )
    {
        @command = RestoreCommand();
    }
    else if( commandName == STOP_AREA_COMMAND_NAME )
    {
        @command = StopCommand();
    }
    else if( commandName == SET_PARAMETER_COMMAND_NAME )
    {
        @command = SetParameterCommand();
    }
    else if( commandName == SET_DOOR_CODE_COMMAND_NAME )
    {
        @command = SetDoorCodeCommand();
    }
    else if( commandName == LOCK_DOOR_COMMAND_NAME )
    {
        @command = LockDoorCommand();
    }
    else if( commandName == BREAK_ITEM_COMMAND_NAME )
    {
        @command = BreakItemCommand();
    }
    else if( commandName == LOCATION_TELEPORT_COMMAND_NAME )
    {
        @command = LocationTeleportCommand();
    }
	else if( commandName == CHANGE_ITEM_PICTURE_COMMAND_NAME )
    {
        @command = ChangeItemPictureCommand();
    }
    else if( commandName == CHAR_LIST_COMMAND_NAME )
    {
        @command = CharSheetCommand();
    }
	else if( commandName == CLEAR_HEX_COMMAND_NAME )
    {
        @command = ClearHexCommand();
    }
	else if( commandName == MAKE_FURNITURE )
    {
        @command = MakeFurnitureCommand();
    }
    else if( commandName == SET_FACTION_NAME )
    {
        @command = SetFactionCommand();
    }
    else if( commandName == ADVANCED_SPAWN_COMMAND_NAME )
    {
        @command = AdvancedSpawnCommand();
    }
    else if( commandName == BUILD_COMMAND_NAME )
    {
        @command = BuildCommand();
    }
    else if( commandName == MEMORIZE_NAME_COMMAND_NAME )
    {
        @command = MemorizeNameCommand();
    }
    else if( commandName == HASH_COMMAND_NAME )
    {
        @command = HashCommand();
    }
    else if( commandName == ANSWER_TO_GM_COMMAND_NAME )
    {
        @command = AnswerToGmCommand();
    }
    else if( commandName == ASK_HELP_COMMAND_NAME )
    {
        @command = AskHelpCommand();
    }
    else if( commandName == POLL_COMMAND_NAME )
    {
        @command = PollCommand();
    }
    else if( commandName == SET_CRITTER_DESCRIPTION_BY_ID_COMMAND_NAME )
    {
        @command = SetCritterDescriptionByIdCommand();
    }
    else if( commandName == SET_TARGET_CRITTER_DESCRIPTION_COMMAND_NAME )
    {
        @command = SetTargetCritterDescriptionCommand();
    }
    else if( commandName == SET_ITEM_DESCRIPTION_BY_ID_COMMAND_NAME )
    {
        @command = SetItemDescriptionByIdCommand();
    }
    else if( commandName == SEND_SERVICE_MESSAGE_BY_ID_COMMAND_NAME )
    {
        @command = SendServiceMessageByIdCommand();
    }
    else if( commandName == SEND_SERVICE_MESSAGE_TO_TARGET_COMMAND_NAME )
    {
        @command = SendServiceMessageToTargetCommand();
    }
    else if( commandName == SAY_TO_ALL_COMMAND_NAME )
    {
        @command = SayToAllCommand();
    }
    else if( commandName == COMMAND_HELP_COMMAND_NAME )
    {
        @command = CommandHelpCommand();
    }
    else if( commandName == TEST_TILE )
    {
        @command = TestTile();
    }
    else if( commandName == PUPPET_CONTROL_COMMAND_NAME )
    {
        @command = PuppetControlCommand();
    }
    else if( commandName == PUPPET_DELETE_COMMAND_NAME )
    {
        @command = PuppetDeleteCommand();
    }
    else if( commandName == PUPPET_ATTACK_COMMAND_NAME )
    {
        @command = PuppetAttackCommand();
    }
    else if( commandName == PUPPET_RAID_COMMAND_NAME )
    {
        @command = PuppetRaidCommand();
    }
    else if( commandName == PUPPET_HOME_COMMAND_NAME )
    {
        @command = PuppetHomeCommand();
    }
    else if( commandName == PUPPET_GATHER_COMMAND_NAME )
    {
        @command = PuppetGatherCommand();
    }
    else if( commandName == PUPPET_WALK_COMMAND_NAME )
    {
        @command = PuppetWalkCommand();
    }
    else if( commandName == PUPPET_STOP_COMMAND_NAME )
    {
        @command = PuppetStopCommand();
    }
    else if( commandName == PUPPET_TIE_COMMAND_NAME )
    {
        @command = PuppetTieCommand();
    }
    else if( commandName == BAN )
    {
        @command = BanCommand();
    }
    else if( commandName == BAN_KICK )
    {
        @command = BanKickCommand();
    }
    else if( commandName == BAN_IP )
    {
        @command = BanIpCommand();
    }
    else if( commandName == BAN_UNBAN )
    {
        @command = BanUnBanCommand();
    }
    else if( commandName == BAN_GETIPS )
    {
        @command = BanGetIpsCommand();
    }
    else if( commandName == COMPARE_STAT )
    {
        @command = CompareStatCommand();
    }
    else if( commandName == COMPARE_STAT_RADIUS )
    {
        @command = CompareStatRadiusCommand();
    }
    else if( commandName == KILL )
    {
        @command = KillCommand();
    }
    else if( commandName == ARCADE_HIVE_ADD )
    {
        @command = HiveAddCommand();
    }
    else if( commandName == ARCADE_HIVE_DEL )
    {
        @command = HiveDelCommand();
    }
    else if( commandName == ARCADE_HIVE_LIST )
    {
        @command = HiveListCommand();
    }
    else if( commandName == CELL_CREATE )
    {
        @command = CellCreateCommand();
    }
    else if( commandName == CELL_CREATE_WILD )
    {
        @command = CellCreateWildCommand();
    }
    else if( commandName == CELL_DEL )
    {
        @command = CellDelCommand();
    }
    else if( commandName == CELL_SIZE )
    {
        @command = CellSizeCommand();
    }
    else if( commandName == CELL_MOVE )
    {
        @command = CellMoveCommand();
    }
    else if( commandName == GET_ACCESS_COMMAND_NAME )
    {
        @command = GetAccessCommand();
    }
    else if( substring( commandName, 0, RUN_MODULE_COMMAND_PREFIX.length() ) == RUN_MODULE_COMMAND_PREFIX )
    {
        @command = RunModuleCommand();
        CommandArgument moduleNameArg( substring( commandName, RUN_MODULE_COMMAND_PREFIX.length(), commandName.length() - RUN_MODULE_COMMAND_PREFIX.length() ) );
        command.pushBackArg( moduleNameArg );
    }
    return command;
}

// ---- Command implementations ----

class MakeFurnitureCommand : Command
{
    MakeFurnitureCommand()
    {
        argsRequired = 0;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( @item is null ) { Message( "¬ыберите курсором предмет дл€ создани€ мебели с его картинкой."); return; }
			
			int hash = item.Proto.PicMap;
			
			RunServerScriptUnsafe( "test@unsafe_MakeFurniture", hash, 0, 0, null, null );
        }
    }
}

class ChangeItemPictureCommand : Command
{
    ChangeItemPictureCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			ItemCl@ item = GetMonitorItem( __MouseX, __MouseY );
			if( @item !is null )
			{
				 CommandArgument nameArgument = getArg( 0 );
				if( nameArgument.getType() == ArgumentType::STRING )
				{
					string name = nameArgument.getStringData();
					uint hash = 0;
					if( name.length( ) > 4 && substring( name, 0, 4 ) == "pid:" )
					{
						name = substring( name, 4, name.length() );
						int temp = 0;
						StrToInt( name, temp );
						ProtoItem@ proto = GetProtoItem( temp );
						if( @proto !is null )
							hash = proto.PicMap;
					}
					else hash = GetStrHash( name );
					if( hash != 0 )
						RunServerScriptUnsafe( "test@unsafe_GM_ChangeItemPicture", item.Id, hash, 0, null, null );
				}
			}
        }
    }
}

class CharSheetCommand : Command
{
    CharSheetCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			RunServerScriptUnsafe( "charsheet@unsafe_cl", 0, 0, 0, null, null );
        }
    }
}

class ClearHexCommand : Command
{
    ClearHexCommand()
    {
		argsRequired = 0;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
			uint16 hexX = 0, hexY = 0;
			GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
			if( hexX == 0 || hexY == 0 ) 
			{	
				Message( "Курсор на интерфейсе." );
				return;
			}
			RunServerScriptUnsafe( "test@unsafe_ClearHex", hexX, hexY, 0, null, null );
        }
    }
}

class ItemRadiateCommand : Command
{
    ItemRadiateCommand()
    {
		argsRequired = 5;
    }
    
	private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            CommandArgument VAL  = getArg( 0 );
            CommandArgument FADE = getArg( 1 );
            CommandArgument DIST = getArg( 2 );
            CommandArgument TIME = getArg( 3 );
			CommandArgument _PID  = getArg( 4 );
            if( VAL.getType() == ArgumentType::INTEGER 
			&& FADE.getType() == ArgumentType::INTEGER
			&& DIST.getType() == ArgumentType::INTEGER
			&& TIME.getType() == ArgumentType::INTEGER
			&& _PID.getType() == ArgumentType::INTEGER )
            {
				uint16 hexX = 0, hexY = 0;
				GetMonitorHex( __MouseX, __MouseY, hexX, hexY );
				if( hexX == 0 || hexY == 0 ) 
				{	
					Message( " урсор на интерфейсе." );
					return;
				}
				
				int pid = _PID.getIntData();
				pid = pid == 0 ? PID_URANIUM_ORE : pid;
				int[] args = { hexX, hexY, VAL.getIntData(), FADE.getIntData(), DIST.getIntData(), TIME.getIntData(), pid };
				RunServerScriptUnsafe( "radiation@unsafe_GM_ItemRadiate", 0, 0, 0, null, args );
            }
			else
			{
				Message( "[ #radiate VAL FADE DIST TIME PID]\n —оздают источник радиации под курсором. ¬се значени€ должны быть целочисленными и положительными. PID == 0 спаунит дефолтный уран." );
			}
        }
    }
}

class RespawnCommand : Command
{
    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            @reformedMessage = "~respawn " + chosen.Id;
        }
    }
}

class TeleportToTargetCommand : Command
{
    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( !valid( chosen ) )
        {
            return;
        }
        uint16 x = 0, y = 0, hexX = 0, hexY = 0;
        GetMonitorHex( x, y, hexX, hexY );
        @reformedMessage = "~move " + chosen.Id + " " + hexX + " " + hexY + " 1";
    }
}

class DeleteMobCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_deleteCritter",  target.Id, 0, 0, null, null );
    }
}

class MorCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "morphes@ApplyDesease",  target.Id, 0, 0, null, null );
    }
}

class MobInitCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_mobinit", target.Id, 0, 0, null, null );
    }
}

class LexCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        @reformedMessage = "~run gm lex " + target.Id + " 0 0";
    }
}

class MobHomeCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "raiders@MobHome",  target.Id, 0, 0, null, null );
    }
}

class GetAllCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_GiveAll",  target.Id, 0, 0, null, null );
    }
}

class GiveAllCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_GiveAll",  target.Id, 1, 0, null, null );
    }
}

class DeleteAllCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_GiveAll",  target.Id, 2, 0, null, null );
    }
}

class GMCloneCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "debug@GM_Clone",  target.Id, 0, 0, null, null );
    }
}

class GuardCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        RunServerScript( "guards@GM_InitCommonGuard",  target.Id, 0, 0, null, null );
    }
}

class CloneCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        @reformedMessage = "~run debug Clone " + target.Id + " 0 0";
    }
}

class UncloneCommand : Command
{
    private void process()
    {
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        @reformedMessage = "~run debug Clone " + target.Id + " 1 0";
    }
}

class GodCommand : Command
{
    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            RunServerScript( "debug@GM_god",  chosen.Id, 1, 0, null, null );
        }
    }
}

class DeleteItemCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScript( "debug@GM_delItem",  item.Id, 0, 0, null, null );
    }
}

class OpenDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScript( "debug@GM_openDoor",  item.Id, 0, 0, null, null );
    }
}

class CloseDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScript( "debug@GM_closeDoor",  item.Id, 0, 0, null, null );
    }
}

class BlockDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScript( "debug@GM_noopenDoor",  item.Id, 0, 0, null, null );
    }
}

class ClearDoorCommand : Command
{
    private void process()
    {
        uint16  x = __MouseX, y = __MouseY;
        ItemCl@ item = GetMonitorItem( x, y );
        RunServerScript( "debug@GM_clearDoor",  item.Id, 0, 0, null, null );
    }
}

class SaveCommand : Command
{
    private void process()
    {
        CritterCl @chosen = GetChosen();
        if( valid( chosen ) )
        {
            if( chosen.Param[ ST_VAR5 ] > 3 )
            {
                Message( "Antiflood." );
            }
            else
            {
                RunServerScriptUnsafe( "activation@unsafe_save",  0, 0, 0, null, null );
            }
        }
    }
}

class ZombieCommand : Command
{
    private void process()
    {
        RunServerScriptUnsafe( "general_unsafe@unsafe_zombie",  0, 0, 0, null, null );
    }
}

class SwitchGlobalGridCommand : Command
{
    private void process()
    {
        __global ^= CONF_GLOB_GRID;
        Message( "—етка на глобальной карте теперь " + ( ( __global & CONF_GLOB_GRID != 0 ) ? "включена." : "выключена." ) );
    }
}

class SwitchGlobalWildCommand : Command
{
    private void process()
    {
        __global ^= CONF_GLOB_WILD;
        Message( " арта дикости на глобальной карте теперь " + ( ( __global & CONF_GLOB_WILD != 0 ) ? "включена." : "выключена." ) );
    }
}

class AddNpcCommand : Command
{
    AddNpcCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            @reformedMessage = "~addnpc " + hexX + " " + hexY + " 1 " + protoIdArg.getIntData();
        }
    }
}

class SpawnNpcCommand : Command
{

    SpawnNpcCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            RunServerScript( "raiders@spawnNPC",  protoIdArg.getIntData(), hexX, hexY, null, null );
        }
    }
}

class AddItemCommand : Command
{
    AddItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            @reformedMessage = "~additem " + hexX + " " + hexY + " " + protoIdArg.getIntData() + " 1";
        }
    }
}

class SetAutoDoorModeCommand : Command
{
    SetAutoDoorModeCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument modeArg = getArg( 0 );
        if( modeArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScript( "debug@setautodoor",  item.Id, modeArg.getIntData(), 0, null, null );
        }
    }
}

class CreateAggressiveMobCommand : Command
{
    CreateAggressiveMobCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            @reformedMessage = "~run raiders sendAttack3 " + protoIdArg.getIntData() + " " + hexX + " " + hexY;
        }
    }
}

class GiveItemCommand : Command
{
    GiveItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "debug@GiveItem",  target.Id, protoIdArg.getIntData(), 0, null, null );
        }
    }
}

class GetParameterCommand : Command
{
    GetParameterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument parameterIdArg = getArg( 0 );
        if( parameterIdArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "debug@GM_GetParam",  target.Id, parameterIdArg.getIntData(), 0, null, null );
        }
    }
}

class TraderInitCommand : Command
{
    TraderInitCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            RunServerScript( "debug@GM_TraderInit",  critterIdArg.getIntData(), 0, 0, null, null );
        }
    }
}

class PoliceInitCommand : Command
{
    PoliceInitCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            RunServerScript( "guards@GM_InitGuard",  critterIdArg.getIntData(), 0, 0, null, null );
        }
    }
}

class DarkenScreenCommand : Command
{
    DarkenScreenCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument timeArg = getArg( 0 );
        if( timeArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "debug@Flushblack",  target.Id, timeArg.getIntData(), 0, null, null );
        }
    }
}

class SetSkinCommand : Command
{
    SetSkinCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "skins@GM_skin",  target.Id, idArg.getIntData(), 0, null, null );
        }
    }
}

class GMSayCommand : Command
{
    GMSayCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "gm@GM_say",  target.Id, typeArg.getIntData(), 0, null, null );
        }
    }
}

class DeactivateCommand : Command
{
    DeactivateCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            @reformedMessage = "~setvar 6100 0 " + idArg.getIntData() + " 0 0";
        }
    }
}

class ActivateCommand : Command
{
    ActivateCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            // @reformedMessage = "~setvar 6100 0 " + idArg.getIntData() + " 0 2";
            @reformedMessage = "~setvar 7300 0 " + idArg.getIntData() + " 0 3";
        }
    }
}

class CallCritterCommand : Command
{
    CallCritterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "debug@_ctd",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class MutateCommand : Command
{
    MutateCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "morphes@GM_ApplyFastMutation",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class GhoulCommand : Command
{
    GhoulCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "morphes@GM_ApplyGhoul",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class GetItemCommand : Command
{
    GetItemCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "debug@GM_GetItem",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class TeleportToCritterCommand : Command
{
    TeleportToCritterCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "debug@_ctd",  idArg.getIntData(), 0, 1, null, null );
        }
    }
}

class GetItemsByPidCommand : Command
{
    GetItemsByPidCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument protoIdArg = getArg( 0 );
        if( protoIdArg.getType() == INTEGER )
        {
            RunServerScript( "gm@GM_getItemsByPid",  protoIdArg.getIntData(), 0, 0, null, null );
        }
    }
}

class GetCritterNameCommand : Command
{
    GetCritterNameCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "gm@GM_name",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class ShowItemValuesCommand : Command
{
    ShowItemValuesCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            RunServerScript( "gm@GM_showVal",  idArg.getIntData(), 0, 0, null, null );
        }
    }
}

class WarningCommand : Command
{
    WarningCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        if( idArg.getType() == INTEGER )
        {
            @reformedMessage = "~run warning Warn " + idArg.getIntData() + " 0 0";
        }
    }
}

class ServiceInfoCommand : Command
{
    ServiceInfoCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument flagsArg = getArg( 0 );
        if( flagsArg.getType() == INTEGER )
        {
            RunServerScriptUnsafe( "gm@unsafe_sinf",  flagsArg.getIntData(), 0, 0, null, null );
        }
    }
}

class RaiderHumanoidSpawnCommand : Command
{
    RaiderHumanoidSpawnCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            @reformedMessage = "~run raiders sendAttack " + typeArg.getIntData() + " " + hexX + " " + hexY;
        }
    }
}

class FactionListCommand : Command
{
    FactionListCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            RunServerScript( "factions@ListFactions", typeArg.getIntData(), 0, 0, null, null );
        }
    }
}

class RaiderCreatureSpawnCommand : Command
{
    RaiderCreatureSpawnCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CommandArgument typeArg = getArg( 0 );
        if( typeArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            @reformedMessage = "~run raiders sendAttack2 " + typeArg.getIntData() + " " + hexX + " " + hexY;
        }
    }
}

class StopCommand : Command
{
    StopCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CritterCl@      chosen = GetChosen();
        CommandArgument radius = getArg( 0 );
		CommandArgument delay = getArg( 1 );

        if( valid( chosen ) && radius.getType() == INTEGER && delay.getType() == INTEGER )
        {
			uint16 x = 0, y = 0, hexX = 0, hexY = 0;
			GetMonitorHex( x, y, hexX, hexY );
			int[] coord = { hexX, hexY };

            RunServerScriptUnsafe( "general_unsafe@unsafe_GM_stop",  radius.getIntData(), delay.getIntData(), 0, null, coord );
        }
    }
}

class RestoreCommand : Command
{
    RestoreCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CritterCl@      chosen = GetChosen();
        CommandArgument idArg = getArg( 0 );
        if( valid( chosen ) && idArg.getType() == INTEGER )
        {
            if( chosen.Param[ ST_VAR5 ] > 3 )
            {
                Message( "Antiflood." );
            }
            else
            {
                RunServerScriptUnsafe( "activation@unsafe_restore",  idArg.getIntData(), 0, 0, getArg( 1 ).getStringData(), null );
            }
        }
    }
}

class SetParameterCommand : Command
{
    SetParameterCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        CommandArgument valueArg = getArg( 1 );
        if( idArg.getType() == INTEGER && valueArg.getType() == INTEGER )
        {
            uint16     x = __MouseX, y = __MouseY;
            CritterCl@ target = GetMonitorCritter( x, y );
            RunServerScript( "debug@GM_SetParam",  target.Id, idArg.getIntData(), valueArg.getIntData(), null, null );
        }
    }
}

class SetDoorCodeCommand : Command
{
    SetDoorCodeCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument digitAmountArg = getArg( 0 );
        CommandArgument codeArg = getArg( 1 );
        if( digitAmountArg.getType() == INTEGER && codeArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScript( "debug@GM_setcodedoor",  item.Id, digitAmountArg.getIntData(), codeArg.getIntData(), null, null );
        }
    }
}

class LockDoorCommand : Command
{
    LockDoorCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument complexityArg = getArg( 0 );
        CommandArgument lockerIdArg = getArg( 1 );
        if( complexityArg.getType() == INTEGER && lockerIdArg.getType() == INTEGER )
        {
            uint16  x = __MouseX, y = __MouseY;
            ItemCl@ item = GetMonitorItem( x, y );
            RunServerScript( "debug@GM_lock",  item.Id, complexityArg.getIntData(), lockerIdArg.getIntData(), null, null );
        }
    }
}

class BreakItemCommand : Command
{
    BreakItemCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        CommandArgument breakageRateArg = getArg( 1 );
        if( idArg.getType() == INTEGER && breakageRateArg.getType() == INTEGER )
        {
            RunServerScript( "debug@GM_brokeItem",  idArg.getIntData(), breakageRateArg.getIntData(), 0, null, null );
        }
    }
}

class LocationTeleportCommand : Command
{
    LocationTeleportCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            CommandArgument locationIdArg = getArg( 0 );
            CommandArgument mapIdArg = getArg( 1 );
            if( locationIdArg.getType() == INTEGER && mapIdArg.getType() == INTEGER )
            {
                RunServerScriptUnsafe( "debug@unsafe_GM_tele", chosen.Id, locationIdArg.getIntData(), mapIdArg.getIntData(), null, null );
            }
        }
    }
}

class SetFactionCommand : Command
{
    SetFactionCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument IdArg = getArg( 0 );
        CommandArgument factionArg = getArg( 1 );
        if( IdArg.getType() == INTEGER && factionArg.getType() == INTEGER )
        {
            @reformedMessage = "~setvar 9971 0 " + IdArg.getIntData() + " 0 " + factionArg.getIntData();
        }
    }
}

class AdvancedSpawnCommand : Command
{
    AdvancedSpawnCommand()
    {
        argsRequired = 3;
    }

    private void process()
    {
        CommandArgument mobTypeArg = getArg( 0 );
        CommandArgument weaponArg = getArg( 1 );
        CommandArgument behaviorTypeArg = getArg( 2 );
        if( mobTypeArg.getType() == INTEGER && weaponArg.getType() == INTEGER && behaviorTypeArg.getType() == INTEGER )
        {
            uint16 x = 0, y = 0, hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            int[] coord = { hexX, hexY };
            RunServerScript( "raiders@AdvancedSpawnNPC",  mobTypeArg.getIntData(), weaponArg.getIntData(), behaviorTypeArg.getIntData(), null, coord );
        }
    }
}

class BuildCommand : Command
{
    BuildCommand()
    {
        argsRequired = 3;
    }

    private void process()
    {
        if( getArg( 0 ).getType() == INTEGER && getArg( 1 ).getType() == INTEGER && getArg( 2 ).getType() == INTEGER )
        {
            string@ str = null;
            if( argAmount() >= 4 )
            {
                @str = getArg( 3 ).getStringData();
            }
            RunServerScript( "qmap_debug@_client_build",  getArg( 0 ).getIntData(), getArg( 1 ).getIntData(), getArg( 2 ).getIntData(), str, null );
        }
    }
}

class GetAccessCommand	: Command
{
	GetAccessCommand(){
		argsRequired = 2;
	}
	private void process(){
		string str = ""+getArg(0).getStringData()+":"+getArg(1).getStringData();
		RunServerScriptUnsafe( "gm@unsafe_getaccess",  0, 0, 0, str, null );
	}
}

class MemorizeNameCommand : Command
{
    private void process()
    {
        Message( "ƒл€ запоминани€ имен используйте среднюю кнопку мыши." );
    }
}

class HashCommand : Command
{
    HashCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        uint   hash = GetStrHash( str );
        Message( "hash: " + int(hash) );
    }
}

class SayToAllCommand : Command
{
    SayToAllCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        RunServerScript( "gm@_say2all",  0, 0, 0, str, null );
    }
}

class AnswerToGmCommand : Command
{
    AnswerToGmCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            if( chosen.Param[ ST_VAR5 ] > 3 )
            {
                Message( "Antiflood." );
            }
            else
            {
                string str = getArgumentString();
                RunServerScriptUnsafe( "gm@unsafe_ans",  0, 0, 0, str, null );
                Message( "ќтправлено." );
            }
        }
    }
}

class AskHelpCommand : Command
{
    AskHelpCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            if( chosen.Param[ ST_VAR5 ] > 3 )
            {
                Message( "Antiflood." );
            }
            else
            {
                string str = getArgumentString();
                RunServerScriptUnsafe( "gm@unsafe_help",  0, 0, 0, str, null );
                Message( "ќтправлено." );
            }
        }
    }
}

class PollCommand : Command
{
    PollCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string str = getArgumentString();
        RunServerScript( "gm@_poll",  0, 0, 0, str, null );
    }
}

class SetCritterDescriptionByIdCommand : Command
{
    SetCritterDescriptionByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScript( "gm@_gmlex",  critterIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SetTargetCritterDescriptionCommand : Command
{
    SetTargetCritterDescriptionCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string     str = getArgumentString();
        CritterCl@ target = GetMonitorCritter( __MouseX, __MouseY );
        if( valid( target ) && str.length() > 0 )
        {
            RunServerScript( "gm@_gmlex", target.Id, 0, 0, str, null );
        }
    }
}

class SetItemDescriptionByIdCommand : Command
{
    SetItemDescriptionByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument itemIdArg = getArg( 0 );
        if( itemIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScript( "gm@_gmitemlex",  itemIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SendServiceMessageByIdCommand : Command
{
    SendServiceMessageByIdCommand()
    {
        argsRequired = 2;
    }

    private void process()
    {
        CommandArgument critterIdArg = getArg( 0 );
        if( critterIdArg.getType() == INTEGER )
        {
            string@[] arguments;
            for( uint i = 1; i < argAmount(); ++i )
            {
                arguments.insertLast( getArg( i ).getStringData() );
            }
            string str = join( arguments, " " );
            if( str.length() > 0 )
            {
                RunServerScript( "gm@_private",  critterIdArg.getIntData(), 0, 0, str, null );
            }
        }
    }
}

class SendServiceMessageToTargetCommand : Command
{
    SendServiceMessageToTargetCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        string     str = getArgumentString();
        CritterCl@ target = GetMonitorCritter( __MouseX, __MouseY );
        if( valid( target ) && str.length() > 0 )
        {
            RunServerScript( "gm@_private", target.Id, 0, 0, str, null );
        }
    }
}

class UnsafeActivateCommand : Command
{
    UnsafeActivateCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        CritterCl@ chosen = GetChosen();
        if( valid( chosen ) )
        {
            if( chosen.Param[ ST_VAR5 ] > 3 )
            {
                Message( "Antiflood." );
            }
            else
            {
                CommandArgument strArg = getArg( 0 );
                if( strArg.getStringData().length() > 3 )
                {
                    RunServerScriptUnsafe( "activation@unsafe_act",  0, 0, 0, strArg.getStringData(), null );
                }
            }
        }
    }
}

class PuppetControlCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8      current_group = current();
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        if( valid( target ) )
        {
            CritterCl@ chosen = GetChosen();
			if( chosen.Stat[ ST_ACCESS_LEVEL ] < ACCESS_MODER ) return;
            uint8      Ex = 0;
            for( uint i = current_group * 10, ii = 10 + current_group * 10; i < ii; i++ )
            {
                if( controlled[ i ] == target.Id )
                {
                    Message( "—н€т контроль с криттера " + target.Id );
                    Ex = i - current_group * 10 + 10;
                }
                if( Ex != 0 )
                {
                    if( i != 9 )
                        controlled[ i ] = controlled[ i + 1 ];
                    else
                        controlled[ i ] = 0;
                }
            }
            if( Ex == 0 )
            {
                for( uint i = current_group * 10, ii = 10 + current_group * 10; i < ii; i++ )
                {
                    if( controlled[ i ] == 0 )
                    {
                        controlled[ i ] = target.Id;
                        Message( "¬з€т под контроль криттер " + target.Id );
                        return;
                    }
                }
            }
        }
    }
}

class PuppetDeleteCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8 current_group = current();
        RunServerScript( "raiders@deleteMob", 0, 0, current_group, null, controlled );
    }
}

class PuppetAttackCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8      current_group = current();
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        if( valid( target ) )
        {
            RunServerScript( "raiders@attackMob", target.Id, 0, current_group, null, controlled );
        }
        else
        {
            uint16 hexX = 0, hexY = 0;
            GetMonitorHex( x, y, hexX, hexY );
            string run = 1;
            RunServerScript( "raiders@moveMob", current_group, hexX, hexY, run, controlled );
        }
    }
}

class PuppetRaidCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8 current_group = current();
        RunServerScript( "raiders@assaultMob", 0, 0, current_group, null, controlled );
    }
}

class PuppetHomeCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8 current_group = current();
        RunServerScript( "raiders@HomeMob", 0, 0, current_group, null, controlled );
    }
}

class PuppetGatherCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8 current_group = current();
        RunServerScript( "raiders@GatherMob", 0, 0, current_group, null, controlled );
    }
}

class PuppetWalkCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8  current_group = current();
        uint16 x = __MouseX, y = __MouseY, hexX = 0, hexY = 0;
        GetMonitorHex( x, y, hexX, hexY );
        RunServerScript( "raiders@moveMob", current_group, hexX, hexY, null, controlled );
    }
}

class PuppetStopCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8  current_group = current();
        uint16 x = __MouseX, y = __MouseY, hexX = 0, hexY = 0;
        GetMonitorHex( x, y, hexX, hexY );
        RunServerScript( "raiders@stopMob", current_group, hexX, hexY, null, controlled );
    }
}

class PuppetTieCommand : Command
{
    private void process()
    {
        int[] controlled = control();
        uint8      current_group = current();
        uint16     x = __MouseX, y = __MouseY;
        CritterCl@ target = GetMonitorCritter( x, y );
        if( valid( target ) )
        {
            RunServerScript( "raiders@chaseMob", target.Id, 0, current_group, null, controlled );
        }
    }
}
/*
 * #define BAN	("#ban") // #banid [id] [hours] [kick]
 ****#define BAN_KICK ("#kick") //#kick [id]
 ****#define BAN_IP	("#banip") //#banip [id] [hours] [mask_level]
 ****#define BAN_UNBAN	("#unban") //#unban [id]
 */

class BanCommand : Command
{
    BanCommand()
    {
        argsRequired = 2;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 ), hoursArg = getArg( 1 ), kickArg = getArg( 2 );
        // @reformedMessage = "~run banhammer BanId " + idArg.getIntData() + " "+ hoursArg.getIntData() +" "+ kickArg.getIntData();
        RunServerScript( "gm@banid",  idArg.getIntData(), hoursArg.getIntData(), kickArg.getIntData(), null, null );
    }
}

class BanKickCommand : Command
{
    BanKickCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer KickId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScript( "gm@kickid",  idArg.getIntData(), 0, 0, null, null );
    }
}

class BanIpCommand : Command
{
    BanIpCommand()
    {
        argsRequired = 3;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 ), hoursArg = getArg( 1 ), maskArg = getArg( 2 );
        // @reformedMessage = "~run banhammer KickBanIdIp " + idArg.getIntData() + " "+ hoursArg.getIntData() +" "+ maskArg.getIntData();
        RunServerScript( "gm@kickbanipid",  idArg.getIntData(), hoursArg.getIntData(), maskArg.getIntData(), null, null );
    }
}

class BanUnBanCommand : Command
{
    BanUnBanCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScript( "gm@unbanid",  idArg.getIntData(), 0, 0, null, null );
    }
}

class BanGetIpsCommand : Command
{
    BanGetIpsCommand()
    {
        argsRequired = 1;
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScript( "gm@getips",  idArg.getIntData(), 0, 0, null, null );
    }
}

class CompareStatCommand : Command
{
    CompareStatCommand()
    {
        argsRequired = 3;
    }
    private void process()
    {
        CommandArgument statArg = getArg( 0 );
        CommandArgument idArg;

        int[] ids;

        for( uint8 i = 0, j = argAmount() - 1; i < j; ++i )
        {
            idArg = getArg( i );
            ids.insertLast( idArg.getIntData() );
        }

        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScript( "gm@statcompare",  statArg.getIntData(), 0, 0, null, ids );
    }
}

class CompareStatRadiusCommand : Command
{
    CompareStatRadiusCommand()
    {
        argsRequired = 2;
    }
    private void process()
    {
        CommandArgument statArg = getArg( 0 );
        CommandArgument radiusArg = getArg( 1 );

        // @reformedMessage = "~run banhammer UnbanId " + idArg.getIntData() + " "+ 0 +" "+ 0;
        RunServerScript( "gm@statcompareradius",  statArg.getIntData(), radiusArg.getIntData(), 0, null, null );
    }
}

class KillCommand : Command
{
    KillCommand()
    {
        argsRequired = 1;
        @description = "#kill [id] [deathAnim]\nубивает криттера id типом анимации deathAnim, если не указанна - то стандартна€(падение).";
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        CommandArgument animArg;
        if( argAmount() > 1 )
        {
            animArg = getArg( 1 );
        }

        RunServerScript( "gm@killbytype", idArg.getIntData(), argAmount() > 1 ? animArg.getIntData() : 0, 0, null, null );
    }
}

class HiveListCommand : Command
{
    HiveListCommand()
    {
        argsRequired = 0;
        @description = "#hivelist \nвыводит список текущих логов аркады.";
    }
    private void process()
    {
        RunServerScript( "gm@hivelist", 0, 0, 0, null, null );
    }
}

class HiveDelCommand : Command
{
    HiveDelCommand()
    {
        argsRequired = 1;
        @description = "#hivedel [id]\nудал€ет логово с пор€дковым номером равным id. »спользуйте #hivelist дл€ определени€ id.";
    }
    private void process()
    {
        CommandArgument idArg = getArg( 0 );
        RunServerScript( "gm@hivedel", idArg.getIntData(), 0, 0, null, null );
    }
}

class HiveAddCommand : Command
{
    HiveAddCommand()
    {
        argsRequired = 3;
        @description = "#hiveadd [x] [y] [type]\nдобавл€ет логово с координатами x:y(координаты записываютс€ в системе €чеек) и типом логова type(определ€етс€ по боди тайп криттера).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );
        CommandArgument typeArg = getArg( 2 );
        RunServerScript( "gm@hiveadd", xArg.getIntData(), yArg.getIntData(), typeArg.getIntData(), null, null );
    }
}

class CellCreateCommand : Command
{
    CellCreateCommand()
    {
        argsRequired = 3;
        @description = "#cellcreate [pid] [x] [y] [force]\nсоздает локацию PID с координатами x:y(координаты записываютс€ в системе €чеек). ѕри force > 0 локаци€ перезаписываетс€.";
    }
    private void process()
    {
        CommandArgument pidArg = getArg( 0 );
        CommandArgument xArg = getArg( 1 );
        CommandArgument yArg = getArg( 2 );
        CommandArgument forceArg = getArg( 3 );

        int[] sendInfo = { pidArg.getIntData(), xArg.getIntData(), yArg.getIntData(), forceArg.getIntData() };

        RunServerScript( "gm@cell_create", 0, 0, 0, null, sendInfo );
    }
}

class CellCreateWildCommand : Command
{
    CellCreateWildCommand()
    {
        argsRequired = 5;
        @description = "#cellcreatewild [pid] [x] [y] [wild] [livetime] [force]\nсоздает локацию PID с координатами x:y(координаты записываютс€ в системе €чеек). Wild - дикость. Livetime - врем€ жизни. ѕри force > 0 локаци€ перезаписываетс€.";
    }
    private void process()
    {
        CommandArgument pidArg = getArg( 0 );
        CommandArgument xArg = getArg( 1 );
        CommandArgument yArg = getArg( 2 );
        CommandArgument wildArg = getArg( 3 );
        CommandArgument liveArg = getArg( 4 );
        CommandArgument forceArg = getArg( 5 );

        int[] sendInfo = { pidArg.getIntData(), xArg.getIntData(), yArg.getIntData(), wildArg.getIntData(), liveArg.getIntData(), forceArg.getIntData() };

        RunServerScript( "gm@cell_create_wild", 0, 0, 0, null, sendInfo );
    }
}

class CellMoveCommand : Command
{
    CellMoveCommand()
    {
        argsRequired = 4;
        @description = "#cellmove [x] [y] [x1] [y1]\nперемещает локацию с координатами x:y в координаты x1:y1(координаты записываютс€ в системе €чеек).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );
        CommandArgument x1Arg = getArg( 2 );
        CommandArgument y1Arg = getArg( 3 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData(), x1Arg.getIntData(), y1Arg.getIntData() };

        RunServerScript( "gm@cell_move", 0, 0, 0, null, sendInfo );
    }
}

class CellDelCommand : Command
{
    CellDelCommand()
    {
        argsRequired = 2;
        @description = "#celldel [x] [y]\nудал€ет локацию с координатами x:y(координаты записываютс€ в системе €чеек).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData() };

        RunServerScript( "gm@cell_del", 0, 0, 0, null, sendInfo );
    }
}

class CellSizeCommand : Command
{
    CellSizeCommand()
    {
        argsRequired = 4;
        @description = "#cellsize [x] [y] [sizeX] [sizeY]\nизмен€ет размер локации с координатами x:y(координаты записываютс€ в системе €чеек) на sizeX : sizeY(точкой отсчета принимаетс€ правый верхний угол. будьте внимательны).";
    }
    private void process()
    {
        CommandArgument xArg = getArg( 0 );
        CommandArgument yArg = getArg( 1 );
        CommandArgument sXArg = getArg( 2 );
        CommandArgument sYArg = getArg( 3 );

        int[] sendInfo = { xArg.getIntData(), yArg.getIntData(), sXArg.getIntData(), sYArg.getIntData() };

        RunServerScript( "gm@cell_size", 0, 0, 0, null, sendInfo );
    }
}

class RunModuleCommand : Command
{
    RunModuleCommand()
    {
        // module name and function name are required, everything else will be checked on global level
        argsRequired = 2;
    }

    private void process()
    {
        const string RUN_COMMAND_NAME = "~run";
        const string COMMAND_ARG_SEPARATOR = " ";
        const string DEFAULT_PARAMETER = "0";
        const uint   ARGUMENTS_NEEDED = 6;

        string       moduleName = getArg( 0 ).getStringData();
        string       commandName = RUN_MODULE_COMMAND_PREFIX + moduleName;
        if( commandName == RUN_DEBUG_COMMAND_NAME )
        {
            moduleName = DEBUG_MODULE_NAME;
        }
        else if( commandName == RUN_TEST_COMMAND_NAME )
        {
            moduleName = TEST_MODULE_NAME;
        }
        else if( commandName == RUN_ACTIVATION_COMMAND_NAME )
        {
            moduleName = ACTIVATION_MODULE_NAME;
        }
        else if( commandName == RUN_SKINS_COMMAND_NAME )
        {
            moduleName = SKINS_MODULE_NAME;
        }
        else if( commandName == RUN_QMAP_DEBUG_COMMAND_NAME )
        {
            moduleName = QMAP_DEBUG_MODULE_NAME;
        }

        string@[] runCommandParts;
        runCommandParts.insertLast( string( RUN_COMMAND_NAME ) );
        runCommandParts.insertLast( moduleName );
        for( uint i = 1; i < argAmount(); ++i )
        {
            runCommandParts.insertLast( getArg( i ).getStringData() );
        }
        for( uint i = runCommandParts.length(); i < ARGUMENTS_NEEDED; ++i )
        {
            runCommandParts.insertLast( string( DEFAULT_PARAMETER ) );
        }
        @reformedMessage = join( runCommandParts, COMMAND_ARG_SEPARATOR );
    }
}

class CommandHelpCommand : Command
{
    CommandHelpCommand()
    {
        argsRequired = 1;
    }

    private void process()
    {
        const string INVALID_COMMAND_MESSAGE = "There is no such command.";
        Command@     correspondingCommand = GetCommandByName( getArg( 0 ).getStringData() );

        if( !valid( correspondingCommand ) )
        {
            Message( INVALID_COMMAND_MESSAGE );
        }
        else
        {
            Message( correspondingCommand.getDescription() );
        }
    }
}

class TestTile : Command
{
    TestTile()
    {
        argsRequired = 2;
    }

    private void process()
    {
        uint       val = uint( getArg( 0 ).getIntData() ) & 0xF;
        string@    str = getArg( 1 ).getStringData();

        CritterCl@ ch = GetChosen();
        uint16     hx = ch.HexX & 0xFFFE, hy = ch.HexY & 0xFFFE;
        Message( "TestAnim " + TestAnim( GetStrHash( str ), hx, hy, val ) );
    }
}

// ----------------------------------

bool gm_msg( string& message )
{
    if( message.length() < 2 || message[ 1 ] == ' ' )
        return false;
    string@[] @ parts = split( message, " " );

    if( !valid( parts ) )
        return false;
    Command@ @command = GetCommandByName( parts[ 0 ] );

    if( !valid( command ) )  // no such command exists
    {
        return false;
    }
    for( uint i = 1; i < parts.length(); ++i )
    {
        CommandArgument arg;
        int             number = 0;
        bool            isNum = StrToInt( parts[ i ], number );
        if( isNum )
        {
            arg = CommandArgument( number );
        }
        else
        {
            arg = CommandArgument( parts[ i ] );
        }
        command.pushBackArg( arg );
    }

    command.run();
    string@ reformedMessage = command.getReformedMessage();
    if( valid( reformedMessage ) )  // message should be passed further
    {
        message = reformedMessage;
        return true;
    }
    return false;
}
