/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const PATH_TO_FASTPANEL_FOLDER: &'static [u8; 13usize] = b"./fastpanel/\0";
pub const SAY_NORM: u32 = 1;
pub const SAY_NORM_ON_HEAD: u32 = 2;
pub const SAY_SHOUT: u32 = 3;
pub const SAY_SHOUT_ON_HEAD: u32 = 4;
pub const SAY_EMOTE: u32 = 5;
pub const SAY_EMOTE_ON_HEAD: u32 = 6;
pub const SAY_WHISP: u32 = 7;
pub const SAY_WHISP_ON_HEAD: u32 = 8;
pub const SAY_SOCIAL: u32 = 9;
pub const SAY_RADIO: u32 = 10;
pub const SAY_NETMSG: u32 = 11;
pub const SAY_DIALOG: u32 = 12;
pub const SAY_APPEND: u32 = 13;
pub const SAY_ENCOUNTER_ANY: u32 = 14;
pub const SAY_ENCOUNTER_RT: u32 = 15;
pub const SAY_ENCOUNTER_TB: u32 = 16;
pub const SAY_FIX_RESULT: u32 = 17;
pub const SAY_DIALOGBOX_TEXT: u32 = 18;
pub const SAY_SAY_TITLE: u32 = 39;
pub const SAY_SAY_TEXT: u32 = 40;
pub const SAY_FLASH_WINDOW: u32 = 41;
pub const TEXTMSG_TEXT: u32 = 0;
pub const TEXTMSG_DLG: u32 = 1;
pub const TEXTMSG_ITEM: u32 = 2;
pub const TEXTMSG_GAME: u32 = 3;
pub const TEXTMSG_GM: u32 = 4;
pub const TEXTMSG_COMBAT: u32 = 5;
pub const TEXTMSG_QUEST: u32 = 6;
pub const TEXTMSG_HOLO: u32 = 7;
pub const TEXTMSG_CRAFT: u32 = 8;
pub const TEXTMSG_INTERNAL: u32 = 9;
pub const COND_LIFE: u32 = 1;
pub const COND_KNOCKOUT: u32 = 2;
pub const COND_DEAD: u32 = 3;
pub const GENDER_MALE: u32 = 0;
pub const GENDER_FEMALE: u32 = 1;
pub const GENDER_IT: u32 = 2;
pub const ACCESSORY_NONE: u32 = 0;
pub const ACCESSORY_CRITTER: u32 = 1;
pub const ACCESSORY_HEX: u32 = 2;
pub const ACCESSORY_CONTAINER: u32 = 3;
pub const ITEM_TYPE_NONE: u32 = 0;
pub const ITEM_TYPE_ARMOR: u32 = 1;
pub const ITEM_TYPE_DRUG: u32 = 2;
pub const ITEM_TYPE_WEAPON: u32 = 3;
pub const ITEM_TYPE_AMMO: u32 = 4;
pub const ITEM_TYPE_MISC: u32 = 5;
pub const ITEM_TYPE_KEY: u32 = 7;
pub const ITEM_TYPE_CONTAINER: u32 = 8;
pub const ITEM_TYPE_DOOR: u32 = 9;
pub const ITEM_TYPE_GRID: u32 = 10;
pub const ITEM_TYPE_GENERIC: u32 = 11;
pub const ITEM_TYPE_WALL: u32 = 12;
pub const ITEM_TYPE_CAR: u32 = 13;
pub const ITEM_TYPE_PLANT: u32 = 15;
pub const ITEM_TYPE_FOOD: u32 = 16;
pub const ITEM_SUBTYPE_UNDEFINED: u32 = 0;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_BEGIN: u32 = 1;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL: u32 = 1;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER: u32 = 2;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_SMG: u32 = 3;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_RIFLE: u32 = 4;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_ASSAULTRIFLE: u32 = 5;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_SNIPERRIFLE: u32 = 6;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN: u32 = 7;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_AUTOSHOTGUN: u32 = 8;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_LMG: u32 = 9;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_MACHINEGUN: u32 = 10;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_NADELAUNCHER: u32 = 11;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_FLAMETHROWER: u32 = 12;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_MINIGUN: u32 = 13;
pub const ITEM_SUBTYPE_WEAPON_NORMAL_END: u32 = 13;
pub const ITEM_SUBTYPE_WEAPON_LASER_BEGIN: u32 = 15;
pub const ITEM_SUBTYPE_WEAPON_LASER_PISTOL: u32 = 15;
pub const ITEM_SUBTYPE_WEAPON_LASER_RIFLE: u32 = 16;
pub const ITEM_SUBTYPE_WEAPON_LASER_SMG: u32 = 17;
pub const ITEM_SUBTYPE_WEAPON_LASER_SNIPERRIFLE: u32 = 18;
pub const ITEM_SUBTYPE_WEAPON_LASER_SHOTGUN: u32 = 19;
pub const ITEM_SUBTYPE_WEAPON_LASER_END: u32 = 19;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_BEGIN: u32 = 25;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_PISTOL: u32 = 25;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_RIFLE: u32 = 26;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_SMG: u32 = 27;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_SNIPERRIFLE: u32 = 28;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_SHOTGUN: u32 = 29;
pub const ITEM_SUBTYPE_WEAPON_PLASMA_END: u32 = 29;
pub const ITEM_SUBTYPE_WEAPON_PULSE_BEGIN: u32 = 35;
pub const ITEM_SUBTYPE_WEAPON_PULSE_PISTOL: u32 = 35;
pub const ITEM_SUBTYPE_WEAPON_PULSE_RIFLE: u32 = 36;
pub const ITEM_SUBTYPE_WEAPON_PULSE_SMG: u32 = 37;
pub const ITEM_SUBTYPE_WEAPON_PULSE_SNIPERRIFLE: u32 = 38;
pub const ITEM_SUBTYPE_WEAPON_PULSE_SHOTGUN: u32 = 39;
pub const ITEM_SUBTYPE_WEAPON_PULSE_END: u32 = 39;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_BEGIN: u32 = 45;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_FRAG: u32 = 45;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_CONCUSSION: u32 = 46;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_FLASH: u32 = 47;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_SMOKE: u32 = 48;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_PLASMA: u32 = 49;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_ELECTRO: u32 = 50;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_MOLOTOV: u32 = 51;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_INCENDIARY: u32 = 52;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_GAS: u32 = 53;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_ACID: u32 = 54;
pub const ITEM_SUBTYPE_WEAPON_GRENADE_END: u32 = 54;
pub const ITEM_SUBTYPE_WEAPON_MELEE_BEGIN: u32 = 55;
pub const ITEM_SUBTYPE_WEAPON_MELEE_KNIFE: u32 = 55;
pub const ITEM_SUBTYPE_WEAPON_MELEE_LONG_KNIFE: u32 = 56;
pub const ITEM_SUBTYPE_WEAPON_MELEE_SPEAR: u32 = 57;
pub const ITEM_SUBTYPE_WEAPON_MELEE_HAMMER: u32 = 58;
pub const ITEM_SUBTYPE_WEAPON_MELEE_GLOVE: u32 = 59;
pub const ITEM_SUBTYPE_WEAPON_MELEE_CLUB: u32 = 60;
pub const ITEM_SUBTYPE_WEAPON_MELEE_END: u32 = 60;
pub const ITEM_SUBTYPE_ARMOR_BEGIN: u32 = 70;
pub const ITEM_SUBTYPE_ARMOR_NONE: u32 = 70;
pub const ITEM_SUBTYPE_ARMOR_HIDDENVEST: u32 = 71;
pub const ITEM_SUBTYPE_ARMOR_LIGHT: u32 = 72;
pub const ITEM_SUBTYPE_ARMOR_MEDIUM: u32 = 73;
pub const ITEM_SUBTYPE_ARMOR_HEAVY: u32 = 74;
pub const ITEM_SUBTYPE_ARMOR_POWERED: u32 = 75;
pub const ITEM_SUBTYPE_ARMOR_ROBOSUIT: u32 = 76;
pub const ITEM_SUBTYPE_ARMOR_END: u32 = 76;
pub const ITEM_SUBTYPE_DRUG_BEGIN: u32 = 100;
pub const ITEM_SUBTYPE_DRUG_LIGHT_LONG: u32 = 100;
pub const ITEM_SUBTYPE_DRUG_LIGHT_SHORT: u32 = 101;
pub const ITEM_SUBTYPE_DRUG_HEAVY_LONG: u32 = 102;
pub const ITEM_SUBTYPE_DRUG_HEAVY_SHORT: u32 = 103;
pub const ITEM_SUBTYPE_DRUG_EXOTIC_SHORT: u32 = 104;
pub const ITEM_SUBTYPE_DRUG_EXOTIC_LONG: u32 = 105;
pub const ITEM_SUBTYPE_DRUG_END: u32 = 105;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_BEGIN: u32 = 110;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_SMALL: u32 = 110;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_MEDIUM: u32 = 111;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_LARGE: u32 = 112;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_EXOTIC: u32 = 113;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_PRIMITIVE: u32 = 114;
pub const ITEM_SUBTYPE_DRUG_STIMPACK_END: u32 = 114;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL: u32 = 120;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_LIGHT: u32 = 120;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_MEDIUM: u32 = 121;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_HEAVY: u32 = 122;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_LOW_QUALITY: u32 = 123;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_BAD_BREW: u32 = 124;
pub const ITEM_SUBTYPE_DRUG_ALCOHOL_END: u32 = 124;
pub const ITEM_SUBTYPE_DRUG_DRINK_BEGIN: u32 = 130;
pub const ITEM_SUBTYPE_DRUG_DRINK_WATER: u32 = 130;
pub const ITEM_SUBTYPE_DRUG_DRINK_WATER_BOILED: u32 = 131;
pub const ITEM_SUBTYPE_DRUG_DRINK_WATER_INFECTED: u32 = 132;
pub const ITEM_SUBTYPE_DRUG_DRINK_WATER_PURE: u32 = 133;
pub const ITEM_SUBTYPE_DRUG_DRINK_COLD: u32 = 134;
pub const ITEM_SUBTYPE_DRUG_DRINK_HOT: u32 = 135;
pub const ITEM_SUBTYPE_DRUG_DRINK_SWEET_LEMONADE: u32 = 136;
pub const ITEM_SUBTYPE_DRUG_DRINK_END: u32 = 136;
pub const ITEM_SUBTYPE_DRUG_FOOD_BEGIN: u32 = 140;
pub const ITEM_SUBTYPE_DRUG_FOOD_MEAT: u32 = 140;
pub const ITEM_SUBTYPE_DRUG_FOOD_MEAT_RAW: u32 = 141;
pub const ITEM_SUBTYPE_DRUG_FOOD_MEAT_COOKED: u32 = 142;
pub const ITEM_SUBTYPE_DRUG_FOOD_MEAT_SPOILED: u32 = 143;
pub const ITEM_SUBTYPE_DRUG_FOOD_EATABLE: u32 = 144;
pub const ITEM_SUBTYPE_DRUG_FOOD_INGRIDIENT: u32 = 145;
pub const ITEM_SUBTYPE_DRUG_FOOD_END: u32 = 145;
pub const ITEM_SUBTYPE_DRUG_MEDS_BEGIN: u32 = 180;
pub const ITEM_SUBTYPE_DRUG_MEDS_END: u32 = 181;
pub const ITEM_TYPE_MAGIC: u32 = 20;
pub const ITEM_HIDDEN: u32 = 1;
pub const ITEM_FLAT: u32 = 2;
pub const ITEM_NO_BLOCK: u32 = 4;
pub const ITEM_SHOOT_THRU: u32 = 8;
pub const ITEM_LIGHT_THRU: u32 = 16;
pub const ITEM_MULTI_HEX: u32 = 32;
pub const ITEM_WALL_TRANS_END: u32 = 64;
pub const ITEM_TWO_HANDS: u32 = 128;
pub const ITEM_BIG_GUN: u32 = 256;
pub const ITEM_ALWAYS_VIEW: u32 = 512;
pub const ITEM_HAS_TIMER: u32 = 1024;
pub const ITEM_BAD_ITEM: u32 = 2048;
pub const ITEM_NO_HIGHLIGHT: u32 = 4096;
pub const ITEM_SHOW_ANIM: u32 = 8192;
pub const ITEM_SHOW_ANIM_EXT: u32 = 16384;
pub const ITEM_LIGHT: u32 = 32768;
pub const ITEM_GECK: u32 = 65536;
pub const ITEM_TRAP: u32 = 131072;
pub const ITEM_NO_LIGHT_INFLUENCE: u32 = 262144;
pub const ITEM_NO_LOOT: u32 = 524288;
pub const ITEM_NO_STEAL: u32 = 1048576;
pub const ITEM_GAG: u32 = 2097152;
pub const ITEM_COLORIZE: u32 = 4194304;
pub const ITEM_COLORIZE_INV: u32 = 8388608;
pub const ITEM_CAN_USE_ON_SMTH: u32 = 16777216;
pub const ITEM_CAN_LOOK: u32 = 33554432;
pub const ITEM_CAN_TALK: u32 = 67108864;
pub const ITEM_CAN_PICKUP: u32 = 134217728;
pub const ITEM_CAN_USE: u32 = 268435456;
pub const ITEM_HOLODISK: u32 = 536870912;
pub const ITEM_RADIO: u32 = 1073741824;
pub const ITEM_CACHED: u32 = 2147483648;
pub const FOOD_KNOCKOUT: u32 = 1;
pub const FOOD_RADIOACTIVE: u32 = 2;
pub const FOOD_POISONED: u32 = 4;
pub const DAMAGE_UNCALLED: u32 = 0;
pub const DAMAGE_NORMAL: u32 = 1;
pub const DAMAGE_LASER: u32 = 2;
pub const DAMAGE_FIRE: u32 = 3;
pub const DAMAGE_PLASMA: u32 = 4;
pub const DAMAGE_ELECTR: u32 = 5;
pub const DAMAGE_EMP: u32 = 6;
pub const DAMAGE_EXPLODE: u32 = 7;
pub const CRITTER_EVENT_IDLE: u32 = 0;
pub const CRITTER_EVENT_FINISH: u32 = 1;
pub const CRITTER_EVENT_DEAD: u32 = 2;
pub const CRITTER_EVENT_RESPAWN: u32 = 3;
pub const CRITTER_EVENT_SHOW_CRITTER: u32 = 4;
pub const CRITTER_EVENT_SHOW_CRITTER_1: u32 = 5;
pub const CRITTER_EVENT_SHOW_CRITTER_2: u32 = 6;
pub const CRITTER_EVENT_SHOW_CRITTER_3: u32 = 7;
pub const CRITTER_EVENT_HIDE_CRITTER: u32 = 8;
pub const CRITTER_EVENT_HIDE_CRITTER_1: u32 = 9;
pub const CRITTER_EVENT_HIDE_CRITTER_2: u32 = 10;
pub const CRITTER_EVENT_HIDE_CRITTER_3: u32 = 11;
pub const CRITTER_EVENT_SHOW_ITEM_ON_MAP: u32 = 12;
pub const CRITTER_EVENT_CHANGE_ITEM_ON_MAP: u32 = 13;
pub const CRITTER_EVENT_HIDE_ITEM_ON_MAP: u32 = 14;
pub const CRITTER_EVENT_ATTACK: u32 = 15;
pub const CRITTER_EVENT_ATTACKED: u32 = 16;
pub const CRITTER_EVENT_STEALING: u32 = 17;
pub const CRITTER_EVENT_MESSAGE: u32 = 18;
pub const CRITTER_EVENT_USE_ITEM: u32 = 19;
pub const CRITTER_EVENT_USE_ITEM_ON_ME: u32 = 20;
pub const CRITTER_EVENT_USE_SKILL: u32 = 21;
pub const CRITTER_EVENT_USE_SKILL_ON_ME: u32 = 22;
pub const CRITTER_EVENT_DROP_ITEM: u32 = 23;
pub const CRITTER_EVENT_MOVE_ITEM: u32 = 24;
pub const CRITTER_EVENT_KNOCKOUT: u32 = 25;
pub const CRITTER_EVENT_SMTH_DEAD: u32 = 26;
pub const CRITTER_EVENT_SMTH_STEALING: u32 = 27;
pub const CRITTER_EVENT_SMTH_ATTACK: u32 = 28;
pub const CRITTER_EVENT_SMTH_ATTACKED: u32 = 29;
pub const CRITTER_EVENT_SMTH_USE_ITEM: u32 = 30;
pub const CRITTER_EVENT_SMTH_USE_SKILL: u32 = 31;
pub const CRITTER_EVENT_SMTH_DROP_ITEM: u32 = 32;
pub const CRITTER_EVENT_SMTH_MOVE_ITEM: u32 = 33;
pub const CRITTER_EVENT_SMTH_KNOCKOUT: u32 = 34;
pub const CRITTER_EVENT_PLANE_BEGIN: u32 = 35;
pub const CRITTER_EVENT_PLANE_END: u32 = 36;
pub const CRITTER_EVENT_PLANE_RUN: u32 = 37;
pub const CRITTER_EVENT_BARTER: u32 = 38;
pub const CRITTER_EVENT_TALK: u32 = 39;
pub const CRITTER_EVENT_GLOBAL_PROCESS: u32 = 40;
pub const CRITTER_EVENT_GLOBAL_INVITE: u32 = 41;
pub const CRITTER_EVENT_TURN_BASED_PROCESS: u32 = 42;
pub const CRITTER_EVENT_SMTH_TURN_BASED_PROCESS: u32 = 43;
pub const CRITTER_EVENT_MAX: u32 = 44;
pub const PLANE_RUN_GLOBAL: u32 = 0;
pub const PLANE_KEEP: u32 = 1;
pub const PLANE_DISCARD: u32 = 2;
pub const MAP_EVENT_FINISH: u32 = 0;
pub const MAP_EVENT_LOOP_0: u32 = 1;
pub const MAP_EVENT_LOOP_1: u32 = 2;
pub const MAP_EVENT_LOOP_2: u32 = 3;
pub const MAP_EVENT_LOOP_3: u32 = 4;
pub const MAP_EVENT_LOOP_4: u32 = 5;
pub const MAP_EVENT_IN_CRITTER: u32 = 6;
pub const MAP_EVENT_OUT_CRITTER: u32 = 7;
pub const MAP_EVENT_CRITTER_DEAD: u32 = 8;
pub const MAP_EVENT_TURN_BASED_BEGIN: u32 = 9;
pub const MAP_EVENT_TURN_BASED_END: u32 = 10;
pub const MAP_EVENT_TURN_BASED_PROCESS: u32 = 11;
pub const MAP_EVENT_MAX: u32 = 12;
pub const ITEM_EVENT_FINISH: u32 = 0;
pub const ITEM_EVENT_ATTACK: u32 = 1;
pub const ITEM_EVENT_USE: u32 = 2;
pub const ITEM_EVENT_USE_ON_ME: u32 = 3;
pub const ITEM_EVENT_SKILL: u32 = 4;
pub const ITEM_EVENT_DROP: u32 = 5;
pub const ITEM_EVENT_MOVE: u32 = 6;
pub const ITEM_EVENT_WALK: u32 = 7;
pub const ITEM_EVENT_MAX: u32 = 8;
pub const WEAPON_PERK_LONG_RANGE: u32 = 1;
pub const WEAPON_PERK_ACCURATE: u32 = 2;
pub const WEAPON_PERK_PENETRATE: u32 = 3;
pub const WEAPON_PERK_KNOCKBACK: u32 = 4;
pub const WEAPON_PERK_SCOPE_RANGE: u32 = 5;
pub const WEAPON_PERK_FAST_RELOAD: u32 = 6;
pub const WEAPON_PERK_NIGHT_SIGHT: u32 = 7;
pub const WEAPON_PERK_FLAMEBOY: u32 = 8;
pub const WEAPON_PERK_ENHANCED_KNOCKOUT: u32 = 9;
pub const ARMOR_PERK_POWERED: u32 = 1;
pub const ARMOR_PERK_COMBAT: u32 = 2;
pub const ARMOR_PERK_ADVANCED_I: u32 = 3;
pub const ARMOR_PERK_ADVANCED_II: u32 = 4;
pub const ARMOR_PERK_CHARISMA: u32 = 5;
pub const ARMOR_PERK_ECZO: u32 = 6;
pub const ARMOR_PERK_ECZO_2: u32 = 7;
pub const ARMOR_PERK_UGLY: u32 = 8;
pub const SLOT_PERK_MIRROR_SHADES: u32 = 1;
pub const SLOT_PERK_COSMETIC_CASE: u32 = 2;
pub const SLOT_PERK_MOTION_SENSOR: u32 = 4;
pub const SLOT_PERK_STEALTH_BOY: u32 = 8;
pub const MESSAGE_TO_WHO_SEES_ME: u32 = 0;
pub const MESSAGE_TO_I_SEE: u32 = 1;
pub const MESSAGE_TO_ALL_ON_MAP: u32 = 2;
pub const ACTION_MOVE: u32 = 0;
pub const ACTION_RUN: u32 = 1;
pub const ACTION_MOVE_ITEM: u32 = 2;
pub const ACTION_MOVE_ITEM_SWAP: u32 = 3;
pub const ACTION_USE_ITEM: u32 = 4;
pub const ACTION_DROP_ITEM: u32 = 5;
pub const ACTION_USE_WEAPON: u32 = 6;
pub const ACTION_RELOAD_WEAPON: u32 = 7;
pub const ACTION_USE_SKILL: u32 = 8;
pub const ACTION_PICK_ITEM: u32 = 9;
pub const ACTION_PICK_CRITTER: u32 = 10;
pub const ACTION_OPERATE_CONTAINER: u32 = 11;
pub const ACTION_BARTER: u32 = 12;
pub const ACTION_DODGE: u32 = 13;
pub const ACTION_DAMAGE: u32 = 14;
pub const ACTION_DAMAGE_FORCE: u32 = 15;
pub const ACTION_KNOCKOUT: u32 = 16;
pub const ACTION_STANDUP: u32 = 17;
pub const ACTION_FIDGET: u32 = 18;
pub const ACTION_DEAD: u32 = 19;
pub const ACTION_CONNECT: u32 = 20;
pub const ACTION_DISCONNECT: u32 = 21;
pub const ACTION_RESPAWN: u32 = 22;
pub const ACTION_REFRESH: u32 = 23;
pub const ACTION_TEST: u32 = 24;
pub const ACTION_WINDUP: u32 = 25;
pub const ACTION_FLAG_CHOSEN_INCLUSIVE: u32 = 1;
pub const ACTION_DIR: u32 = 24;
pub const ACTION_TALK: u32 = 25;
pub const ACTION_FAST: u32 = 26;
pub const CONT_ACTION_PICK_ITEM: u32 = 30;
pub const CONT_ACTION_PICK_CRIT: u32 = 31;
pub const CONT_ACTION_DIR: u32 = 32;
pub const SLOT_INV: u32 = 0;
pub const SLOT_HAND1: u32 = 1;
pub const SLOT_HAND2: u32 = 2;
pub const SLOT_ARMOR: u32 = 3;
pub const SLOT_GROUND: u32 = 255;
pub const CTE_POISON: u32 = 1;
pub const CTE_RADIATION: u32 = 2;
pub const CTE_TRADER: u32 = 3;
pub const CTE_OBSERVING: u32 = 4;
pub const CTE_AUTOKILL: u32 = 5;
pub const CTE_MUTATION: u32 = 7;
pub const CTE_HAIR_GROW: u32 = 8;
pub const CTE_WARNING: u32 = 9;
pub const CTE_SLOWRELOAD: u32 = 10;
pub const CTE_CHOOSESKIN: u32 = 11;
pub const CTE_DELETECORPSE: u32 = 12;
pub const CTE_ARCADEDANGER: u32 = 13;
pub const CTE_ROTTEN: u32 = 14;
pub const CTE_SKINNING: u32 = 15;
pub const CTE_TESTING1: u32 = 16;
pub const CTE_TESTING2: u32 = 17;
pub const CTE_SLEEPING: u32 = 18;
pub const CTE_AP_REGEN: u32 = 20;
pub const CTE_EXPBAR: u32 = 30;
pub const CTE_EVILMINDS: u32 = 38;
pub const CTE_TEST: u32 = 39;
pub const CTE_STUDY: u32 = 40;
pub const CTE_HEAL: u32 = 41;
pub const CTE_DOC: u32 = 42;
pub const CTE_WORK: u32 = 43;
pub const CTE_BLEED: u32 = 44;
pub const CTE_THROW: u32 = 45;
pub const CTE_BLOOD_TOXIC: u32 = 46;
pub const CTE_MOTEL_ROOM: u32 = 47;
pub const CTE_HUNGER: u32 = 48;
pub const CTE_DYSPNEA: u32 = 49;
pub const CTE_EXP: u32 = 50;
pub const CTE_ORG_DMG: u32 = 51;
pub const CTE_LIMB_MANAGEMENT: u32 = 52;
pub const CTE_QUICKHEAL: u32 = 53;
pub const CTE_STIMOVERDOSE: u32 = 54;
pub const CTE_SSTIMOVERDOSE: u32 = 55;
pub const CTE_PSI_HEAL: u32 = 56;
pub const CTE_PSI_VISION: u32 = 57;
pub const CTE_PSI_DEGRAD: u32 = 58;
pub const CTE_PSI_SHIELD: u32 = 59;
pub const CTE_BODYSWAP: u32 = 60;
pub const CTE_BRAHMIN_PREGNANCY: u32 = 61;
pub const CTE_BRAHMIN_SEARCH: u32 = 62;
pub const CTE_BRAHMIN_GROWTH: u32 = 63;
pub const CTE_BRAHMIN_FOLLOW: u32 = 64;
pub const CTE_AGGRESSION: u32 = 65;
pub const DYS: u32 = 191;
pub const CHANCE: u32 = 192;
pub const P_PSI: u32 = 193;
pub const P_PSI_MAX: u32 = 194;
pub const P_PSI_LIMIT: u32 = 195;
pub const ROLL: u32 = 196;
pub const STAT_BEGIN: u32 = 0;
pub const STAT_END: u32 = 199;
pub const STAT_COUNT: u32 = 200;
pub const STAT_EXT_BEGIN: u32 = 32;
pub const STAT_EXT_END: u32 = 63;
pub const ST_STRENGTH: u32 = 0;
pub const ST_PERCEPTION: u32 = 1;
pub const ST_ENDURANCE: u32 = 2;
pub const ST_CHARISMA: u32 = 3;
pub const ST_INTELLECT: u32 = 4;
pub const ST_AGILITY: u32 = 5;
pub const ST_LUCK: u32 = 6;
pub const ST_MAX_LIFE: u32 = 7;
pub const ST_ACTION_POINTS: u32 = 8;
pub const ST_ARMOR_CLASS: u32 = 9;
pub const ST_MELEE_DAMAGE: u32 = 10;
pub const ST_CARRY_WEIGHT: u32 = 11;
pub const ST_SEQUENCE: u32 = 12;
pub const ST_HEALING_RATE: u32 = 13;
pub const ST_CRITICAL_CHANCE: u32 = 14;
pub const ST_MAX_CRITICAL: u32 = 15;
pub const ST_NORMAL_ABSORB: u32 = 16;
pub const ST_LASER_ABSORB: u32 = 17;
pub const ST_FIRE_ABSORB: u32 = 18;
pub const ST_PLASMA_ABSORB: u32 = 19;
pub const ST_ELECTRO_ABSORB: u32 = 20;
pub const ST_EMP_ABSORB: u32 = 21;
pub const ST_EXPLODE_ABSORB: u32 = 22;
pub const ST_NORMAL_RESIST: u32 = 23;
pub const ST_LASER_RESIST: u32 = 24;
pub const ST_FIRE_RESIST: u32 = 25;
pub const ST_PLASMA_RESIST: u32 = 26;
pub const ST_ELECTRO_RESIST: u32 = 27;
pub const ST_EMP_RESIST: u32 = 28;
pub const ST_EXPLODE_RESIST: u32 = 29;
pub const ST_RADIATION_RESISTANCE: u32 = 30;
pub const ST_POISON_RESISTANCE: u32 = 31;
pub const ST_STRENGTH_EXT: u32 = 32;
pub const ST_PERCEPTION_EXT: u32 = 33;
pub const ST_ENDURANCE_EXT: u32 = 34;
pub const ST_CHARISMA_EXT: u32 = 35;
pub const ST_INTELLECT_EXT: u32 = 36;
pub const ST_AGILITY_EXT: u32 = 37;
pub const ST_LUCK_EXT: u32 = 38;
pub const ST_MAX_LIFE_EXT: u32 = 39;
pub const ST_ACTION_POINTS_EXT: u32 = 40;
pub const ST_ARMOR_CLASS_EXT: u32 = 41;
pub const ST_MELEE_DAMAGE_EXT: u32 = 42;
pub const ST_CARRY_WEIGHT_EXT: u32 = 43;
pub const ST_SEQUENCE_EXT: u32 = 44;
pub const ST_HEALING_RATE_EXT: u32 = 45;
pub const ST_CRITICAL_CHANCE_EXT: u32 = 46;
pub const ST_MAX_CRITICAL_EXT: u32 = 47;
pub const ST_NORMAL_ABSORB_EXT: u32 = 48;
pub const ST_LASER_ABSORB_EXT: u32 = 49;
pub const ST_FIRE_ABSORB_EXT: u32 = 50;
pub const ST_PLASMA_ABSORB_EXT: u32 = 51;
pub const ST_ELECTRO_ABSORB_EXT: u32 = 52;
pub const ST_EMP_ABSORB_EXT: u32 = 53;
pub const ST_EXPLODE_ABSORB_EXT: u32 = 54;
pub const ST_NORMAL_RESIST_EXT: u32 = 55;
pub const ST_LASER_RESIST_EXT: u32 = 56;
pub const ST_FIRE_RESIST_EXT: u32 = 57;
pub const ST_PLASMA_RESIST_EXT: u32 = 58;
pub const ST_ELECTRO_RESIST_EXT: u32 = 59;
pub const ST_EMP_RESIST_EXT: u32 = 60;
pub const ST_EXPLODE_RESIST_EXT: u32 = 61;
pub const ST_RADIATION_RESISTANCE_EXT: u32 = 62;
pub const ST_POISON_RESISTANCE_EXT: u32 = 63;
pub const ST_TOXIC: u32 = 64;
pub const ST_RADIOACTIVE: u32 = 65;
pub const ST_KILL_EXPERIENCE: u32 = 66;
pub const ST_BODY_TYPE: u32 = 67;
pub const ST_LOCOMOTION_TYPE: u32 = 68;
pub const ST_DAMAGE_TYPE: u32 = 69;
pub const ST_AGE: u32 = 70;
pub const ST_GENDER: u32 = 71;
pub const ST_CURRENT_HP: u32 = 72;
pub const ST_POISONING_LEVEL: u32 = 73;
pub const ST_RADIATION_LEVEL: u32 = 74;
pub const ST_CURRENT_AP: u32 = 75;
pub const ST_EXPERIENCE: u32 = 76;
pub const ST_LEVEL: u32 = 77;
pub const ST_UNSPENT_SKILL_POINTS: u32 = 78;
pub const ST_UNSPENT_PERKS: u32 = 79;
pub const ST_KARMA: u32 = 80;
pub const ST_FOLLOW_CRIT: u32 = 81;
pub const ST_REPLICATION_MONEY: u32 = 82;
pub const ST_REPLICATION_COUNT: u32 = 83;
pub const ST_REPLICATION_TIME: u32 = 84;
pub const ST_REPLICATION_COST: u32 = 85;
pub const ST_TURN_BASED_AC: u32 = 86;
pub const ST_MAX_MOVE_AP: u32 = 87;
pub const ST_MOVE_AP: u32 = 88;
pub const ST_NPC_ROLE: u32 = 89;
pub const ST_VAR0: u32 = 90;
pub const ST_VAR1: u32 = 91;
pub const ST_VAR2: u32 = 92;
pub const ST_VAR3: u32 = 93;
pub const ST_VAR4: u32 = 94;
pub const ST_VAR5: u32 = 95;
pub const ST_VAR6: u32 = 96;
pub const ST_VAR7: u32 = 97;
pub const ST_VAR8: u32 = 98;
pub const ST_VAR9: u32 = 99;
pub const ST_PLAYER_KARMA: u32 = 100;
pub const ST_BONUS_LOOK: u32 = 101;
pub const ST_HANDS_ITEM_AND_MODE: u32 = 102;
pub const ST_FREE_BARTER_PLAYER: u32 = 103;
pub const ST_DIALOG_ID: u32 = 104;
pub const ST_AI_ID: u32 = 105;
pub const ST_TEAM_ID: u32 = 106;
pub const ST_BAG_ID: u32 = 107;
pub const ST_LAST_STEAL_CR_ID: u32 = 108;
pub const ST_STEAL_COUNT: u32 = 109;
pub const ST_LAST_WEAPON_ID: u32 = 110;
pub const ST_LAST_WEAPON_USE: u32 = 111;
pub const ST_BASE_CRTYPE: u32 = 112;
pub const ST_DEAD_BLOCKER_ID: u32 = 113;
pub const ST_CURRENT_ARMOR_PERK: u32 = 114;
pub const ST_TALK_DISTANCE: u32 = 115;
pub const ST_SCALE_FACTOR: u32 = 116;
pub const ST_WALK_TIME: u32 = 117;
pub const ST_RUN_TIME: u32 = 118;
pub const ST_MAX_TALKERS: u32 = 119;
pub const ST_SPEED_MOD: u32 = 120;
pub const ST_ARCADE_DEAD: u32 = 121;
pub const ST_LOCALMAP_DIR: u32 = 122;
pub const ST_LOCALMAP_PID: u32 = 123;
pub const ST_EXPERIENCE_MULTIPLIER: u32 = 124;
pub const ST_EXPERIENCE_MULTIPLIER_TIME: u32 = 125;
pub const ST_DYSPNEA: u32 = 126;
pub const ST_THRIST: u32 = 127;
pub const ST_HUNGER: u32 = 128;
pub const ST_WAYPOINT_GROUP: u32 = 129;
pub const ST_LAST_CONT_ID: u32 = 130;
pub const ST_LAST_DOOR_ID: u32 = 131;
pub const ST_LAST_CRIT_ID: u32 = 132;
pub const ST_OBJECT_TYPE: u32 = 133;
pub const ST_ITEM_HEXX: u32 = 134;
pub const ST_ITEM_HEXY: u32 = 135;
pub const ST_ITEM_PID: u32 = 136;
pub const ST_ACCESS_LEVEL: u32 = 137;
pub const ST_STUDY_EXP: u32 = 138;
pub const ST_STUDY_EXP_MAX: u32 = 139;
pub const ST_LTP_TYPE_DIR_HEX: u32 = 140;
pub const ST_LTP_MAP: u32 = 141;
pub const ST_LTP_TIME: u32 = 142;
pub const ST_LTP_PARAM0: u32 = 143;
pub const ST_LTP_PARAM1: u32 = 144;
pub const ST_LTP_PARAM2: u32 = 145;
pub const ST_CRSTATUS: u32 = 146;
pub const ST_BLOOD_TOXIC: u32 = 147;
pub const ST_OVERDOSE: u32 = 148;
pub const ST_BLEED: u32 = 149;
pub const ST_ORG_DMG: u32 = 150;
pub const ST_ANIM3D_LAYERS: u32 = 150;
pub const ST_PARALYSIS_LEVEL: u32 = 180;
pub const ST_WARNINGS: u32 = 181;
pub const HANDCUFFS: u32 = 182;
pub const ST_MUTATION: u32 = 183;
pub const ST_ARCADE_DANGER: u32 = 184;
pub const LAST_ATTACKED: u32 = 185;
pub const ST_BLOCK: u32 = 186;
pub const ST_DESEASE: u32 = 187;
pub const ST_KILLER_PERSON: u32 = 188;
pub const ST_QMAP: u32 = 189;
pub const ST_STAMINA: u32 = 190;
pub const ST_APREGEN: u32 = 192;
pub const SK_SMALL_GUNS: u32 = 200;
pub const SK_BIG_GUNS: u32 = 201;
pub const SK_ENERGY_WEAPONS: u32 = 202;
pub const SK_UNARMED: u32 = 203;
pub const SK_MELEE_WEAPONS: u32 = 204;
pub const SK_THROWING: u32 = 205;
pub const SK_FIRST_AID: u32 = 206;
pub const SK_DOCTOR: u32 = 207;
pub const SK_SNEAK: u32 = 208;
pub const SK_LOCKPICK: u32 = 209;
pub const SK_STEAL: u32 = 210;
pub const SK_TRAPS: u32 = 211;
pub const SK_SCIENCE: u32 = 212;
pub const SK_REPAIR: u32 = 213;
pub const SK_SPEECH: u32 = 214;
pub const SK_BARTER: u32 = 215;
pub const SK_GAMBLING: u32 = 216;
pub const SK_OUTDOORSMAN: u32 = 217;
pub const TAG_SKILL1: u32 = 226;
pub const TAG_SKILL2: u32 = 227;
pub const TAG_SKILL3: u32 = 228;
pub const TAG_SKILL4: u32 = 229;
pub const TO_SK_FIRST_AID: u32 = 230;
pub const TO_SK_DOCTOR: u32 = 231;
pub const TO_SK_REPAIR: u32 = 232;
pub const TO_SK_SCIENCE: u32 = 233;
pub const TO_SK_LOCKPICK: u32 = 234;
pub const TO_SK_STEAL: u32 = 235;
pub const TO_SK_OUTDOORSMAN: u32 = 236;
pub const TO_DEATH: u32 = 237;
pub const TO_BATTLE: u32 = 238;
pub const TO_TRANSFER: u32 = 239;
pub const TO_REMOVE_FROM_GAME: u32 = 240;
pub const TO_REPLICATION: u32 = 241;
pub const TO_TIREDNESS: u32 = 242;
pub const TO_SNEAK: u32 = 243;
pub const TO_HEALING: u32 = 244;
pub const TO_STEALING: u32 = 248;
pub const TO_AGGRESSOR: u32 = 249;
pub const TO_HAIR_GROW: u32 = 250;
pub const TO_SAY: u32 = 251;
pub const TO_DEAD: u32 = 252;
pub const PE_BOOKWORM: u32 = 300;
pub const PE_AWARENESS: u32 = 301;
pub const PE_BONUS_HTH_ATTACKS: u32 = 302;
pub const PE_BONUS_HTH_DAMAGE: u32 = 303;
pub const PE_BONUS_MOVE: u32 = 304;
pub const PE_BONUS_RANGED_DAMAGE: u32 = 305;
pub const PE_BONUS_RATE_OF_FIRE: u32 = 306;
pub const PE_EARLIER_SEQUENCE: u32 = 307;
pub const PE_FASTER_HEALING: u32 = 308;
pub const PE_MORE_CRITICALS: u32 = 309;
pub const PE_NIGHT_VISION: u32 = 310;
pub const PE_PRESENCE: u32 = 311;
pub const PE_RAD_RESISTANCE: u32 = 312;
pub const PE_TOUGHNESS: u32 = 313;
pub const PE_STRONG_BACK: u32 = 314;
pub const PE_SHARPSHOOTER: u32 = 315;
pub const PE_SILENT_RUNNING: u32 = 316;
pub const PE_SURVIVALIST: u32 = 317;
pub const PE_MASTER_TRADER: u32 = 318;
pub const PE_EDUCATED: u32 = 319;
pub const PE_HEALER: u32 = 320;
pub const PE_FORTUNE_FINDER: u32 = 321;
pub const PE_BETTER_CRITICALS: u32 = 322;
pub const PE_EMPATHY: u32 = 323;
pub const PE_SLAYER: u32 = 324;
pub const PE_SNIPER: u32 = 325;
pub const PE_SILENT_DEATH: u32 = 326;
pub const PE_ACTION_BOY: u32 = 327;
pub const PE_MENTAL_BLOCK: u32 = 328;
pub const PE_LIFEGIVER: u32 = 329;
pub const PE_DODGER: u32 = 330;
pub const PE_SNAKEATER: u32 = 331;
pub const PE_MR_FIXIT: u32 = 332;
pub const PE_MEDIC: u32 = 333;
pub const PE_MASTER_THIEF: u32 = 334;
pub const PE_SPEAKER: u32 = 335;
pub const PE_HEAVE_HO: u32 = 336;
pub const PE_FRIENDLY_FOE: u32 = 337;
pub const PE_PICKPOCKET: u32 = 338;
pub const PE_GHOST: u32 = 339;
pub const PE_CULT_OF_PERSONALITY: u32 = 340;
pub const PE_SCROUNGER: u32 = 341;
pub const PE_EXPLORER: u32 = 342;
pub const PE_FLOWER_CHILD: u32 = 343;
pub const PE_PATHFINDER: u32 = 344;
pub const PE_ANIMAL_FRIEND: u32 = 345;
pub const PE_SCOUT: u32 = 346;
pub const PE_MYSTERIOUS_STRANGER: u32 = 347;
pub const PE_RANGER: u32 = 348;
pub const PE_QUICK_POCKETS: u32 = 349;
pub const PE_SMOOTH_TALKER: u32 = 350;
pub const PE_SWIFT_LEARNER: u32 = 351;
pub const PE_TAG: u32 = 352;
pub const PE_MUTATE: u32 = 353;
pub const PE_ADRENALINE_RUSH: u32 = 380;
pub const PE_CAUTIOUS_NATURE: u32 = 381;
pub const PE_COMPREHENSION: u32 = 382;
pub const PE_DEMOLITION_EXPERT: u32 = 383;
pub const PE_GAMBLER: u32 = 384;
pub const PE_GAIN_STRENGTH: u32 = 385;
pub const PE_GAIN_PERCEPTION: u32 = 386;
pub const PE_GAIN_ENDURANCE: u32 = 387;
pub const PE_GAIN_CHARISMA: u32 = 388;
pub const PE_GAIN_INTELLIGENCE: u32 = 389;
pub const PE_GAIN_AGILITY: u32 = 390;
pub const PE_GAIN_LUCK: u32 = 391;
pub const PE_HARMLESS: u32 = 392;
pub const PE_HERE_AND_NOW: u32 = 393;
pub const PE_HTH_EVADE: u32 = 394;
pub const PE_KAMA_SUTRA_MASTER: u32 = 395;
pub const PE_KARMA_BEACON: u32 = 396;
pub const PE_LIGHT_STEP: u32 = 397;
pub const PE_LIVING_ANATOMY: u32 = 398;
pub const PE_MAGNETIC_PERSONALITY: u32 = 399;
pub const PE_NEGOTIATOR: u32 = 400;
pub const PE_PACK_RAT: u32 = 401;
pub const PE_PYROMANIAC: u32 = 402;
pub const PE_QUICK_RECOVERY: u32 = 403;
pub const PE_SALESMAN: u32 = 404;
pub const PE_STONEWALL: u32 = 405;
pub const PE_THIEF: u32 = 406;
pub const PE_WEAPON_HANDLING: u32 = 407;
pub const PE_VAULT_CITY_TRAINING: u32 = 408;
pub const PE_ALCOHOL_RAISED_HP: u32 = 409;
pub const PE_ALCOHOL_RAISED_HP_II: u32 = 410;
pub const PE_ALCOHOL_LOWERED_HP: u32 = 411;
pub const PE_ALCOHOL_LOWERED_HP_II: u32 = 412;
pub const PE_AUTODOC_RAISED_HP: u32 = 413;
pub const PE_AUTODOC_RAISED_HP_II: u32 = 414;
pub const PE_AUTODOC_LOWERED_HP: u32 = 415;
pub const PE_AUTODOC_LOWERED_HP_II: u32 = 416;
pub const PE_EXPERT_EXCREMENT: u32 = 417;
pub const PE_JINXED_II: u32 = 419;
pub const PE_TERMINATOR: u32 = 420;
pub const PE_GECKO_SKINNING: u32 = 430;
pub const PE_VAULT_CITY_INOCULATIONS: u32 = 431;
pub const PE_DERMAL_IMPACT: u32 = 432;
pub const PE_DERMAL_IMPACT_ENH: u32 = 433;
pub const PE_PHOENIX_IMPLANTS: u32 = 434;
pub const PE_PHOENIX_IMPLANTS_ENH: u32 = 435;
pub const PE_NCR_PERCEPTION: u32 = 436;
pub const PE_NCR_ENDURANCE: u32 = 437;
pub const PE_NCR_BARTER: u32 = 438;
pub const PE_NCR_REPAIR: u32 = 439;
pub const PE_COWBOY: u32 = 440;
pub const PE_FORT_LID_1: u32 = 442;
pub const PE_FORT_LID_2: u32 = 443;
pub const PE_FORT_LID_3: u32 = 444;
pub const PE_ZLO_LID_1: u32 = 445;
pub const PE_ZLO_LID_2: u32 = 446;
pub const PE_ZLO_LID_3: u32 = 447;
pub const PE_GM_CLON: u32 = 448;
pub const ADDICTION_NUKA_COLA: u32 = 470;
pub const ADDICTION_BUFFOUT: u32 = 471;
pub const ADDICTION_MENTATS: u32 = 472;
pub const ADDICTION_PSYCHO: u32 = 473;
pub const ADDICTION_RADAWAY: u32 = 474;
pub const ADDICTION_JET: u32 = 475;
pub const ADDICTION_TRAGIC: u32 = 476;
pub const KARMA_BERSERKER: u32 = 480;
pub const KARMA_CHAMPION: u32 = 481;
pub const KARMA_CHILDKILLER: u32 = 482;
pub const KARMA_SEXPERT: u32 = 483;
pub const KARMA_PRIZEFIGHTER: u32 = 484;
pub const KARMA_GIGOLO: u32 = 485;
pub const KARMA_GRAVE_DIGGER: u32 = 486;
pub const KARMA_MARRIED: u32 = 487;
pub const KARMA_PORN_STAR: u32 = 488;
pub const KARMA_SLAVER: u32 = 489;
pub const KARMA_VIRGIN_WASTES: u32 = 490;
pub const KARMA_MAN_SALVATORE: u32 = 491;
pub const KARMA_MAN_BISHOP: u32 = 492;
pub const KARMA_MAN_MORDINO: u32 = 493;
pub const KARMA_MAN_WRIGHT: u32 = 494;
pub const KARMA_SEPARATED: u32 = 495;
pub const KARMA_PEDOBEAR: u32 = 496;
pub const KARMA_VC_GUARDSMAN: u32 = 497;
pub const DAMAGE_POISONED: u32 = 500;
pub const DAMAGE_RADIATED: u32 = 501;
pub const DAMAGE_EYE: u32 = 502;
pub const DAMAGE_RIGHT_ARM: u32 = 503;
pub const DAMAGE_LEFT_ARM: u32 = 504;
pub const DAMAGE_RIGHT_LEG: u32 = 505;
pub const DAMAGE_LEFT_LEG: u32 = 506;
pub const MODE_BEGIN: u32 = 510;
pub const MODE_END: u32 = 549;
pub const MODE_COUNT: u32 = 40;
pub const MODE_HIDE: u32 = 510;
pub const MODE_NO_STEAL: u32 = 511;
pub const MODE_NO_BARTER: u32 = 512;
pub const MODE_NO_ENEMY_STACK: u32 = 513;
pub const MODE_NO_PVP: u32 = 514;
pub const MODE_END_COMBAT: u32 = 515;
pub const MODE_DEFAULT_COMBAT: u32 = 516;
pub const MODE_NO_HOME: u32 = 517;
pub const MODE_GECK: u32 = 518;
pub const MODE_NO_FAVORITE_ITEM: u32 = 519;
pub const MODE_NO_ITEM_GARBAGER: u32 = 520;
pub const MODE_DLG_SCRIPT_BARTER: u32 = 521;
pub const MODE_UNLIMITED_AMMO: u32 = 522;
pub const MODE_NO_DROP: u32 = 523;
pub const MODE_NO_LOOSE_LIMBS: u32 = 524;
pub const MODE_DEAD_AGES: u32 = 525;
pub const MODE_NO_HEAL: u32 = 526;
pub const MODE_INVULNERABLE: u32 = 527;
pub const MODE_NO_FLATTEN: u32 = 528;
pub const MODE_SPECIAL_DEAD: u32 = 529;
pub const MODE_RANGE_HTH: u32 = 530;
pub const MODE_NO_KNOCK: u32 = 531;
pub const MODE_NO_LOOT: u32 = 532;
pub const MODE_NO_SUPPLY: u32 = 533;
pub const MODE_NO_KARMA_ON_KILL: u32 = 534;
pub const MODE_BARTER_ONLY_CASH: u32 = 535;
pub const MODE_NO_PUSH: u32 = 536;
pub const MODE_NO_UNARMED: u32 = 537;
pub const MODE_NO_AIM: u32 = 538;
pub const MODE_NO_WALK: u32 = 539;
pub const MODE_NO_RUN: u32 = 540;
pub const MODE_NO_TALK: u32 = 541;
pub const TRAIT_FAST_METABOLISM: u32 = 550;
pub const TRAIT_BRUISER: u32 = 551;
pub const TRAIT_SMALL_FRAME: u32 = 552;
pub const TRAIT_ONE_HANDER: u32 = 553;
pub const TRAIT_FINESSE: u32 = 554;
pub const TRAIT_KAMIKAZE: u32 = 555;
pub const TRAIT_HEAVY_HANDED: u32 = 556;
pub const TRAIT_FAST_SHOT: u32 = 557;
pub const TRAIT_BLOODY_MESS: u32 = 558;
pub const TRAIT_JINXED: u32 = 559;
pub const TRAIT_GOOD_NATURED: u32 = 560;
pub const TRAIT_CHEM_RELIANT: u32 = 561;
pub const TRAIT_CHEM_RESISTANT: u32 = 562;
pub const TRAIT_SEX_APPEAL: u32 = 563;
pub const TRAIT_SKILLED: u32 = 564;
pub const TRAIT_NIGHT_PERSON: u32 = 565;
pub const REPUTATION_DEN: u32 = 570;
pub const REPUTATION_KLAMATH: u32 = 571;
pub const REPUTATION_MODOC: u32 = 572;
pub const REPUTATION_VAULT_CITY: u32 = 573;
pub const REPUTATION_GECKO: u32 = 574;
pub const REPUTATION_BROKEN_HILLS: u32 = 575;
pub const REPUTATION_NEW_RENO: u32 = 576;
pub const REPUTATION_SIERRA: u32 = 577;
pub const REPUTATION_VAULT15: u32 = 578;
pub const REPUTATION_NCR: u32 = 579;
pub const REPUTATION_CATHEDRAL: u32 = 580;
pub const REPUTATION_SAD: u32 = 581;
pub const REPUTATION_REDDING: u32 = 582;
pub const REPUTATION_SF: u32 = 583;
pub const REPUTATION_NAVARRO: u32 = 584;
pub const REPUTATION_ARROYO: u32 = 585;
pub const REPUTATION_PRIMAL_TRIBE: u32 = 586;
pub const REPUTATION_RANGERS: u32 = 587;
pub const REPUTATION_VAULT13: u32 = 588;
pub const REPUTATION_SACRAMENTO: u32 = 589;
pub const QST_MEDIUM: u32 = 700;
pub const QST_INVIS: u32 = 701;
pub const QST_VISION: u32 = 702;
pub const QST_GAMEMODE: u32 = 703;
pub const ST_CELL_X: u32 = 704;
pub const ST_CELL_Y: u32 = 705;
pub const CR_HEXX: u32 = 706;
pub const CR_HEXY: u32 = 707;
pub const CR_VAL0: u32 = 708;
pub const CR_VAL1: u32 = 709;
pub const CR_VAL2: u32 = 710;
pub const CR_VAL3: u32 = 711;
pub const CR_VAL4: u32 = 712;
pub const CR_VAL5: u32 = 713;
pub const CR_VAL6: u32 = 714;
pub const CR_VAL7: u32 = 715;
pub const CR_VAL8: u32 = 716;
pub const CR_VAL9: u32 = 717;
pub const CR_ROULETTE_START_MONEY: u32 = 718;
pub const BP_ROBOT_SELF_REPAIR: u32 = 720;
pub const BP_BLOOD_LOSS: u32 = 721;
pub const CR_STRENGTH: u32 = 722;
pub const CR_PERCEPTION: u32 = 723;
pub const CR_AGILITY: u32 = 724;
pub const CR_ENDURANCE: u32 = 725;
pub const CR_IS_AGGRESSIVE: u32 = 726;
pub const CR_SLEEPING_STATE: u32 = 727;
pub const CR_SINF_MODE: u32 = 728;
pub const CR_LAST_ROTTEN_CYCLE: u32 = 729;
pub const CR_FIXED_SPEED: u32 = 730;
pub const CR_IS_WINDUPED: u32 = 731;
pub const CR_AUTO_AIM: u32 = 732;
pub const P_CRITTER_ID: u32 = 760;
pub const P_BODYSWAPPED: u32 = 761;
pub const GAME_INVALID: i32 = -1;
pub const GAME_START: u32 = 0;
pub const GAME_ADVENTURE: u32 = 1;
pub const GAME_SURVIVAL: u32 = 2;
pub const GAME_ARCADE: u32 = 3;
pub const GAME_TEST: u32 = 4;
pub const GAME_MAX: u32 = 5;
pub const MERC_BEGIN: u32 = 800;
pub const MERC_END: u32 = 810;
pub const MERC_COUNT: u32 = 11;
pub const MERC_MASTER_ID: u32 = 800;
pub const MERC_ALWAYS_RUN: u32 = 801;
pub const MERC_CANCEL_ON_ATTACK: u32 = 802;
pub const MERC_LOSE_DIST: u32 = 803;
pub const MERC_MASTER_DIST: u32 = 804;
pub const MERC_TYPE: u32 = 805;
pub const MERC_DEFEND_MASTER: u32 = 806;
pub const MERC_ASSIST_MASTER: u32 = 807;
pub const MERC_CANCEL_TIME: u32 = 808;
pub const MERC_CANCEL_ON_GLOBAL: u32 = 809;
pub const MERC_WAIT_FOR_MASTER: u32 = 810;
pub const PARAMS_COUNT: u32 = 1000;
pub const AI_PLANE_MISC: u32 = 0;
pub const AI_PLANE_ATTACK: u32 = 1;
pub const AI_PLANE_WALK: u32 = 2;
pub const AI_PLANE_PICK: u32 = 3;
pub const AI_PLANE_PATROL: u32 = 4;
pub const AI_PLANE_COURIER: u32 = 5;
pub const AI_PLANE_MISC_PRIORITY: u32 = 10;
pub const AI_PLANE_ATTACK_PRIORITY: u32 = 50;
pub const AI_PLANE_WALK_PRIORITY: u32 = 20;
pub const AI_PLANE_PICK_PRIORITY: u32 = 35;
pub const AI_PLANE_PATROL_PRIORITY: u32 = 25;
pub const AI_PLANE_COURIER_PRIORITY: u32 = 30;
pub const REASON_GO_HOME: u32 = 10;
pub const REASON_FOUND_IN_ENEMY_STACK: u32 = 11;
pub const REASON_FROM_DIALOG: u32 = 12;
pub const REASON_FROM_SCRIPT: u32 = 13;
pub const REASON_RUN_AWAY: u32 = 14;
pub const REASON_SUCCESS: u32 = 30;
pub const REASON_HEX_TOO_FAR: u32 = 31;
pub const REASON_HEX_BUSY: u32 = 32;
pub const REASON_HEX_BUSY_RING: u32 = 33;
pub const REASON_DEADLOCK: u32 = 34;
pub const REASON_TRACE_FAIL: u32 = 35;
pub const REASON_POSITION_NOT_FOUND: u32 = 36;
pub const REASON_FIND_PATH_ERROR: u32 = 37;
pub const REASON_CANT_WALK: u32 = 38;
pub const REASON_TARGET_DISAPPEARED: u32 = 39;
pub const REASON_USE_ITEM_NOT_FOUND: u32 = 40;
pub const REASON_GAG_CRITTER: u32 = 41;
pub const REASON_GAG_ITEM: u32 = 42;
pub const REASON_NO_UNARMED: u32 = 43;
pub const REASON_ATTACK_TARGET: u32 = 50;
pub const REASON_ATTACK_WEAPON: u32 = 51;
pub const REASON_ATTACK_DISTANTION: u32 = 52;
pub const REASON_ATTACK_USE_AIM: u32 = 53;
pub const LOCKER_ISOPEN: u32 = 1;
pub const LOCKER_LOCKED: u32 = 2;
pub const LOCKER_JAMMED: u32 = 4;
pub const LOCKER_BROKEN: u32 = 8;
pub const LOCKER_NOOPEN: u32 = 16;
pub const LOCKER_ELECTRO: u32 = 32;
pub const TIMER_MIN_VALUE: u32 = 1;
pub const TIMER_MAX_VALUE: u32 = 599;
pub const TRANSFER_CLOSE: u32 = 0;
pub const TRANSFER_HEX_CONT_UP: u32 = 1;
pub const TRANSFER_HEX_CONT_DOWN: u32 = 2;
pub const TRANSFER_SELF_CONT: u32 = 3;
pub const TRANSFER_CRIT_LOOT: u32 = 4;
pub const TRANSFER_CRIT_STEAL: u32 = 5;
pub const TRANSFER_CRIT_BARTER: u32 = 6;
pub const TRANSFER_FAR_CONT: u32 = 7;
pub const TRANSFER_FAR_CRIT: u32 = 8;
pub const SCORE_EVIL_OF_HOUR: u32 = 0;
pub const SCORE_HERO_OF_HOUR: u32 = 1;
pub const SCORE_KARMA_ON_HOUR: u32 = 2;
pub const SCORE_SPEAKER: u32 = 3;
pub const SCORE_TRADER: u32 = 4;
pub const SCORE_ZOMBY: u32 = 5;
pub const SCORE_PATY: u32 = 6;
pub const SCORE_MANIAC: u32 = 7;
pub const SCORE_SCAUT: u32 = 8;
pub const SCORE_DOCTOR: u32 = 9;
pub const SCORE_SHOOTER: u32 = 10;
pub const SCORE_MELEE: u32 = 11;
pub const SCORE_UNARMED: u32 = 12;
pub const SCORE_THIEF: u32 = 13;
pub const SCORE_DRIVER: u32 = 14;
pub const SCORE_KILLER: u32 = 15;
pub const SCORE_SNIPER: u32 = 16;
pub const SCORE_ADVENTURER: u32 = 17;
pub const SCORE_CRACKER: u32 = 18;
pub const SCORE_UNARMED_DAMAGE: u32 = 19;
pub const SCORE_RITCH: u32 = 20;
pub const SCORE_CHOSEN_ONE: u32 = 21;
pub const SCORE_SIERRA_CUR: u32 = 40;
pub const SCORE_MARIPOSA_CUR: u32 = 41;
pub const SCORE_CATHEDRAL_CUR: u32 = 42;
pub const SCORE_SIERRA_BEST: u32 = 43;
pub const SCORE_MARIPOSA_BEST: u32 = 44;
pub const SCORE_CATHEDRAL_BEST: u32 = 45;
pub const SCORE_SIERRA_ORG: u32 = 46;
pub const SCORE_MARIPOSA_ORG: u32 = 47;
pub const SCORE_CATHEDRAL_ORG: u32 = 48;
pub const SCORE_BASE_BEST_ORG: u32 = 49;
pub const SCORES_MAX: u32 = 50;
pub const CAR_BIO_ENGINE: u32 = 1;
pub const CAR_NO_LOCKPICK: u32 = 2;
pub const BT_MEN: u32 = 0;
pub const BT_WOMEN: u32 = 1;
pub const BT_CHILDREN: u32 = 2;
pub const BT_SUPER_MUTANT: u32 = 3;
pub const BT_GHOUL: u32 = 4;
pub const BT_BRAHMIN: u32 = 5;
pub const BT_RADSCORPION: u32 = 6;
pub const BT_RAT: u32 = 7;
pub const BT_FLOATER: u32 = 8;
pub const BT_CENTAUR: u32 = 9;
pub const BT_ROBOT: u32 = 10;
pub const BT_DOG: u32 = 11;
pub const BT_MANTI: u32 = 12;
pub const BT_DEADCLAW: u32 = 13;
pub const BT_PLANT: u32 = 14;
pub const BT_GECKO: u32 = 15;
pub const BT_ALIEN: u32 = 16;
pub const BT_GIANT_ANT: u32 = 17;
pub const BT_BIG_BAD_BOSS: u32 = 18;
pub const BT_GIANT_BEETLE: u32 = 19;
pub const BT_GIANT_WASP: u32 = 20;
pub const BT_ZOMBIE: u32 = 29;
pub const MAX_BODY_TYPES: u32 = 30;
pub const LOCOMOTION_BIPED: u32 = 0;
pub const LOCOMOTION_QUADRUPED: u32 = 1;
pub const LOCOMOTION_ROBOTIC: u32 = 2;
pub const LOCOMOTION_FLY: u32 = 3;
pub const FLUSH_SCREEN_DEFAULT: u32 = 1000;
pub const MAX_DETERIORATION: u32 = 10000;
pub const MAX_BROKENS: u32 = 10;
pub const BI_LOWBROKEN: u32 = 1;
pub const BI_NORMBROKEN: u32 = 2;
pub const BI_HIGHBROKEN: u32 = 4;
pub const BI_NOTRESC: u32 = 8;
pub const BI_BROKEN: u32 = 15;
pub const BI_SERVICE: u32 = 16;
pub const BI_SERVICE_EXT: u32 = 32;
pub const BI_ETERNAL: u32 = 64;
pub const COMBAT_MODE_ANY: u32 = 0;
pub const COMBAT_MODE_REAL_TIME: u32 = 1;
pub const COMBAT_MODE_TURN_BASED: u32 = 2;
pub const SCREEN_CLOSE: u32 = 0;
pub const SCREEN_TIMER: u32 = 1;
pub const SCREEN_DIALOGBOX: u32 = 2;
pub const SCREEN_SKILLBOX: u32 = 3;
pub const SCREEN_BAG: u32 = 4;
pub const SCREEN_SAY: u32 = 5;
pub const SCREEN_ELEVATOR: u32 = 6;
pub const SCREEN_INVENTORY: u32 = 7;
pub const SCREEN_CHARACTER: u32 = 8;
pub const SCREEN_FIXBOY: u32 = 9;
pub const SCREEN_PIPBOY: u32 = 10;
pub const SCREEN_MINIMAP: u32 = 11;
pub const ARRAY_SCREEN_INDEX: u32 = 0;
pub const ARRAY_ACTION_INDEX: u32 = 1;
pub const ARRAY_ID_INDEX: u32 = 2;
pub const ARRAY_OBJ_INDEX: u32 = 3;
pub const ARRAY_PICK_TYPE: u32 = 4;
pub const ARRAY_ITEM_HEXX: u32 = 5;
pub const ARRAY_ITEM_HEXY: u32 = 6;
pub const ARRAY_ITEM_PID: u32 = 7;
pub const ARRAY_SKILL_INDEX: u32 = 8;
pub const OBJECT_CRITTER: u32 = 2;
pub const OBJECT_ITEM: u32 = 3;
pub const OBJECT_SCENERY: u32 = 4;
pub const EXIT_GRID_PID: u32 = 4053;
pub const EXIT_GRID_DISTATION: u32 = 3;
pub const FOG_FULL: u32 = 0;
pub const FOG_HALF: u32 = 1;
pub const FOG_HALF_EX: u32 = 2;
pub const FOG_NONE: u32 = 3;
pub const CRITTER_PLAYER: u32 = 65536;
pub const CRITTER_NPC: u32 = 131072;
pub const CRITTER_DISCONNECT: u32 = 524288;
pub const CRITTER_CHOSEN: u32 = 1048576;
pub const CRITTER_RULEGROUP: u32 = 2097152;
pub const HIT_LOCATION_NONE: u32 = 0;
pub const HIT_LOCATION_HEAD: u32 = 1;
pub const HIT_LOCATION_LEFT_ARM: u32 = 2;
pub const HIT_LOCATION_RIGHT_ARM: u32 = 3;
pub const HIT_LOCATION_TORSO: u32 = 4;
pub const HIT_LOCATION_RIGHT_LEG: u32 = 5;
pub const HIT_LOCATION_LEFT_LEG: u32 = 6;
pub const HIT_LOCATION_EYES: u32 = 7;
pub const HIT_LOCATION_GROIN: u32 = 8;
pub const HIT_LOCATION_UNCALLED: u32 = 9;
pub const SOUND_WEAPON: u8 = 87u8;
pub const SOUND_WEAPON_USE: u8 = 65u8;
pub const SOUND_WEAPON_FLY: u8 = 70u8;
pub const SOUND_WEAPON_MISS: u8 = 72u8;
pub const SOUND_WEAPON_EMPTY: u8 = 79u8;
pub const SOUND_WEAPON_RELOAD: u8 = 82u8;
pub const SOUND_DOOR: u8 = 83u8;
pub const SOUND_DOOR_OPEN: u8 = 79u8;
pub const SOUND_DOOR_LOCK: u8 = 76u8;
pub const SOUND_DOOR_CLOSE: u8 = 67u8;
pub const SOUND_DOOR_NOT_OPEN: u8 = 78u8;
pub const FIND_LIFE: u32 = 1;
pub const FIND_KO: u32 = 2;
pub const FIND_DEAD: u32 = 4;
pub const FIND_LIFE_AND_KO: u32 = 3;
pub const FIND_LIFE_AND_DEAD: u32 = 5;
pub const FIND_KO_AND_DEAD: u32 = 6;
pub const FIND_ALL: u32 = 15;
pub const FIND_ONLY_PLAYERS: u32 = 16;
pub const FIND_ONLY_NPC: u32 = 32;
pub const FIXBOY_LIST: u32 = 0;
pub const FIXBOY_BUTTON: u32 = 1;
pub const FIXBOY_CRAFT: u32 = 2;
pub const FIXBOY_ALLOW_CRAFT: u32 = 1;
pub const FIXBOY_CHECK_TIMEOUT: u32 = 2;
pub const FIXBOY_SET_TIMEOUT: u32 = 4;
pub const FIXBOY_CHECK_PARAMS: u32 = 8;
pub const FIXBOY_CHECK_MATERIALS: u32 = 16;
pub const FIXBOY_CHECK_TOOLS: u32 = 32;
pub const FIXBOY_SUB_MATERIALS: u32 = 64;
pub const FIXBOY_ADD_CRAFT_ITEMS: u32 = 128;
pub const FIXBOY_ADD_EXPERIENCE: u32 = 256;
pub const FIXBOY_SEND_SUCC_MESSAGE: u32 = 512;
pub const FIXBOY_SEND_FAIL_MESSAGE: u32 = 1024;
pub const FIXBOY_DEFAULT: u32 = 65535;
pub const ACCESS_CLIENT: u32 = 0;
pub const ACCESS_TESTER: u32 = 1;
pub const ACCESS_MODER: u32 = 2;
pub const ACCESS_ADMIN: u32 = 3;
pub const SKILL_PICK_ON_GROUND: i32 = -1;
pub const SKILL_PUT_CONT: i32 = -2;
pub const SKILL_TAKE_CONT: i32 = -3;
pub const SKILL_TAKE_ALL_CONT: i32 = -4;
pub const SKILL_LOOT_CRITTER: i32 = -5;
pub const SKILL_PUSH_CRITTER: i32 = -6;
pub const SKILL_TALK: i32 = -7;
pub const LOOK_CHECK_DIR: u32 = 1;
pub const LOOK_CHECK_SNEAK_DIR: u32 = 2;
pub const LOOK_CHECK_SNEAK_WEIGHT: u32 = 4;
pub const LOOK_CHECK_TRACE: u32 = 8;
pub const LOOK_CHECK_SCRIPT: u32 = 16;
pub const LOOK_CHECK_ITEM_SCRIPT: u32 = 32;
pub const CRTYPE_DEFAULT_M: u32 = 62;
pub const CRTYPE_DEFAULT_F: u32 = 61;
pub const CRTYPE_NONE: u32 = 0;
pub const CRTYPE_DW_JUMPSUIT_M: u32 = 11;
pub const CRTYPE_DW_JUMPSUIT_F: u32 = 4;
pub const CRTYPE_DW_LEATHER_JACKET_F: u32 = 6;
pub const CRTYPE_COMBAT_ARM_1: u32 = 10;
pub const CRTYPE_DW_LEATHER_ARMOR_M: u32 = 12;
pub const CRTYPE_DW_LEATHER_ARMOR_M_2: u32 = 136;
pub const CRTYPE_DW_LEATHER_JACKET_M: u32 = 13;
pub const CRTYPE_DW_METAL_ARMOR_M: u32 = 14;
pub const CRTYPE_DW_TRIBAL_F: u32 = 63;
pub const CRTYPE_DW_TRIBAL_M: u32 = 64;
pub const CRTYPE_DW_LEATHERBLUE_M: u32 = 124;
pub const CRTYPE_VAULT_M: u32 = 69;
pub const CRTYPE_VAULT_F: u32 = 74;
pub const CRTYPE_ROBOT: u32 = 66;
pub const CRTYPE_LHD_JUMPSUIT: u32 = 106;
pub const CRTYPE_LHD_LEATHER_ARMOR: u32 = 107;
pub const CRTYPE_LHD_LEATHER_JACKET: u32 = 108;
pub const CRTYPE_LHD_METAL_ARMOR: u32 = 109;
pub const CRTYPE_LHD_TRIBAL: u32 = 110;
pub const CRTYPE_LHD_LEATHER_ARMOR_MK2: u32 = 140;
pub const CRTYPE_LHD_LEATHERBLUE: u32 = 125;
pub const CRTYPE_BLD_JUMPSUIT: u32 = 116;
pub const CRTYPE_BLD_LEATHER_ARMOR: u32 = 117;
pub const CRTYPE_BLD_LEATHER_ARMOR_MK2: u32 = 139;
pub const CRTYPE_BLD_LEATHER_JACKET: u32 = 118;
pub const CRTYPE_BLD_METAL_ARMOR: u32 = 119;
pub const CRTYPE_BLD_TRIBAL: u32 = 120;
pub const CRTYPE_BLD_LEATHERBLUE: u32 = 126;
pub const AZMADON_JUMP: u32 = 100;
pub const AZMADON_SNEAK: u32 = 99;
pub const AZMADON_HALAT: u32 = 122;
pub const LEATHER_ARMOR_MK_III: u32 = 142;
pub const NIG_JUMPSUIT: u32 = 149;
pub const NIG_LEATHER_JACKET: u32 = 153;
pub const NIG_LEATHER_JACKET_MEH: u32 = 150;
pub const NIG_METAL_ARMOR: u32 = 155;
pub const NIG_METAL_ARMOR_NAG: u32 = 151;
pub const NIG_CA: u32 = 154;
pub const NIG_CA_NH: u32 = 152;
pub const SKIN_NAKED: u32 = 0;
pub const SKIN_JUMPSUIT: u32 = 1;
pub const SKIN_JACKET: u32 = 2;
pub const SKIN_LEATHER_ARMOR_MK1: u32 = 3;
pub const SKIN_LEATHER_ARMOR_MK2: u32 = 4;
pub const SKIN_LEATHER_ARMOR_BLUE: u32 = 5;
pub const SKIN_LEATHER_ARMOR_CAMMO: u32 = 6;
pub const SKIN_LEATHER_ARMOR_RED: u32 = 7;
pub const SKIN_METAL: u32 = 8;
pub const SKIN_TYPE_WOMAN: u32 = 0;
pub const SKIN_TYPE_PUNKESS: u32 = 1;
pub const SKIN_TYPE_MAN: u32 = 2;
pub const SKIN_TYPE_HAIRY: u32 = 3;
pub const SKIN_TYPE_BALD: u32 = 4;
pub const SKIN_TYPE_BLACK: u32 = 5;
pub const SKIN_TYPE_FAT: u32 = 6;
pub const CRTYPE_DW_LEATHER_ARMOR_MK1_F: u32 = 5;
pub const CRTYPE_DW_LEATHER_ARMOR_MK2_F: u32 = 165;
pub const CRTYPE_DW_LEATHER_ARMOR_BLUE_F: u32 = 123;
pub const CRTYPE_DW_LEATHER_ARMOR_CAMMO_F: u32 = 200;
pub const CRTYPE_DW_LEATHER_ARMOR_RED_F: u32 = 207;
pub const CRTYPE_DW_METAL_ARMOR_F: u32 = 7;
pub const CRTYPE_PUNKESS_TRIBAL: u32 = 151;
pub const CRTYPE_PUNKESS_JUMPSUIT: u32 = 152;
pub const CRTYPE_PUNKESS_LEATHER_JACKET: u32 = 34;
pub const CRTYPE_PUNKESS_LEATHER_ARMOR_MK1: u32 = 153;
pub const CRTYPE_PUNKESS_LEATHER_ARMOR_MK2: u32 = 153;
pub const CRTYPE_PUNKESS_LEATHER_ARMOR_BLUE: u32 = 195;
pub const CRTYPE_PUNKESS_LEATHER_ARMOR_CAMMO: u32 = 201;
pub const CRTYPE_PUNKESS_LEATHER_ARMOR_RED: u32 = 208;
pub const CRTYPE_PUNKESS_METAL_ARMOR: u32 = 154;
pub const CRTYPE_DW_LEATHER_ARMOR_MK1_M: u32 = 12;
pub const CRTYPE_DW_LEATHER_ARMOR_MK2_M: u32 = 166;
pub const CRTYPE_DW_LEATHER_ARMOR_BLUE_M: u32 = 124;
pub const CRTYPE_DW_LEATHER_ARMOR_CAMMO_M: u32 = 202;
pub const CRTYPE_DW_LEATHER_ARMOR_RED_M: u32 = 209;
pub const CRTYPE_LHD_LEATHER_ARMOR_MK1: u32 = 107;
pub const CRTYPE_LHD_LEATHER_ARMOR_BLUE: u32 = 125;
pub const CRTYPE_LHD_LEATHER_ARMOR_CAMMO: u32 = 204;
pub const CRTYPE_LHD_LEATHER_ARMOR_RED: u32 = 211;
pub const CRTYPE_BLD_LEATHER_ARMOR_MK1: u32 = 117;
pub const CRTYPE_BLD_LEATHER_ARMOR_BLUE: u32 = 126;
pub const CRTYPE_BLD_LEATHER_ARMOR_CAMMO: u32 = 203;
pub const CRTYPE_BLD_LEATHER_ARMOR_RED: u32 = 210;
pub const CRTYPE_BLACK_TRIBAL: u32 = 140;
pub const CRTYPE_BLACK_JUMPSUIT: u32 = 142;
pub const CRTYPE_BLACK_LEATHER_JACKET: u32 = 144;
pub const CRTYPE_BLACK_LEATHER_ARMOR_MK1: u32 = 146;
pub const CRTYPE_BLACK_LEATHER_ARMOR_MK2: u32 = 146;
pub const CRTYPE_BLACK_LEATHER_ARMOR_BLUE: u32 = 196;
pub const CRTYPE_BLACK_LEATHER_ARMOR_CAMMO: u32 = 206;
pub const CRTYPE_BLACK_LEATHER_ARMOR_RED: u32 = 213;
pub const CRTYPE_BLACK_METAL_ARMOR: u32 = 9;
pub const CRTYPE_FAT_TRIBAL: u32 = 91;
pub const CRTYPE_FAT_JUMPSUIT: u32 = 91;
pub const CRTYPE_FAT_LEATHER_JACKET: u32 = 160;
pub const CRTYPE_FAT_LEATHER_ARMOR_MK1: u32 = 161;
pub const CRTYPE_FAT_LEATHER_ARMOR_MK2: u32 = 161;
pub const CRTYPE_FAT_LEATHER_ARMOR_BLUE: u32 = 161;
pub const CRTYPE_FAT_LEATHER_ARMOR_CAMMO: u32 = 205;
pub const CRTYPE_FAT_LEATHER_ARMOR_RED: u32 = 212;
pub const CRTYPE_FAT_METAL_ARMOR: u32 = 162;
pub const CRTYPE_ROBOBRAIN: u32 = 53;
pub const CRTYPE_ROBOEYE: u32 = 54;
pub const CRTYPE_TURRET_LASER: u32 = 90;
pub const CRTYPE_TURRET_MINIGUN: u32 = 101;
pub const CRTYPE_ROBOT_HANDY: u32 = 17;
pub const CRTYPE_BOY: u32 = 27;
pub const CRTYPE_BOMM: u32 = 31;
pub const CRTYPE_YELLOW_M: u32 = 40;
pub const CRTYPE_NIGGER_RED: u32 = 39;
pub const CRTYPE_BALD_GREEN: u32 = 41;
pub const CRTYPE_DWARF: u32 = 42;
pub const CRTYPE_THIN: u32 = 43;
pub const CRTYPE_DREDMAN: u32 = 45;
pub const CRTYPE_CAPMAN: u32 = 48;
pub const CRTYPE_BUTCHER: u32 = 57;
pub const CRTYPE_TRIBAL_M: u32 = 64;
pub const CRTYPE_RICH_M: u32 = 72;
pub const CRTYPE_BRUISER_BLUE: u32 = 77;
pub const CRTYPE_BRUISER_GRAY: u32 = 78;
pub const CRTYPE_ASIAT_M: u32 = 83;
pub const CRTYPE_POLICE: u32 = 87;
pub const CRTYPE_TEENAGER: u32 = 88;
pub const CRTYPE_SCIENTIST: u32 = 89;
pub const CRTYPE_ASIAT_RED: u32 = 92;
pub const CRTYPE_ASIAT_BLUE: u32 = 93;
pub const CRTYPE_MACHO: u32 = 95;
pub const CRTYPE_WRESTLER: u32 = 96;
pub const CRTYPE_OLD_MAN: u32 = 98;
pub const CRTYPE_PANTS_YELLOW_BOLD: u32 = 130;
pub const CRTYPE_PANTS_YELLOW_HAIRY: u32 = 134;
pub const CRTYPE_PANTS_BLACK: u32 = 131;
pub const CRTYPE_PANTS_ALL_BLACK: u32 = 132;
pub const CRTYPE_DREDMAN_ARMORED: u32 = 133;
pub const CRTYPE_TWO_ARMS_JACKET_REGULAR: u32 = 138;
pub const CRTYPE_TWO_ARMS_JACKET_HAIRY: u32 = 139;
pub const CRTYPE_TWO_ARMS_JACKET_HAIRY_BLOND: u32 = 197;
pub const CRTYPE_COAT_GUY: u32 = 169;
pub const CRTYPE_BLACK_COAT_GUY: u32 = 198;
pub const CRTYPE_BLUE_SUIT: u32 = 171;
pub const CRTYPE_DREDMAN_YELLOW: u32 = 172;
pub const CRTYPE_DREDMAN_DARK_YELLOW: u32 = 173;
pub const CRTYPE_GIRL: u32 = 103;
pub const CRTYPE_YELLOW_F: u32 = 33;
pub const CRTYPE_METAL_YELLOW_F: u32 = 35;
pub const CRTYPE_METAL_PINK_F: u32 = 35;
pub const CRTYPE_TANDI: u32 = 36;
pub const CRTYPE_WHORE: u32 = 37;
pub const CRTYPE_REDHEADED_F: u32 = 38;
pub const CRTYPE_TRIBAL_F: u32 = 63;
pub const CRTYPE_RICH_F: u32 = 73;
pub const CRTYPE_BLACK_F: u32 = 83;
pub const CRTYPE_ASIAT_F: u32 = 94;
pub const CRTYPE_TANDI_BLACK: u32 = 164;
pub const CRTYPE_PA_HEADLESS: u32 = 30;
pub const CRTYPE_PA: u32 = 1;
pub const CRTYPE_PA_HARDY: u32 = 193;
pub const CRTYPE_PA_OXIDE: u32 = 194;
pub const CRTYPE_APA: u32 = 71;
pub const CRTYPE_CA_M: u32 = 10;
pub const CRTYPE_CA_FOR_NIGGERS: u32 = 150;
pub const CRTYPE_CA_BLUE_M: u32 = 104;
pub const CRTYPE_CA_DARK_M: u32 = 112;
pub const CRTYPE_CA_BALD: u32 = 158;
pub const CRTYPE_CA_BALD_BLACK: u32 = 199;
pub const CRTYPE_CA_CLAW_M: u32 = 177;
pub const CRTYPE_CA_SAND_1_M: u32 = 178;
pub const CRTYPE_CA_SAND_2_M: u32 = 179;
pub const CRTYPE_CA_SAND_3_M: u32 = 180;
pub const CRTYPE_CA_NIGHT_M: u32 = 181;
pub const CRTYPE_CA_MKII_M: u32 = 182;
pub const CRTYPE_CA_REN_MKI_M: u32 = 183;
pub const CRTYPE_CA_REN_MKII_M: u32 = 184;
pub const CRTYPE_EXO_BROWN: u32 = 241;
pub const CRTYPE_EXO_GRAY: u32 = 242;
pub const CRTYPE_EXO_GOLD: u32 = 302;
pub const CRTYPE_CA_F: u32 = 3;
pub const CRTYPE_CA_BLUE_F: u32 = 105;
pub const CRTYPE_CA_DARK_F: u32 = 111;
pub const CRTYPE_CA_CLAW_F: u32 = 185;
pub const CRTYPE_CA_SAND_1_F: u32 = 186;
pub const CRTYPE_CA_SAND_2_F: u32 = 187;
pub const CRTYPE_CA_SAND_3_F: u32 = 188;
pub const CRTYPE_CA_NIGHT_F: u32 = 189;
pub const CRTYPE_CA_MKII_F: u32 = 190;
pub const CRTYPE_CA_REN_MKI_F: u32 = 191;
pub const CRTYPE_CA_REN_MKII_F: u32 = 192;
pub const CRTYPE_ROBE_PINK: u32 = 2;
pub const CRTYPE_ROBE_BLUE: u32 = 26;
pub const CRTYPE_ROBE_BROWN: u32 = 56;
pub const CRTYPE_ROBE_GREY: u32 = 84;
pub const CRTYPE_ROBE_SAND: u32 = 122;
pub const CRTYPE_ROBE_GREEN: u32 = 159;
pub const CRTYPE_GHOUL_GREEN: u32 = 28;
pub const CRTYPE_GHOUL_WHITE: u32 = 29;
pub const CRTYPE_GHOUL_AVERAGE: u32 = 137;
pub const CRTYPE_GHOUL_GRAY: u32 = 155;
pub const CRTYPE_GHOUL_RUNNING: u32 = 79;
pub const CRTYPE_GHOUL_RUNNING_GREEN: u32 = 174;
pub const CRTYPE_GHOUL_RUNNING_GRAY: u32 = 175;
pub const CRTYPE_SUPERMUTE_NORMAL: u32 = 21;
pub const CRTYPE_SUPERMUTE_JACKET: u32 = 20;
pub const CRTYPE_SUPERMUTE_METAL: u32 = 114;
pub const CRTYPE_SUPERMUTE_METAL_BLACK: u32 = 170;
pub const CRTYPE_VAULT_BOY: u32 = 249;
pub const CRTYPE_SMALL_ROBE: u32 = 99;
pub const CRTYPE_3D_MALE_NORMAL: u32 = 290;
pub const CRTYPE_3D_MALE_WIRY: u32 = 291;
pub const CRTYPE_3D_MALE_STRONG: u32 = 292;
pub const CRTYPE_3D_MALE_FAT: u32 = 293;
pub const CRTYPE_3D_MALE_SKELETON: u32 = 294;
pub const CRTYPE_3D_FEMALE_NORMAL: u32 = 295;
pub const CRTYPE_3D_FEMALE_WIRY: u32 = 296;
pub const CRTYPE_3D_FEMALE_STRONG: u32 = 297;
pub const CRTYPE_3D_FEMALE_FAT: u32 = 298;
pub const CRTYPE_3D_FEMALE_SKELETON: u32 = 299;
pub const CRTYPE_3D_ANT: u32 = 300;
pub const CRTYPE_3D_ANT_QUEEN: u32 = 301;
pub const CRTYPE_3D_BAT: u32 = 302;
pub const CRTYPE_3D_BEETLE: u32 = 303;
pub const CRTYPE_3D_CENTIPEDE: u32 = 304;
pub const CRTYPE_3D_COUGAR: u32 = 305;
pub const CRTYPE_3D_COW: u32 = 306;
pub const CRTYPE_3D_DEATHCLAW: u32 = 307;
pub const CRTYPE_3D_DESERT_STALKER: u32 = 308;
pub const CRTYPE_3D_DOG: u32 = 309;
pub const CRTYPE_3D_GILA: u32 = 310;
pub const CRTYPE_3D_MANTRAP: u32 = 311;
pub const CRTYPE_3D_RAD_TOAD: u32 = 312;
pub const CRTYPE_3D_RAT: u32 = 313;
pub const CRTYPE_3D_THORN_SLINGER: u32 = 314;
pub const CRTYPE_3D_WASP_GIANT: u32 = 315;
pub const CRTYPE_3D_WEEDLING: u32 = 316;
pub const CRTYPE_TACTICS_RHUMANOID: u32 = 460;
pub const CRTYPE_ARCANUM_GEN_CR_BEGIN: u32 = 600;
pub const CRTYPE_ARCANUM_GEN_CR_END: u32 = 699;
pub const GLOBAL_PROCESS_MOVE: u32 = 0;
pub const GLOBAL_PROCESS_ENTER: u32 = 1;
pub const GLOBAL_PROCESS_START_FAST: u32 = 2;
pub const GLOBAL_PROCESS_START: u32 = 3;
pub const GLOBAL_PROCESS_SET_MOVE: u32 = 4;
pub const GLOBAL_PROCESS_STOPPED: u32 = 5;
pub const GLOBAL_PROCESS_NPC_IDLE: u32 = 6;
pub const GLOBAL_PROCESS_KICK: u32 = 7;
pub const GLOBAL_MAP_BASE_SPEED: f64 = 2.0;
pub const ZONE_COUNT_X: u32 = 7;
pub const ZONE_COUNT_Y: u32 = 12;
pub const ZONE_LENGTH: u32 = 50;
pub const GM_WALK_GROUND: u32 = 0;
pub const GM_WALK_FLY: u32 = 1;
pub const GM_WALK_WATER: u32 = 2;
pub const AS_ALLOW_UNSAFE_REFERENCES: u32 = 1;
pub const AS_OPTIMIZE_BYTECODE: u32 = 2;
pub const AS_COPY_SCRIPT_SECTIONS: u32 = 3;
pub const AS_MAX_STACK_SIZE: u32 = 4;
pub const AS_USE_CHARACTER_LITERALS: u32 = 5;
pub const AS_ALLOW_MULTILINE_STRINGS: u32 = 6;
pub const AS_ALLOW_IMPLICIT_HANDLE_TYPES: u32 = 7;
pub const AS_BUILD_WITHOUT_LINE_CUES: u32 = 8;
pub const AS_INIT_GLOBAL_VARS_AFTER_BUILD: u32 = 9;
pub const AS_REQUIRE_ENUM_SCOPE: u32 = 10;
pub const AS_SCRIPT_SCANNER: u32 = 11;
pub const AS_INCLUDE_JIT_INSTRUCTIONS: u32 = 12;
pub const AS_STRING_ENCODING: u32 = 13;
pub const AS_PROPERTY_ACCESSOR_MODE: u32 = 14;
pub const ITEM_DATA_MASK_CHOSEN: u32 = 0;
pub const ITEM_DATA_MASK_CRITTER: u32 = 1;
pub const ITEM_DATA_MASK_CRITTER_EXT: u32 = 2;
pub const ITEM_DATA_MASK_CONTAINER: u32 = 3;
pub const ITEM_DATA_MASK_MAP: u32 = 4;
pub const RADIO_DISABLE_SEND: u32 = 1;
pub const RADIO_DISABLE_RECV: u32 = 2;
pub const RADIO_DISABLE_SHIFT_SEND: u32 = 256;
pub const RADIO_DISABLE_SHIFT_RECV: u32 = 512;
pub const RADIO_DISABLE_SHIFT_BC_SEND: u32 = 1024;
pub const RADIO_DISABLE_SHIFT_BC_RECV: u32 = 2048;
pub const RADIO_DISABLE_SHIFT_CHANNEL: u32 = 4096;
pub const RADIO_BROADCAST_WORLD: u32 = 0;
pub const RADIO_BROADCAST_MAP: u32 = 20;
pub const RADIO_BROADCAST_LOCATION: u32 = 40;
pub const RADIO_BROADCAST_FORCE_ALL: u32 = 250;
pub const USE_PRIMARY: u32 = 0;
pub const USE_SECONDARY: u32 = 1;
pub const USE_THIRD: u32 = 2;
pub const USE_RELOAD: u32 = 3;
pub const USE_USE: u32 = 4;
pub const MAX_USES: u32 = 3;
pub const DEFAULT_WAIT_TIME: u32 = 1200;
pub const DEFAULT_AP_SKILL: u32 = 30;
pub const DEFAULT_AP_USE: u32 = 0;
pub const DEFAULT_AP_ACTION: u32 = 20;
pub const DEFAULT_AP_RELOAD: u32 = 2;
pub const DEFAULT_EXPLOSION_RADIUS: u32 = 3;
pub const QUICK_POCKETS_AP_MUL: f64 = 0.8;
pub const FAST_RELOAD_AP_MUL: f64 = 0.85;
pub const BROF_AP_MUL: f64 = 0.85;
pub const BHTH_AP_MUL: f64 = 0.85;
pub const FAST_SHOT_AP_MUL: f64 = 0.85;
pub const APPOINTS_BASE: u32 = 100;
pub const HITPOINTS_BASE: u32 = 80;
pub const ARMOR_CLASS_BASE: u32 = 0;
pub const NORMAL_RESIST_BASE: u32 = 0;
pub const BASE_AP: u32 = 100;
pub const AP_DIVIDER: u32 = 100;
pub const AP_REGEN_TIME: u32 = 1000;
pub const APREGEN_BASE: u32 = 120;
pub const APREGEN_PER_AGI: u32 = 45;
pub const ARMORCLASS_PER_AGI: u32 = 3;
pub const HITPOINTS_PER_STR: u32 = 3;
pub const CARRYWEIGHT_BASE: u32 = 25;
pub const CARRYWEIGHT_PER_STR: u32 = 25;
pub const MELEE_DAMAGE_BASE: u32 = 3;
pub const MELEE_DAMAGE_PER_STR: u32 = 3;
pub const HITPOINTS_PER_END: u32 = 4;
pub const HEALINGRATE_BASE: u32 = 2;
pub const APREGEN_PER_END: u32 = 25;
pub const HEALINGRATE_PER_END: u32 = 1;
pub const POISON_RESIST_PER_END: u32 = 5;
pub const RADIATION_RESIST_PER_END: u32 = 2;
pub const SEQUENCE_PER_PE: u32 = 3;
pub const FIELDOFVIEW_PER_PE: u32 = 4;
pub const CRITCHANCE_PER_LUCK: u32 = 2;
pub const SMALL_GUNS_BASE: u32 = 5;
pub const SMALL_GUNS_PER_AGI: u32 = 4;
pub const BIG_GUNS_BASE: u32 = 0;
pub const BIG_GUNS_PER_AGI: u32 = 2;
pub const ENERGY_WEAPONS_BASE: u32 = 0;
pub const ENERGY_WEAPONS_PER_AGI: u32 = 2;
pub const UNARMED_BASE: u32 = 30;
pub const UNARMED_PER_STATS: u32 = 2;
pub const MELEE_WEAPONS_BASE: u32 = 20;
pub const MELEE_WEAPONS_PER_STATS: u32 = 2;
pub const THROWING_BASE: u32 = 0;
pub const THROWING_PER_AGI: u32 = 4;
pub const FIRST_AID_BASE: u32 = 0;
pub const FIRST_AID_PER_STAT: u32 = 2;
pub const DOCTOR_BASE: u32 = 5;
pub const SNEAK_BASE: u32 = 5;
pub const SNEAK_PER_AGI: u32 = 3;
pub const LOCKPICK_BASE: u32 = 10;
pub const STEAL_BASE: u32 = 0;
pub const STEAL_PER_AGI: u32 = 3;
pub const TRAPS_BASE: u32 = 10;
pub const SCIENCE_BASE: u32 = 0;
pub const SCIENCE_PER_INT: u32 = 4;
pub const REPAIR_BASE: u32 = 0;
pub const REPAIR_PER_INT: u32 = 3;
pub const SPEECH_BASE: u32 = 0;
pub const SPEECH_PER_CHA: u32 = 5;
pub const BARTER_BASE: u32 = 0;
pub const BARTER_PER_CHA: u32 = 4;
pub const GAMBLING_BASE: u32 = 0;
pub const GAMBLING_PER_STAT: u32 = 2;
pub const OUTDOORSMAN_BASE: u32 = 0;
pub const OUTDOORSMAN_PER_STAT: u32 = 2;
pub const CALIBER_NONE: u32 = 0;
pub const CALIBER_ROCKET: u32 = 1;
pub const CALIBER_FLAMETHROWER_FUEL: u32 = 2;
pub const CALIBER_C_ENERGY_CELL: u32 = 3;
pub const CALIBER_D_ENERGY_CELL: u32 = 4;
pub const CALIBER_223: u32 = 5;
pub const CALIBER_5MM: u32 = 6;
pub const CALIBER_40: u32 = 7;
pub const CALIBER_10MM: u32 = 8;
pub const CALIBER_44: u32 = 9;
pub const CALIBER_14MM: u32 = 10;
pub const CALIBER_12_GAUGE: u32 = 11;
pub const CALIBER_9MM: u32 = 12;
pub const CALIBER_BB: u32 = 13;
pub const CALIBER_45: u32 = 14;
pub const CALIBER_2MM: u32 = 15;
pub const CALIBER_4_7MM_CASELESS: u32 = 16;
pub const CALIBER_HN_NEEDLER: u32 = 17;
pub const CALIBER_7_62MM: u32 = 18;
pub const CALIBER_700_NITRO_EXPRESS: u32 = 19;
pub const GEOMETRY_FALLOUT: u32 = 0;
pub const GEOMETRY_TACTICS: u32 = 1;
pub const GEOMETRY_ARCANUM: u32 = 2;
pub const CONSTANTS_PARAM: u32 = 0;
pub const CONSTANTS_ITEM: u32 = 1;
pub const CONSTANTS_DEFINE: u32 = 2;
pub const CONSTANTS_PICTURE: u32 = 3;
pub const CONSTANTS_HASH: u32 = 4;
pub const IMAGE_RELIEF: u32 = 0;
pub const PT_ROOT: u32 = 0;
pub const PT_DATA: u32 = 1;
pub const PT_ART: u32 = 2;
pub const PT_ART_CRITTERS: u32 = 3;
pub const PT_ART_INTRFACE: u32 = 4;
pub const PT_ART_INVEN: u32 = 5;
pub const PT_ART_ITEMS: u32 = 6;
pub const PT_ART_MISC: u32 = 7;
pub const PT_ART_SCENERY: u32 = 8;
pub const PT_ART_SKILLDEX: u32 = 9;
pub const PT_ART_SPLASH: u32 = 10;
pub const PT_ART_TILES: u32 = 11;
pub const PT_ART_WALLS: u32 = 12;
pub const PT_TEXTURES: u32 = 13;
pub const PT_EFFECTS: u32 = 14;
pub const PT_SND_MUSIC: u32 = 16;
pub const PT_SND_SFX: u32 = 17;
pub const PT_SCRIPTS: u32 = 18;
pub const PT_VIDEO: u32 = 19;
pub const PT_TEXTS: u32 = 20;
pub const PT_SAVE: u32 = 21;
pub const PT_FONTS: u32 = 22;
pub const PT_CACHE: u32 = 23;
pub const PT_SERVER_ROOT: u32 = 30;
pub const PT_SERVER_DATA: u32 = 31;
pub const PT_SERVER_TEXTS: u32 = 32;
pub const PT_SERVER_DIALOGS: u32 = 33;
pub const PT_SERVER_MAPS: u32 = 34;
pub const PT_SERVER_PRO_ITEMS: u32 = 35;
pub const PT_SERVER_PRO_CRITTERS: u32 = 36;
pub const PT_SERVER_SCRIPTS: u32 = 37;
pub const PT_SERVER_SAVE: u32 = 38;
pub const PT_SERVER_CLIENTS: u32 = 39;
pub const PT_SERVER_BANS: u32 = 40;
pub const PT_MAPPER_ROOT: u32 = 45;
pub const PT_MAPPER_DATA: u32 = 46;
pub const COMMAND_EXIT: u32 = 1;
pub const COMMAND_MYINFO: u32 = 2;
pub const COMMAND_GAMEINFO: u32 = 3;
pub const COMMAND_CRITID: u32 = 4;
pub const COMMAND_MOVECRIT: u32 = 5;
pub const COMMAND_KILLCRIT: u32 = 6;
pub const COMMAND_DISCONCRIT: u32 = 7;
pub const COMMAND_TOGLOBAL: u32 = 8;
pub const COMMAND_RESPAWN: u32 = 9;
pub const COMMAND_PARAM: u32 = 10;
pub const COMMAND_GETACCESS: u32 = 11;
pub const COMMAND_ADDITEM: u32 = 12;
pub const COMMAND_CRASH: u32 = 13;
pub const COMMAND_ADDITEM_SELF: u32 = 14;
pub const COMMAND_ADDNPC: u32 = 15;
pub const COMMAND_ADDLOCATION: u32 = 16;
pub const COMMAND_RELOADSCRIPTS: u32 = 17;
pub const COMMAND_LOADSCRIPT: u32 = 18;
pub const COMMAND_RELOAD_CLIENT_SCRIPTS: u32 = 19;
pub const COMMAND_RUNSCRIPT: u32 = 20;
pub const COMMAND_RELOADLOCATIONS: u32 = 21;
pub const COMMAND_LOADLOCATION: u32 = 22;
pub const COMMAND_RELOADMAPS: u32 = 23;
pub const COMMAND_LOADMAP: u32 = 24;
pub const COMMAND_REGENMAP: u32 = 25;
pub const COMMAND_RELOADDIALOGS: u32 = 26;
pub const COMMAND_LOADDIALOG: u32 = 27;
pub const COMMAND_RELOADTEXTS: u32 = 28;
pub const COMMAND_RELOADAI: u32 = 29;
pub const COMMAND_CHECKVAR: u32 = 30;
pub const COMMAND_SETVAR: u32 = 31;
pub const COMMAND_SETTIME: u32 = 32;
pub const COMMAND_BAN: u32 = 33;
pub const COMMAND_DELETE_ACCOUNT: u32 = 34;
pub const COMMAND_CHANGE_PASSWORD: u32 = 35;
pub const COMMAND_DROP_UID: u32 = 36;
pub const COMMAND_LOG: u32 = 37;
pub const CR_STATUS_BLEED: u32 = 1;
pub const CR_STATUS_STIMPAK_OVER: u32 = 2;
pub const CR_STATUS_ILL: u32 = 4;
pub const CR_STATUS_BLOOD_TOXIC: u32 = 8;
pub const CR_STATUS_HEAVY_DMG: u32 = 16;
pub const CR_STATUS_POWDER_OVER: u32 = 32;
pub const CR_STATUS_ORG_DMG: u32 = 96;
pub const CR_STATUS_BULLET_OVER: u32 = 64;
pub const HEAL_ANTISEPTIC: u32 = 2;
pub const HEAL_HEALING: u32 = 4;
pub const HEAL_BANDAGE: u32 = 8;
pub const HEAL_MULTYTOOL: u32 = 4;
pub const HEAL_SPLINT: u32 = 8;
pub const HEAL_THREAD: u32 = 16;
pub const HEAL_ANESTETIC: u32 = 32;
pub const INPUTBOX_CLOSE_ON_ENTER: u32 = 1;
pub const SECONDARY_SKILLS_BONUS_CAP: u32 = 125;
pub const PID_WAYPOINT: u32 = 1400;
pub const TEAM_DEATHCLAW_METRA: u32 = 38;
pub const TEAM_ALIEN_METRA: u32 = 39;
pub const TEAM_FIREGECKO_METRA: u32 = 40;
pub const TEAM_CENTAUR_METRA: u32 = 41;
pub const _STLP_OUTERMOST_HEADER_ID: u32 = 104;
pub const __SGI_STL: u32 = 816;
pub const _STLPORT_MAJOR: u32 = 5;
pub const _STLPORT_MINOR: u32 = 2;
pub const _STLPORT_PATCHLEVEL: u32 = 1;
pub const _STLPORT_VERSION: u32 = 1313;
pub const _STLP_STLPORT_DBG_LEVEL: u32 = 1;
pub const _STLP_STANDARD_DBG_LEVEL: u32 = 2;
pub const _STLP_NEW_PLATFORM_SDK: u32 = 1;
pub const _STLP_PLATFORM: &'static [u8; 6usize] = b"Linux\0";
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _STLP_USE_GLIBC: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _STLP_LITTLE_ENDIAN: u32 = 1;
pub const _STLP_USE_MALLOC: u32 = 1;
pub const _STLP_COMPILER: &'static [u8; 4usize] = b"gcc\0";
pub const _STLP_HAS_INCLUDE_NEXT: u32 = 1;
pub const _STLP_MEMBER_TEMPLATES: u32 = 1;
pub const _STLP_MEMBER_TEMPLATE_CLASSES: u32 = 1;
pub const _STLP_CLASS_PARTIAL_SPECIALIZATION: u32 = 1;
pub const _STLP_FUNCTION_TMPL_PARTIAL_ORDER: u32 = 1;
pub const _STLP_USE_SHORT_STRING_OPTIM: u32 = 1;
pub const _STLP_USE_NAMESPACES: u32 = 1;
pub const _STLP_UNIX: u32 = 1;
pub const _STLP_USE_OWN_NAMESPACE: u32 = 1;
pub const _STLP_DEFAULT_TYPE_PARAM: u32 = 1;
pub const _STLP_HAS_WCHAR_T: u32 = 1;
pub const _STLP_CAN_THROW_RANGE_ERRORS: u32 = 1;
pub const _STLP_IMPORT_VENDOR_CSTD: u32 = 1;
pub const _STLP_BOOL_KEYWORD: u32 = 1;
pub const _STLP_SHRED_BYTE: u32 = 163;
pub const _STLP_EXPOSE_STREAM_IMPLEMENTATION: u32 = 1;
pub const _STLP_EXPOSE_GLOBALS_IMPLEMENTATION: u32 = 1;
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 8;
pub const __GLIBCXX__: u32 = 20181127;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_PTRDIFF_T_IS_INT: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_SIZE_T_IS_UINT: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosl\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 24;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 36;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 20;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 1;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 1;
pub const __PTHREAD_RWLOCK_ELISION_EXTRA: u32 = 0;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 0;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u32 = 2147483647;
pub const FP_LLOGB0: i32 = -2147483648;
pub const FP_LLOGBNAN: i32 = -2147483648;
pub const FP_INT_UPWARD: u32 = 0;
pub const FP_INT_DOWNWARD: u32 = 1;
pub const FP_INT_TOWARDZERO: u32 = 2;
pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
pub const FP_INT_TONEAREST: u32 = 4;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub const _GLIBCXX_CMATH: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _GLIBCXX_CSTRING: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 32;
pub const ULONG_WIDTH: u32 = 32;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 32;
pub const _GLIBCXX_CLIMITS: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _STLP_INIT_AMBIGUITY: u32 = 1;
pub const _STLP_OWN_STDEXCEPT: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _GLIBCXX_CTIME: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _GLIBCXX_CFLOAT: u32 = 1;
pub const __SGI_STL_PORT: u32 = 1313;
pub const __STL_USE_NAMESPACES: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 32;
pub const UINT_FAST16_WIDTH: u32 = 32;
pub const INT_FAST32_WIDTH: u32 = 32;
pub const UINT_FAST32_WIDTH: u32 = 32;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 32;
pub const UINTPTR_WIDTH: u32 = 32;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 32;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 32;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const ANGELSCRIPT_VERSION: u32 = 22300;
pub const ANGELSCRIPT_VERSION_STRING: &'static [u8; 11usize] = b"2.23.0 WIP\0";
pub const AS_PTR_SIZE: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 3usize] = b"ll\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdMAX: &'static [u8; 4usize] = b"lld\0";
pub const PRIiMAX: &'static [u8; 4usize] = b"lli\0";
pub const PRIoMAX: &'static [u8; 4usize] = b"llo\0";
pub const PRIuMAX: &'static [u8; 4usize] = b"llu\0";
pub const PRIxMAX: &'static [u8; 4usize] = b"llx\0";
pub const PRIXMAX: &'static [u8; 4usize] = b"llX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdMAX: &'static [u8; 4usize] = b"lld\0";
pub const SCNiMAX: &'static [u8; 4usize] = b"lli\0";
pub const SCNoMAX: &'static [u8; 4usize] = b"llo\0";
pub const SCNuMAX: &'static [u8; 4usize] = b"llu\0";
pub const SCNxMAX: &'static [u8; 4usize] = b"llx\0";
pub const SQRT3T2_FLOAT: f64 = 3.4641016151;
pub const SQRT3_FLOAT: f64 = 1.732050807568877;
pub const RAD2DEG: f64 = 57.29577951;
pub const LEXEMS_SIZE: u32 = 128;
pub const MAX_HOLO_INFO: u32 = 250;
pub const MAX_NPC_BAGS_PACKS: u32 = 20;
pub const MAX_ENEMY_STACK: u32 = 30;
pub const MAX_NPC_BAGS: u32 = 50;
pub const MAX_STORED_LOCATIONS: u32 = 1000;
pub const GM_ZONES_FOG_SIZE: u32 = 2500;
pub const MAX_SCRIPT_NAME: u32 = 64;
pub const MAPOBJ_SCRIPT_NAME: u32 = 25;
pub const MAPOBJ_CRITTER_PARAMS: u32 = 40;
pub const MAX_PARAMETERS_ARRAYS: u32 = 100;
pub const MAX_NAME: u32 = 30;
pub const PASS_HASH_SIZE: u32 = 32;
pub const MAX_STORED_IP: u32 = 20;
pub const MAX_HEX_OFFSET: u32 = 50;
pub const MAX_CRIT_TYPES: u32 = 1000;
pub const EFFECT_TEXTURES: u32 = 10;
pub const EFFECT_SCRIPT_VALUES: u32 = 10;
pub const CRITTER_USER_DATA_SIZE: u32 = 400;
pub const VAR_GLOBAL: u32 = 0;
pub const VAR_LOCAL: u32 = 1;
pub const VAR_UNICUM: u32 = 2;
pub const VAR_LOCAL_LOCATION: u32 = 3;
pub const VAR_LOCAL_MAP: u32 = 4;
pub const VAR_LOCAL_ITEM: u32 = 5;
pub const VAR_FLAG_QUEST: u32 = 1;
pub const VAR_FLAG_RANDOM: u32 = 2;
pub const VAR_FLAG_NO_CHECK: u32 = 4;
pub const PROTO_ITEM_USER_DATA_SIZE: u32 = 500;
pub const ITEM_MAX_BLOCK_LINES: u32 = 50;
pub const ITEM_MAX_CHILDS: u32 = 5;
pub const ITEM_MAX_CHILD_LINES: u32 = 6;
pub const ITEM_MAX_SCRIPT_VALUES: u32 = 10;
pub const USE_NONE: u32 = 15;
pub const MAX_PARAMS: u32 = 1000;
pub const TB_BATTLE_TIMEOUT: u32 = 100000000;
pub const MAP_LOOP_FUNC_MAX: u32 = 5;
pub const MAP_MAX_DATA: u32 = 100;
pub const SPRITE_CUT_HORIZONTAL: u32 = 1;
pub const SPRITE_CUT_VERTICAL: u32 = 2;
pub const CHANGE_LANG_CTRL_SHIFT: u32 = 0;
pub const CHANGE_LANG_ALT_SHIFT: u32 = 1;
pub const INDICATOR_LINES: u32 = 0;
pub const INDICATOR_NUMBERS: u32 = 1;
pub const INDICATOR_BOTH: u32 = 2;
pub const MIN_ZOOM: f64 = 0.2;
pub const MAX_ZOOM: f64 = 10.0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __intmax_t = ::std::os::raw::c_longlong;
pub type __uintmax_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___true_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___true_type() {
    assert_eq!(
        ::std::mem::size_of::<std___true_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___true_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___true_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___true_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___false_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std___false_type() {
    assert_eq!(
        ::std::mem::size_of::<std___false_type>(),
        1usize,
        concat!("Size of: ", stringify!(std___false_type))
    );
    assert_eq!(
        ::std::mem::align_of::<std___false_type>(),
        1usize,
        concat!("Alignment of ", stringify!(std___false_type))
    );
}
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const std___traitor___value: std___traitor__bindgen_ty_1 = 0;
pub type std___traitor__bindgen_ty_1 = i32;
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const std___are_same___value: std___are_same__bindgen_ty_1 = 0;
pub type std___are_same__bindgen_ty_1 = i32;
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const std___is_void___value: std___is_void__bindgen_ty_1 = 0;
pub type std___is_void__bindgen_ty_1 = i32;
pub type std___is_void___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_void_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_void>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_void)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_void>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_void)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const std___is_integer___value: std___is_integer__bindgen_ty_1 = 0;
pub type std___is_integer__bindgen_ty_1 = i32;
pub type std___is_integer___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_integer_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_integer_open0_unsigned_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_integer>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_integer)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_integer>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_integer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const std___is_floating___value: std___is_floating__bindgen_ty_1 = 0;
pub type std___is_floating__bindgen_ty_1 = i32;
pub type std___is_floating___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_floating_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_floating_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_floating>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_floating)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_floating>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_floating)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const std___is_pointer___value: std___is_pointer__bindgen_ty_1 = 0;
pub type std___is_pointer__bindgen_ty_1 = i32;
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const std___is_char___value: std___is_char__bindgen_ty_1 = 0;
pub type std___is_char__bindgen_ty_1 = i32;
pub type std___is_char___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_char_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_char>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_char)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_char>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_char)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_char_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_char>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_char)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_char>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_char)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const std___is_byte___value: std___is_byte__bindgen_ty_1 = 0;
pub type std___is_byte__bindgen_ty_1 = i32;
pub type std___is_byte___type = std___false_type;
#[test]
fn __bindgen_test_layout_std___is_byte_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_byte_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[test]
fn __bindgen_test_layout_std___is_byte_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<std___is_byte>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(std___is_byte)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<std___is_byte>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(std___is_byte)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const std___is_move_iterator___value: std___is_move_iterator__bindgen_ty_1 = 0;
pub type std___is_move_iterator__bindgen_ty_1 = i32;
pub type std___is_move_iterator___type = std___false_type;
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_std_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_exception>(),
        4usize,
        concat!("Size of: ", stringify!(std_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_exception>(),
        4usize,
        concat!("Alignment of ", stringify!(std_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_exception() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_exception>(),
        4usize,
        concat!("Size of: ", stringify!(std_bad_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_exception>(),
        4usize,
        concat!("Alignment of ", stringify!(std_bad_exception))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this: *mut std_bad_exception);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type std_unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler) -> std_terminate_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt9terminatev"]
    pub fn std_terminate();
}
extern "C" {
    #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler) -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt10unexpectedv"]
    pub fn std_unexpected();
}
extern "C" {
    #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[test]
fn bindgen_test_layout_std_bad_alloc() {
    assert_eq!(
        ::std::mem::size_of::<std_bad_alloc>(),
        4usize,
        concat!("Size of: ", stringify!(std_bad_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<std_bad_alloc>(),
        4usize,
        concat!("Alignment of ", stringify!(std_bad_alloc))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_std_nothrow_t() {
    assert_eq!(
        ::std::mem::size_of::<std_nothrow_t>(),
        1usize,
        concat!("Size of: ", stringify!(std_nothrow_t))
    );
    assert_eq!(
        ::std::mem::align_of::<std_nothrow_t>(),
        1usize,
        concat!("Alignment of ", stringify!(std_nothrow_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___true_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std___true_type() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___true_type>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std___true_type))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___true_type>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std___true_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___false_type {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std___false_type() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___false_type>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std___false_type))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___false_type>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std___false_type))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__MoveSourceTraits {
    pub _address: u8,
}
pub type stlp_std_priv__MoveSourceTraits__MvImpRet = stlp_std___move_traits;
pub const stlp_std_priv__MoveSourceTraits__MvImp: stlp_std_priv___MoveSourceTraits__bindgen_ty_1 =
    0;
pub type stlp_std_priv__MoveSourceTraits__bindgen_ty_1 = i32;
pub type stlp_std_priv__MoveSourceTraits__Type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___move_traits_aux {
    pub _address: u8,
}
pub type stlp_std_priv___move_traits_aux_implemented = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_aux_complete = stlp_std___move_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___move_traits_aux2 {
    pub _address: u8,
}
pub type stlp_std_priv___move_traits_aux2__MoveTraits1 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_aux2__MoveTraits2 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_aux2_implemented = stlp_std__Lor2;
pub type stlp_std_priv___move_traits_aux2_complete = stlp_std__Land2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___move_traits_help {
    pub _address: u8,
}
pub type stlp_std_priv___move_traits_help_implemented = stlp_std___true_type;
pub type stlp_std_priv___move_traits_help_complete = stlp_std___move_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___move_traits_help1 {
    pub _address: u8,
}
pub type stlp_std_priv___move_traits_help1__MoveTraits1 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_help1__MoveTraits2 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_help1_implemented = stlp_std__Lor2;
pub type stlp_std_priv___move_traits_help1_complete = stlp_std__Land2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___move_traits_help2 {
    pub _address: u8,
}
pub type stlp_std_priv___move_traits_help2__MoveTraits1 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_help2__MoveTraits2 = stlp_std___move_traits;
pub type stlp_std_priv___move_traits_help2_implemented = stlp_std___true_type;
pub type stlp_std_priv___move_traits_help2_complete = stlp_std__Land2;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Project1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Project2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Constant_unary_fun<_Result> {
    pub _M_val: stlp_std_priv___Constant_unary_fun_result_type<_Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
pub type stlp_std_priv__Constant_unary_fun_argument_type<_Argument> = _Argument;
pub type stlp_std_priv__Constant_unary_fun_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Constant_binary_fun<_Result> {
    pub _M_val: _Result,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
pub type stlp_std_priv__Constant_binary_fun_first_argument_type<_Arg1> = _Arg1;
pub type stlp_std_priv__Constant_binary_fun_second_argument_type<_Arg2> = _Arg2;
pub type stlp_std_priv__Constant_binary_fun_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__IsCharLikeType {
    pub _address: u8,
}
pub type stlp_std_priv__IsCharLikeType__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std_priv__IsCharLikeType_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv__IsCharLikeType_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv__IsCharLikeType_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___IsCharLikeType>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___IsCharLikeType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___alloc_type_traits {
    pub _address: u8,
}
pub type stlp_std_priv___alloc_type_traits__STLportAlloc = stlp_std__IsSTLportClass;
pub type stlp_std_priv___alloc_type_traits_has_trivial_default_constructor =
    stlp_std_priv____alloc_type_traits__STLportAlloc;
pub type stlp_std_priv___alloc_type_traits_has_trivial_copy_constructor =
    stlp_std_priv____alloc_type_traits__STLportAlloc;
pub type stlp_std_priv___alloc_type_traits_has_trivial_assignment_operator =
    stlp_std_priv____alloc_type_traits__STLportAlloc;
pub type stlp_std_priv___alloc_type_traits_has_trivial_destructor =
    stlp_std_priv____alloc_type_traits__STLportAlloc;
pub type stlp_std_priv___alloc_type_traits_is_POD_type =
    stlp_std_priv____alloc_type_traits__STLportAlloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__STLP_alloc_proxy<_Value, _MaybeReboundAlloc> {
    pub _base: _MaybeReboundAlloc,
    pub _M_data: _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_MaybeReboundAlloc>>,
}
pub type stlp_std_priv__STLP_alloc_proxy__Base<_MaybeReboundAlloc> = _MaybeReboundAlloc;
pub type stlp_std_priv__STLP_alloc_proxy_size_type = [u8; 0usize];
pub type stlp_std_priv__STLP_alloc_proxy__Self<_Value, _MaybeReboundAlloc> =
    stlp_std_priv___STLP_alloc_proxy<_Value, _MaybeReboundAlloc>;
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv14__get_c_stringERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn stlp_std_priv___get_c_string(
        __str: *const stlp_std_string,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct stlp_std_priv__String_base<_Tp, _Alloc> {
    pub _M_buffers: stlp_std_priv___String_base__Buffers<_Tp>,
    pub _M_finish: *mut _Tp,
    pub _M_start_of_storage: stlp_std_priv___String_base__AllocProxy<_Tp, _Alloc>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type stlp_std_priv__String_base__Self<_Tp, _Alloc> = stlp_std_priv___String_base<_Tp, _Alloc>;
pub const stlp_std_priv__String_base__DEFAULT_SIZE: stlp_std_priv___String_base__bindgen_ty_1 = 0;
pub type stlp_std_priv__String_base__bindgen_ty_1 = i32;
pub type stlp_std_priv__String_base_allocator_type<_Alloc> = _Alloc;
pub type stlp_std_priv__String_base__AllocProxy<_Tp, _Alloc> =
    stlp_std_priv___STLP_alloc_proxy<_Tp, stlp_std_priv___String_base_allocator_type<_Alloc>>;
pub type stlp_std_priv__String_base_size_type = usize;
#[repr(C)]
pub union stlp_std_priv__String_base__Buffers<_Tp> {
    pub _M_end_of_storage: *mut _Tp,
    pub _M_static_buf: *mut _Tp,
    _bindgen_union_align: u32,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__String_reserve_t {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_priv__String_reserve_t() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv__String_reserve_t>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_priv__String_reserve_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv__String_reserve_t>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_priv__String_reserve_t))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Eq_traits {
    pub _address: u8,
}
#[repr(C)]
pub struct stlp_std_priv__Eq_char_bound {
    pub __val: [u8; 0usize],
}
#[repr(C)]
pub struct stlp_std_priv__Neq_char_bound {
    pub __val: [u8; 0usize],
}
#[repr(C)]
pub struct stlp_std_priv__Eq_int_bound {
    pub __val: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Constant_void_fun<_Result> {
    pub _M_val: stlp_std_priv___Constant_void_fun_result_type<_Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
pub type stlp_std_priv__Constant_void_fun_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Not_within_traits {
    pub _M_first: *const stlp_std_priv___Not_within_traits__CharT,
    pub _M_last: *const stlp_std_priv___Not_within_traits__CharT,
}
pub type stlp_std_priv__Not_within_traits__CharT = [u8; 0usize];
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId(arg1: *const stlp_std_money_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId1(arg1: *const stlp_std_money_put) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId2(arg1: *const stlp_std_num_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId3(arg1: *const stlp_std_num_put) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId4(arg1: *const stlp_std_time_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE"]
    pub fn stlp_std_priv__GetFacetId5(arg1: *const stlp_std_time_put) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId6(arg1: *const stlp_std_money_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId7(arg1: *const stlp_std_money_put) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId8(arg1: *const stlp_std_num_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId9(arg1: *const stlp_std_num_put) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId10(arg1: *const stlp_std_time_get) -> *mut stlp_std_locale_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv11_GetFacetIdEPKNS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE"]
    pub fn stlp_std_priv__GetFacetId11(arg1: *const stlp_std_time_put) -> *mut stlp_std_locale_id;
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv___iostring_allocator<_CharT> {
    pub _M_static_buf: *mut _CharT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub const stlp_std_priv___iostring_allocator__STR_SIZE:
    stlp_std_priv____iostring_allocator__bindgen_ty_1 = 0;
pub type stlp_std_priv___iostring_allocator__bindgen_ty_1 = i32;
pub const stlp_std_priv___iostring_allocator__BUF_SIZE:
    stlp_std_priv____iostring_allocator__bindgen_ty_2 = 0;
pub type stlp_std_priv___iostring_allocator__bindgen_ty_2 = i32;
pub type stlp_std_priv___iostring_allocator__Base = stlp_std_allocator;
pub type stlp_std_priv___iostring_allocator_size_type = stlp_std_priv____iostring_allocator__Base;
pub type stlp_std_priv___iostring_allocator_pointer = stlp_std_priv____iostring_allocator__Base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv___iostring_allocator_rebind {
    pub _address: u8,
}
pub type stlp_std_priv___iostring_allocator_rebind_other<_Tp1> =
    stlp_std_priv____iostring_allocator<_Tp1>;
#[repr(C)]
pub struct stlp_std_priv___basic_iostring<_CharT> {
    pub _base: stlp_std_basic_string<_CharT, stlp_std_priv____iostring_allocator<_CharT>>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_priv___basic_iostring__Self<_CharT> = stlp_std_priv____basic_iostring<_CharT>;
pub type stlp_std_priv___basic_iostring__Base<_CharT> =
    stlp_std_basic_string<_CharT, stlp_std_priv____iostring_allocator<_CharT>>;
pub type stlp_std_priv___basic_iostring__Reserve_t<_CharT> =
    stlp_std_priv____basic_iostring__Base<_CharT>;
pub type stlp_std_priv___iostring = stlp_std_priv____basic_iostring<::std::os::raw::c_char>;
pub type stlp_std_priv___iowstring = stlp_std_priv____basic_iostring<u32>;
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv13__write_floatERNS0_16__basic_iostringIcEEiid"]
    pub fn stlp_std_priv___write_float(
        arg1: *mut stlp_std_priv____iostring,
        arg2: stlp_std_ios_base_fmtflags,
        arg3: ::std::os::raw::c_int,
        arg4: f64,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv13__write_floatERNS0_16__basic_iostringIcEEiie"]
    pub fn stlp_std_priv___write_float1(
        arg1: *mut stlp_std_priv____iostring,
        arg2: stlp_std_ios_base_fmtflags,
        arg3: ::std::os::raw::c_int,
        arg4: f64,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv18__get_floor_digitsERNS0_16__basic_iostringIcEEe"]
    pub fn stlp_std_priv___get_floor_digits(arg1: *mut stlp_std_priv____iostring, arg2: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv22__convert_float_bufferERKNS0_16__basic_iostringIcEERNS1_IwEERKNS_5ctypeIwEEwb"]
    pub fn stlp_std_priv___convert_float_buffer(
        arg1: *const stlp_std_priv____iostring,
        arg2: *mut stlp_std_priv____iowstring,
        arg3: *const stlp_std_ctype,
        arg4: u32,
        arg5: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv21__adjust_float_bufferERNS0_16__basic_iostringIcEEc"]
    pub fn stlp_std_priv___adjust_float_buffer(
        arg1: *mut stlp_std_priv____iostring,
        arg2: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv15__write_integerEPcil"]
    pub fn stlp_std_priv___write_integer(
        buf: *mut ::std::os::raw::c_char,
        flags: stlp_std_ios_base_fmtflags,
        x: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__insert_groupingEPcS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEccci"]
    pub fn stlp_std_priv___insert_grouping(
        first: *mut ::std::os::raw::c_char,
        last: *mut ::std::os::raw::c_char,
        arg1: *const stlp_std_string,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__insert_groupingERNS0_16__basic_iostringIcEEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEccci"]
    pub fn stlp_std_priv___insert_grouping1(
        arg1: *mut stlp_std_priv____iostring,
        arg2: usize,
        arg3: *const stlp_std_string,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__insert_groupingEPwS1_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEwwwi"]
    pub fn stlp_std_priv___insert_grouping2(
        arg1: *mut u32,
        arg2: *mut u32,
        arg3: *const stlp_std_string,
        arg4: u32,
        arg5: u32,
        arg6: u32,
        arg7: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__insert_groupingERNS0_16__basic_iostringIwEEjRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEwwwi"]
    pub fn stlp_std_priv___insert_grouping3(
        arg1: *mut stlp_std_priv____iowstring,
        arg2: usize,
        arg3: *const stlp_std_string,
        arg4: u32,
        arg5: u32,
        arg6: u32,
        arg7: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Numeric_limits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__LimG {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}is_specialized"]
    pub static stlp_std_priv_is_specialized: bool;
}
extern "C" {
    #[link_name = "\u{1}digits"]
    pub static stlp_std_priv_digits: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}digits10"]
    pub static stlp_std_priv_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}is_signed"]
    pub static stlp_std_priv_is_signed: bool;
}
extern "C" {
    #[link_name = "\u{1}is_integer"]
    pub static stlp_std_priv_is_integer: bool;
}
extern "C" {
    #[link_name = "\u{1}is_exact"]
    pub static stlp_std_priv_is_exact: bool;
}
extern "C" {
    #[link_name = "\u{1}radix"]
    pub static stlp_std_priv_radix: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}min_exponent"]
    pub static stlp_std_priv_min_exponent: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_exponent"]
    pub static stlp_std_priv_max_exponent: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}min_exponent10"]
    pub static stlp_std_priv_min_exponent10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_exponent10"]
    pub static stlp_std_priv_max_exponent10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}has_infinity"]
    pub static stlp_std_priv_has_infinity: bool;
}
extern "C" {
    #[link_name = "\u{1}has_quiet_NaN"]
    pub static stlp_std_priv_has_quiet_NaN: bool;
}
extern "C" {
    #[link_name = "\u{1}has_signaling_NaN"]
    pub static stlp_std_priv_has_signaling_NaN: bool;
}
extern "C" {
    #[link_name = "\u{1}has_denorm"]
    pub static stlp_std_priv_has_denorm: stlp_std_float_denorm_style;
}
extern "C" {
    #[link_name = "\u{1}has_denorm_loss"]
    pub static stlp_std_priv_has_denorm_loss: bool;
}
extern "C" {
    #[link_name = "\u{1}is_iec559"]
    pub static stlp_std_priv_is_iec559: bool;
}
extern "C" {
    #[link_name = "\u{1}is_bounded"]
    pub static stlp_std_priv_is_bounded: bool;
}
extern "C" {
    #[link_name = "\u{1}is_modulo"]
    pub static stlp_std_priv_is_modulo: bool;
}
extern "C" {
    #[link_name = "\u{1}traps"]
    pub static stlp_std_priv_traps: bool;
}
extern "C" {
    #[link_name = "\u{1}tinyness_before"]
    pub static stlp_std_priv_tinyness_before: bool;
}
extern "C" {
    #[link_name = "\u{1}round_style"]
    pub static stlp_std_priv_round_style: stlp_std_float_round_style;
}
#[repr(C)]
pub union stlp_std_priv_float_helper__WordsNumber<_Number> {
    pub _Words: [::std::os::raw::c_ushort; 8usize],
    pub _num: _Number,
    _bindgen_union_align: [u16; 8usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Number>>,
}
#[repr(C)]
pub union stlp_std_priv_float_helper2__WordsNumber<_Number> {
    pub _Words: [::std::os::raw::c_ushort; 8usize],
    pub _num: _Number,
    _bindgen_union_align: [u16; 8usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Number>>,
}
pub type stlp_std_priv___max_int_t = ::std::os::raw::c_long;
pub type stlp_std_priv___umax_int_t = ::std::os::raw::c_ulong;
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv19__hex_char_table_loEv"]
    pub fn stlp_std_priv___hex_char_table_lo() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv19__hex_char_table_hiEv"]
    pub fn stlp_std_priv___hex_char_table_hi() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv16__valid_groupingEPKcS2_S2_S2_"]
    pub fn stlp_std_priv___valid_grouping(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv12__get_fdigitERwPKw"]
    pub fn stlp_std_priv___get_fdigit(arg1: *mut u32, arg2: *const u32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv19__get_fdigit_or_sepERwwPKw"]
    pub fn stlp_std_priv___get_fdigit_or_sep(arg1: *mut u32, arg2: u32, arg3: *const u32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv21_Initialize_get_floatERKNS_5ctypeIwEERwS5_S5_S5_Pw"]
    pub fn stlp_std_priv__Initialize_get_float(
        arg1: *const stlp_std_ctype,
        arg2: *mut u32,
        arg3: *mut u32,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut u32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__string_to_floatERKNS0_16__basic_iostringIcEERf"]
    pub fn stlp_std_priv___string_to_float(arg1: *const stlp_std_priv____iostring, arg2: *mut f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__string_to_floatERKNS0_16__basic_iostringIcEERd"]
    pub fn stlp_std_priv___string_to_float1(arg1: *const stlp_std_priv____iostring, arg2: *mut f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__string_to_floatERKNS0_16__basic_iostringIcEERe"]
    pub fn stlp_std_priv___string_to_float2(arg1: *const stlp_std_priv____iostring, arg2: *mut f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv17__digit_val_tableEj"]
    pub fn stlp_std_priv___digit_val_table(arg1: ::std::os::raw::c_uint)
        -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std4priv14__narrow_atomsEv"]
    pub fn stlp_std_priv___narrow_atoms() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Is_not_wspace {
    pub _M_ctype: *const [u8; 0usize],
}
pub type stlp_std_priv__Is_not_wspace_argument_type = [u8; 0usize];
pub type stlp_std_priv__Is_not_wspace_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Is_wspace_null {
    pub _M_ctype: *const [u8; 0usize],
}
pub type stlp_std_priv__Is_wspace_null_argument_type = [u8; 0usize];
pub type stlp_std_priv__Is_wspace_null_result_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Scan_for_wspace {
    pub _M_ctype: *const [u8; 0usize],
}
pub type stlp_std_priv__Scan_for_wspace_char_type = [u8; 0usize];
pub type stlp_std_priv__Scan_for_wspace_first_argument_type =
    *mut stlp_std_priv___Scan_for_wspace_char_type;
pub type stlp_std_priv__Scan_for_wspace_second_argument_type =
    *mut stlp_std_priv___Scan_for_wspace_char_type;
pub type stlp_std_priv__Scan_for_wspace_result_type =
    *mut stlp_std_priv___Scan_for_wspace_char_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Scan_wspace_null {
    pub _M_ctype: *const [u8; 0usize],
}
pub type stlp_std_priv__Scan_wspace_null_char_type = [u8; 0usize];
pub type stlp_std_priv__Scan_wspace_null_first_argument_type =
    *mut stlp_std_priv___Scan_wspace_null_char_type;
pub type stlp_std_priv__Scan_wspace_null_second_argument_type =
    *mut stlp_std_priv___Scan_wspace_null_char_type;
pub type stlp_std_priv__Scan_wspace_null_result_type =
    *mut stlp_std_priv___Scan_wspace_null_char_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Scan_for_not_wspace {
    pub _M_ctype: *const [u8; 0usize],
}
pub type stlp_std_priv__Scan_for_not_wspace_char_type = [u8; 0usize];
pub type stlp_std_priv__Scan_for_not_wspace_first_argument_type =
    *mut stlp_std_priv___Scan_for_not_wspace_char_type;
pub type stlp_std_priv__Scan_for_not_wspace_second_argument_type =
    *mut stlp_std_priv___Scan_for_not_wspace_char_type;
pub type stlp_std_priv__Scan_for_not_wspace_result_type =
    *mut stlp_std_priv___Scan_for_not_wspace_char_type;
#[repr(C)]
pub struct stlp_std_priv__Scan_for_char_val {
    pub _M_val: stlp_std_priv___Scan_for_char_val_char_type,
}
pub type stlp_std_priv__Scan_for_char_val_char_type = [u8; 0usize];
pub type stlp_std_priv__Scan_for_char_val_first_argument_type =
    *mut stlp_std_priv___Scan_for_char_val_char_type;
pub type stlp_std_priv__Scan_for_char_val_second_argument_type =
    *mut stlp_std_priv___Scan_for_char_val_char_type;
pub type stlp_std_priv__Scan_for_char_val_result_type =
    *mut stlp_std_priv___Scan_for_char_val_char_type;
#[repr(C)]
pub struct stlp_std_priv__Scan_for_int_val {
    pub _M_val: stlp_std_priv___Scan_for_int_val_int_type,
}
pub type stlp_std_priv__Scan_for_int_val_char_type = [u8; 0usize];
pub type stlp_std_priv__Scan_for_int_val_int_type = [u8; 0usize];
pub type stlp_std_priv__Scan_for_int_val_first_argument_type =
    *mut stlp_std_priv___Scan_for_int_val_char_type;
pub type stlp_std_priv__Scan_for_int_val_second_argument_type =
    *mut stlp_std_priv___Scan_for_int_val_char_type;
pub type stlp_std_priv__Scan_for_int_val_result_type =
    *mut stlp_std_priv___Scan_for_int_val_char_type;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Vector_base<_Tp, _Alloc> {
    pub _M_start: stlp_std_priv___Vector_base_pointer<_Tp>,
    pub _M_finish: stlp_std_priv___Vector_base_pointer<_Tp>,
    pub _M_end_of_storage: stlp_std_priv___Vector_base__AllocProxy<_Tp, _Alloc>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type stlp_std_priv__Vector_base__Self<_Tp, _Alloc> = stlp_std_priv___Vector_base<_Tp, _Alloc>;
pub type stlp_std_priv__Vector_base_allocator_type<_Alloc> = _Alloc;
pub type stlp_std_priv__Vector_base_pointer<_Tp> = *mut _Tp;
pub type stlp_std_priv__Vector_base__AllocProxy<_Tp, _Alloc> = stlp_std_priv___STLP_alloc_proxy<
    stlp_std_priv___Vector_base_pointer<_Tp>,
    stlp_std_priv___Vector_base_allocator_type<_Alloc>,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Bit_reference {
    pub _M_p: *mut ::std::os::raw::c_uint,
    pub _M_mask: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_stlp_std_priv__Bit_reference() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv__Bit_reference>(),
        8usize,
        concat!("Size of: ", stringify!(stlp_std_priv__Bit_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv__Bit_reference>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_priv__Bit_reference))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Bit_reference>()))._M_p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Bit_reference),
            "::",
            stringify!(_M_p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Bit_reference>()))._M_mask as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Bit_reference),
            "::",
            stringify!(_M_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Bit_iterator_base {
    pub _M_p: *mut ::std::os::raw::c_uint,
    pub _M_offset: ::std::os::raw::c_uint,
}
pub type stlp_std_priv__Bit_iterator_base_difference_type = isize;
#[test]
fn bindgen_test_layout_stlp_std_priv__Bit_iterator_base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv__Bit_iterator_base>(),
        8usize,
        concat!("Size of: ", stringify!(stlp_std_priv__Bit_iterator_base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv__Bit_iterator_base>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(stlp_std_priv__Bit_iterator_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Bit_iterator_base>()))._M_p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Bit_iterator_base),
            "::",
            stringify!(_M_p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Bit_iterator_base>()))._M_offset as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Bit_iterator_base),
            "::",
            stringify!(_M_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Bit_iter {
    pub _base: stlp_std_priv___Bit_iterator_base,
}
pub type stlp_std_priv__Bit_iter_reference<_Ref> = _Ref;
pub type stlp_std_priv__Bit_iter_pointer<_Ptr> = _Ptr;
pub type stlp_std_priv__Bit_iter__Self = stlp_std_priv___Bit_iter;
pub type stlp_std_priv__Bit_iter_iterator_category = stlp_std_random_access_iterator_tag;
pub type stlp_std_priv__Bit_iter_value_type = bool;
pub type stlp_std_priv__Bit_iter_difference_type = isize;
pub type stlp_std_priv__Bit_iter_size_type = usize;
pub type stlp_std_priv__Bit_const_iterator = stlp_std_priv___Bit_iter;
pub type stlp_std_priv__Bit_iterator = stlp_std_priv___Bit_iter;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Bvector_base {
    pub _M_start: stlp_std_priv___Bit_iterator,
    pub _M_finish: stlp_std_priv___Bit_iterator,
    pub _M_end_of_storage: stlp_std_priv___STLP_alloc_proxy<
        stlp_std_priv___Bvector_base___chunk_type,
        stlp_std_priv___Bvector_base___chunk_allocator_type,
    >,
}
pub type stlp_std_priv__Bvector_base__Self = stlp_std_priv___Bvector_base;
pub type stlp_std_priv__Bvector_base_allocator_type<_Alloc> = _Alloc;
pub type stlp_std_priv__Bvector_base___chunk_type = ::std::os::raw::c_uint;
pub type stlp_std_priv__Bvector_base___chunk_allocator_type = stlp_std__Alloc_traits;
pub type stlp_std_priv__Rb_tree_Color_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_tree_node_base {
    pub _M_color: stlp_std_priv___Rb_tree_node_base__Color_type,
    pub _M_parent: stlp_std_priv___Rb_tree_node_base__Base_ptr,
    pub _M_left: stlp_std_priv___Rb_tree_node_base__Base_ptr,
    pub _M_right: stlp_std_priv___Rb_tree_node_base__Base_ptr,
}
pub type stlp_std_priv__Rb_tree_node_base__Color_type = stlp_std_priv___Rb_tree_Color_type;
pub type stlp_std_priv__Rb_tree_node_base__Base_ptr = *mut stlp_std_priv___Rb_tree_node_base;
#[test]
fn bindgen_test_layout_stlp_std_priv__Rb_tree_node_base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv__Rb_tree_node_base>(),
        16usize,
        concat!("Size of: ", stringify!(stlp_std_priv__Rb_tree_node_base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv__Rb_tree_node_base>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(stlp_std_priv__Rb_tree_node_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Rb_tree_node_base>()))._M_color as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Rb_tree_node_base),
            "::",
            stringify!(_M_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Rb_tree_node_base>()))._M_parent as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Rb_tree_node_base),
            "::",
            stringify!(_M_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Rb_tree_node_base>()))._M_left as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Rb_tree_node_base),
            "::",
            stringify!(_M_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Rb_tree_node_base>()))._M_right as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Rb_tree_node_base),
            "::",
            stringify!(_M_right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_tree_node<_Value> {
    pub _base: stlp_std_priv___Rb_tree_node_base,
    pub _M_value_field: _Value,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_global {
    pub _address: u8,
}
pub type stlp_std_priv__Rb_global__Base_ptr = *mut stlp_std_priv___Rb_tree_node_base;
pub type stlp_std_priv__Rb_global_inst = stlp_std_priv___Rb_global;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_tree_base_iterator {
    pub _M_node: stlp_std_priv___Rb_tree_base_iterator__Base_ptr,
}
pub type stlp_std_priv__Rb_tree_base_iterator__Base_ptr = *mut stlp_std_priv___Rb_tree_node_base;
pub type stlp_std_priv__Rb_tree_base_iterator_iterator_category =
    stlp_std_bidirectional_iterator_tag;
pub type stlp_std_priv__Rb_tree_base_iterator_difference_type = isize;
#[test]
fn bindgen_test_layout_stlp_std_priv__Rb_tree_base_iterator() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv__Rb_tree_base_iterator>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(stlp_std_priv__Rb_tree_base_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv__Rb_tree_base_iterator>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(stlp_std_priv__Rb_tree_base_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_priv__Rb_tree_base_iterator>()))._M_node as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_priv__Rb_tree_base_iterator),
            "::",
            stringify!(_M_node)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_tree_iterator {
    pub _base: stlp_std_priv___Rb_tree_base_iterator,
}
pub type stlp_std_priv__Rb_tree_iterator_value_type<_Value> = _Value;
pub type stlp_std_priv__Rb_tree_iterator_reference = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_iterator_pointer = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_iterator__Self = stlp_std_priv___Rb_tree_iterator;
pub type stlp_std_priv__Rb_tree_iterator__Base_ptr = *mut stlp_std_priv___Rb_tree_node_base;
pub type stlp_std_priv__Rb_tree_iterator__Link_type<_Value> =
    *mut stlp_std_priv___Rb_tree_node<_Value>;
pub type stlp_std_priv__Rb_tree_iterator__NonConstTraits = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_iterator_iterator = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_iterator__ConstTraits = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_iterator_const_iterator = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__Rb_tree_base {
    pub _M_header: stlp_std_priv___Rb_tree_base__AllocProxy,
}
pub type stlp_std_priv__Rb_tree_base__Node_base = stlp_std_priv___Rb_tree_node_base;
pub type stlp_std_priv__Rb_tree_base__Node<_Tp> = stlp_std_priv___Rb_tree_node<_Tp>;
pub type stlp_std_priv__Rb_tree_base_allocator_type<_Alloc> = _Alloc;
pub type stlp_std_priv__Rb_tree_base__Self = stlp_std_priv___Rb_tree_base;
pub type stlp_std_priv__Rb_tree_base__M_node_allocator_type = stlp_std__Alloc_traits;
pub type stlp_std_priv__Rb_tree_base__AllocProxy = stlp_std_priv___STLP_alloc_proxy<
    stlp_std_priv___Rb_tree_base__Node_base,
    stlp_std_priv___Rb_tree_base__M_node_allocator_type,
>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_priv__Rb_tree<_Compare> {
    pub _base: stlp_std_priv___Rb_tree_base,
    pub _M_node_count: stlp_std_priv___Rb_tree_size_type,
    pub _M_key_compare: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type stlp_std_priv__Rb_tree__Base = stlp_std_priv___Rb_tree_base;
pub type stlp_std_priv__Rb_tree__Self<_Compare> = stlp_std_priv___Rb_tree<_Compare>;
pub type stlp_std_priv__Rb_tree__Base_ptr = *mut stlp_std_priv___Rb_tree_node_base;
pub type stlp_std_priv__Rb_tree__Node<_Value> = stlp_std_priv___Rb_tree_node<_Value>;
pub type stlp_std_priv__Rb_tree__Link_type<_Value> = *mut stlp_std_priv___Rb_tree__Node<_Value>;
pub type stlp_std_priv__Rb_tree__Color_type = stlp_std_priv___Rb_tree_Color_type;
pub type stlp_std_priv__Rb_tree_key_type<_Key> = _Key;
pub type stlp_std_priv__Rb_tree_value_type<_Value> = _Value;
pub type stlp_std_priv__Rb_tree_pointer = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_const_pointer<_Value> =
    *const stlp_std_priv___Rb_tree_value_type<_Value>;
pub type stlp_std_priv__Rb_tree_reference = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_const_reference<_Value> =
    *const stlp_std_priv___Rb_tree_value_type<_Value>;
pub type stlp_std_priv__Rb_tree_size_type = usize;
pub type stlp_std_priv__Rb_tree_difference_type = isize;
pub type stlp_std_priv__Rb_tree__Iterator_category = stlp_std_bidirectional_iterator_tag;
pub type stlp_std_priv__Rb_tree_allocator_type = stlp_std_priv___Rb_tree__Base;
pub type stlp_std_priv__Rb_tree__NonConstTraits = [u8; 0usize];
pub type stlp_std_priv__Rb_tree__ConstTraits = [u8; 0usize];
pub type stlp_std_priv__Rb_tree_const_iterator = stlp_std_priv___Rb_tree_iterator;
pub type stlp_std_priv__Rb_tree_const_reverse_iterator =
    stlp_std_reverse_iterator<stlp_std_priv___Rb_tree_const_iterator>;
pub type stlp_std_priv__Rb_tree_reverse_iterator =
    stlp_std_reverse_iterator<stlp_std_priv___Rb_tree_iterator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__ConstSetTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__ConstSetTraitsT__ConstTraits = stlp_std_priv___ConstSetTraitsT;
pub type stlp_std_priv__ConstSetTraitsT__NonConstTraits = stlp_std_priv___SetTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__SetTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__SetTraitsT__ConstTraits = stlp_std_priv___ConstSetTraitsT;
pub type stlp_std_priv__SetTraitsT__NonConstTraits = stlp_std_priv___SetTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__ConstMultisetTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__ConstMultisetTraitsT__ConstTraits = stlp_std_priv___ConstMultisetTraitsT;
pub type stlp_std_priv__ConstMultisetTraitsT__NonConstTraits = stlp_std_priv___MultisetTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__MultisetTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__MultisetTraitsT__ConstTraits = stlp_std_priv___ConstMultisetTraitsT;
pub type stlp_std_priv__MultisetTraitsT__NonConstTraits = stlp_std_priv___MultisetTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__ConstMapTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__ConstMapTraitsT__ConstTraits = stlp_std_priv___ConstMapTraitsT;
pub type stlp_std_priv__ConstMapTraitsT__NonConstTraits = stlp_std_priv___MapTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__MapTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__MapTraitsT__ConstTraits = stlp_std_priv___ConstMapTraitsT;
pub type stlp_std_priv__MapTraitsT__NonConstTraits = stlp_std_priv___MapTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__ConstMultimapTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__ConstMultimapTraitsT__ConstTraits = stlp_std_priv___ConstMultimapTraitsT;
pub type stlp_std_priv__ConstMultimapTraitsT__NonConstTraits = stlp_std_priv___MultimapTraitsT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_priv__MultimapTraitsT {
    pub _address: u8,
}
pub type stlp_std_priv__MultimapTraitsT__ConstTraits = stlp_std_priv___ConstMultimapTraitsT;
pub type stlp_std_priv__MultimapTraitsT__NonConstTraits = stlp_std_priv___MultimapTraitsT;
pub type stlp_std___bool2type__Ret = stlp_std___true_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___type2bool {
    pub _address: u8,
}
pub const stlp_std___type2bool__Ret: stlp_std___type2bool__bindgen_ty_1 = 0;
pub type stlp_std___type2bool__bindgen_ty_1 = i32;
#[test]
fn __bindgen_test_layout_stlp_std___type2bool_open0_stlp_std___true_type_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type2bool>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type2bool)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type2bool>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type2bool)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type2bool_open0_stlp_std___false_type_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type2bool>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type2bool)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type2bool>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type2bool)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Not {
    pub _address: u8,
}
pub type stlp_std__Not__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std__Not_open0_stlp_std___false_type_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Not>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__Not)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Not>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__Not)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Land2 {
    pub _address: u8,
}
pub type stlp_std__Land2__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std__Land2_open0_stlp_std___true_type_stlp_std___true_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Land2>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__Land2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Land2>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__Land2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Land3 {
    pub _address: u8,
}
pub type stlp_std__Land3__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std__Land3_open0_stlp_std___true_type_stlp_std___true_type_stlp_std___true_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Land3>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__Land3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Land3>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__Land3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Lor2 {
    pub _address: u8,
}
pub type stlp_std__Lor2__Ret = stlp_std___true_type;
#[test]
fn __bindgen_test_layout_stlp_std__Lor2_open0_stlp_std___false_type_stlp_std___false_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Lor2>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__Lor2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Lor2>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__Lor2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Lor3 {
    pub _address: u8,
}
pub type stlp_std__Lor3__Ret = stlp_std___true_type;
#[test]
fn __bindgen_test_layout_stlp_std__Lor3_open0_stlp_std___false_type_stlp_std___false_type_stlp_std___false_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Lor3>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__Lor3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Lor3>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__Lor3)
        )
    );
}
pub type stlp_std___select__Ret<_Tp1> = _Tp1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__NoVolatilePointerShim {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std__NoVolatilePointerShim() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__NoVolatilePointerShim>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std__NoVolatilePointerShim))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__NoVolatilePointerShim>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std__NoVolatilePointerShim))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std22_NoVolatilePointerShimC1EPKv"]
    pub fn stlp_std__NoVolatilePointerShim__NoVolatilePointerShim(
        this: *mut stlp_std__NoVolatilePointerShim,
        arg1: *const ::std::os::raw::c_void,
    );
}
impl stlp_std__NoVolatilePointerShim {
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std__NoVolatilePointerShim__NoVolatilePointerShim(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std14_IsCopyableFunEbz"]
    pub fn stlp_std__IsCopyableFun(arg1: bool, ...) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Copyable {
    pub _address: u8,
}
pub const stlp_std__Copyable__Ret: stlp_std__Copyable__bindgen_ty_1 = 0;
pub type stlp_std__Copyable__bindgen_ty_1 = i32;
pub type stlp_std__Copyable__RetT = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__AreCopyable {
    pub _address: u8,
}
pub const stlp_std__AreCopyable__Same: stlp_std__AreCopyable__bindgen_ty_1 = 0;
pub type stlp_std__AreCopyable__bindgen_ty_1 = i32;
pub type stlp_std__AreCopyable__Ret = stlp_std__Copyable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__AreSameTypes {
    pub _address: u8,
}
pub const stlp_std__AreSameTypes__Same: stlp_std__AreSameTypes__bindgen_ty_1 = 0;
pub type stlp_std__AreSameTypes__bindgen_ty_1 = i32;
pub type stlp_std__AreSameTypes__Ret = stlp_std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__ConversionHelper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsConvertible {
    pub _address: u8,
}
pub type stlp_std__IsConvertible__H = stlp_std__ConversionHelper;
pub const stlp_std__IsConvertible_value: stlp_std__IsConvertible__bindgen_ty_1 = 0;
pub type stlp_std__IsConvertible__bindgen_ty_1 = i32;
pub type stlp_std__IsConvertible__Ret = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsCVConvertible {
    pub _address: u8,
}
pub type stlp_std__IsCVConvertible__H = stlp_std__ConversionHelper;
pub const stlp_std__IsCVConvertible_value: stlp_std__IsCVConvertible__bindgen_ty_1 = 0;
pub type stlp_std__IsCVConvertible__bindgen_ty_1 = i32;
pub type stlp_std__IsCVConvertible__Ret = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsIntegral {
    pub _address: u8,
}
pub type stlp_std__IsIntegral__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsIntegral_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsIntegral>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsIntegral)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsRational {
    pub _address: u8,
}
pub type stlp_std__IsRational__Ret = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std__IsRational_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsRational_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std__IsRational_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__IsRational>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std__IsRational)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___type_traits_aux {
    pub _address: u8,
}
pub type stlp_std___type_traits_aux_has_trivial_default_constructor = stlp_std___false_type;
pub type stlp_std___type_traits_aux_has_trivial_copy_constructor = stlp_std___false_type;
pub type stlp_std___type_traits_aux_has_trivial_assignment_operator = stlp_std___false_type;
pub type stlp_std___type_traits_aux_has_trivial_destructor = stlp_std___false_type;
pub type stlp_std___type_traits_aux_is_POD_type = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_aux_open0_stlp_std___false_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits_aux>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits_aux)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits_aux>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits_aux)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_aux_open0_stlp_std___true_type_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits_aux>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits_aux)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits_aux>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits_aux)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsRef {
    pub _address: u8,
}
pub type stlp_std__IsRef__Ret = stlp_std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsPtr {
    pub _address: u8,
}
pub type stlp_std__IsPtr__Ret = stlp_std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___type_traits {
    pub _address: u8,
}
pub type stlp_std___type_traits_this_dummy_member_must_be_first = stlp_std___true_type;
pub type stlp_std___type_traits_has_trivial_default_constructor = stlp_std___false_type;
pub type stlp_std___type_traits_has_trivial_copy_constructor = stlp_std___false_type;
pub type stlp_std___type_traits_has_trivial_assignment_operator = stlp_std___false_type;
pub type stlp_std___type_traits_has_trivial_destructor = stlp_std___false_type;
pub type stlp_std___type_traits_is_POD_type = stlp_std___false_type;
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_bool_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_bool_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_bool_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_signed_char_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_unsigned_char_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_unsigned_char_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_wchar_t_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_unsigned_short_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_unsigned_short_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_unsigned_int_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_unsigned_long_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_unsigned_long_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_volatile_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_const_volatile_long_double_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsCVConvertibleIf {
    pub _address: u8,
}
pub type stlp_std__IsCVConvertibleIf__Ret = stlp_std__IsCVConvertible;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__TrivialNativeTypeCopy {
    pub _address: u8,
}
pub type stlp_std__TrivialNativeTypeCopy__Ptr1 = stlp_std__IsPtr;
pub type stlp_std__TrivialNativeTypeCopy__Ptr2 = stlp_std__IsPtr;
pub type stlp_std__TrivialNativeTypeCopy__BothPtrs = stlp_std__Land2;
pub type stlp_std__TrivialNativeTypeCopy__Convertible = stlp_std__IsCVConvertibleIf;
pub type stlp_std__TrivialNativeTypeCopy__Trivial1 = stlp_std__Land2;
pub type stlp_std__TrivialNativeTypeCopy__SameSize = u8;
pub type stlp_std__TrivialNativeTypeCopy__Int1 = stlp_std__IsIntegral;
pub type stlp_std__TrivialNativeTypeCopy__Int2 = stlp_std__IsIntegral;
pub type stlp_std__TrivialNativeTypeCopy__BothInts = stlp_std__Land2;
pub type stlp_std__TrivialNativeTypeCopy__Rat1 = stlp_std__IsRational;
pub type stlp_std__TrivialNativeTypeCopy__Rat2 = stlp_std__IsRational;
pub type stlp_std__TrivialNativeTypeCopy__BothRats = stlp_std__Land2;
pub type stlp_std__TrivialNativeTypeCopy__BothNatives = stlp_std__Lor2;
pub type stlp_std__TrivialNativeTypeCopy__Trivial2 = stlp_std__Land2;
pub type stlp_std__TrivialNativeTypeCopy__Ret = stlp_std__Lor2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__TrivialCopy {
    pub _address: u8,
}
pub type stlp_std__TrivialCopy__NativeRet = stlp_std__TrivialNativeTypeCopy;
pub type stlp_std__TrivialCopy__Tr1 = stlp_std___type_traits;
pub type stlp_std__TrivialCopy__Tr2 = stlp_std__AreCopyable;
pub type stlp_std__TrivialCopy__UserRet = stlp_std__Land2;
pub type stlp_std__TrivialCopy__Ret = stlp_std__Lor2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__TrivialUCopy {
    pub _address: u8,
}
pub type stlp_std__TrivialUCopy__NativeRet = stlp_std__TrivialNativeTypeCopy;
pub type stlp_std__TrivialUCopy__Tr1 = stlp_std___type_traits;
pub type stlp_std__TrivialUCopy__Tr2 = stlp_std__AreCopyable;
pub type stlp_std__TrivialUCopy__UserRet = stlp_std__Land2;
pub type stlp_std__TrivialUCopy__Ret = stlp_std__Lor2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__DefaultZeroValue {
    pub _address: u8,
}
pub type stlp_std__DefaultZeroValue__Tr1 = stlp_std__IsIntegral;
pub type stlp_std__DefaultZeroValue__Tr2 = stlp_std__IsRational;
pub type stlp_std__DefaultZeroValue__Tr3 = stlp_std__IsPtr;
pub type stlp_std__DefaultZeroValue__Ret = stlp_std__Lor3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__TrivialInit {
    pub _address: u8,
}
pub type stlp_std__TrivialInit__Tr1 = stlp_std___type_traits;
pub type stlp_std__TrivialInit__Tr2 = stlp_std__DefaultZeroValue;
pub type stlp_std__TrivialInit__Tr3 = stlp_std__Not;
pub type stlp_std__TrivialInit__Ret = stlp_std__Land2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsPtrType {
    pub _address: u8,
}
pub type stlp_std__IsPtrType__Type = stlp_std__IsPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsRefType {
    pub _address: u8,
}
pub type stlp_std__IsRefType__Type = stlp_std__IsRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___call_traits {
    pub _address: u8,
}
pub type stlp_std___call_traits_const_param_type<_Tp> = *const _Tp;
pub type stlp_std___call_traits_param_type<_Tp> = *mut _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__BothPtrType {
    pub _address: u8,
}
pub type stlp_std__BothPtrType__IsPtr1 = stlp_std__IsPtr;
pub type stlp_std__BothPtrType__IsPtr2 = stlp_std__IsPtr;
pub type stlp_std__BothPtrType__Ret = stlp_std__Land2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__OKToSwap {
    pub _address: u8,
}
pub type stlp_std__OKToSwap__Same = stlp_std__AreSameTypes;
pub type stlp_std__OKToSwap__Type = stlp_std__Land3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__NegativeAnswer {
    pub _address: u8,
}
pub type stlp_std__NegativeAnswer__Ret = stlp_std___false_type;
#[test]
fn bindgen_test_layout_stlp_std__NegativeAnswer() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__NegativeAnswer>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std__NegativeAnswer))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__NegativeAnswer>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std__NegativeAnswer))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsPOD {
    pub _address: u8,
}
pub type stlp_std__IsPOD__Type = stlp_std___type_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__DefaultZeroValueQuestion {
    pub _address: u8,
}
pub type stlp_std__DefaultZeroValueQuestion__Ret = stlp_std__DefaultZeroValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___stlport_class {
    pub _address: u8,
}
pub type stlp_std___stlport_class__Type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsSTLportClass {
    pub _address: u8,
}
pub type stlp_std__IsSTLportClass__Ret = stlp_std__IsConvertible;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__TpWithState<_Tp> {
    pub _base: _Tp,
    pub _state: ::std::os::raw::c_int,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__IsStateless {
    pub _address: u8,
}
pub const stlp_std__IsStateless__Is: stlp_std__IsStateless__bindgen_ty_1 = 0;
pub type stlp_std__IsStateless__bindgen_ty_1 = i32;
pub type stlp_std__IsStateless__Ret = u8;
#[doc = "Partial move:"]
#[doc = "The source HAS to be a valid instance after the move!"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___move_source<_Tp> {
    pub _M_data: *mut _Tp,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
}
pub type stlp_std___move_source__Self<_Tp> = stlp_std___move_source<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___move_traits {
    pub _address: u8,
}
pub type stlp_std___move_traits_implemented = stlp_std___false_type;
pub type stlp_std___move_traits_complete = stlp_std___type_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_pair<_T1, _T2> {
    pub first: _T1,
    pub second: _T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
}
pub type stlp_std_pair_first_type<_T1> = _T1;
pub type stlp_std_pair_second_type<_T2> = _T2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_input_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_input_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_input_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_input_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_input_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_input_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_output_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_output_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_output_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_output_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_output_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_output_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_forward_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_forward_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_forward_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_forward_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_forward_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_forward_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_bidirectional_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_bidirectional_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_bidirectional_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_bidirectional_iterator_tag>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(stlp_std_bidirectional_iterator_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_random_access_iterator_tag {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_random_access_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_random_access_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_random_access_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_random_access_iterator_tag>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(stlp_std_random_access_iterator_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_iterator {
    pub _address: u8,
}
pub type stlp_std_iterator_iterator_category<_Category> = _Category;
pub type stlp_std_iterator_value_type<_Tp> = _Tp;
pub type stlp_std_iterator_difference_type<_Distance> = _Distance;
pub type stlp_std_iterator_pointer<_Pointer> = _Pointer;
pub type stlp_std_iterator_reference<_Reference> = _Reference;
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_iterator_traits {
    pub _address: u8,
}
pub type stlp_std_iterator_traits_iterator_category = [u8; 0usize];
pub type stlp_std_iterator_traits_value_type = [u8; 0usize];
pub type stlp_std_iterator_traits_difference_type = [u8; 0usize];
pub type stlp_std_iterator_traits_pointer = [u8; 0usize];
pub type stlp_std_iterator_traits_reference = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_input_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_output_iterator {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std_output_iterator() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_output_iterator>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_output_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_output_iterator>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_output_iterator))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_forward_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_bidirectional_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_random_access_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Const_traits {
    pub _address: u8,
}
pub type stlp_std__Const_traits_value_type<_Tp> = _Tp;
pub type stlp_std__Const_traits_reference<_Tp> = *const _Tp;
pub type stlp_std__Const_traits_pointer<_Tp> = *const _Tp;
pub type stlp_std__Const_traits__ConstTraits = stlp_std__Const_traits;
pub type stlp_std__Const_traits__NonConstTraits = stlp_std__Nonconst_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Nonconst_traits {
    pub _address: u8,
}
pub type stlp_std__Nonconst_traits_value_type<_Tp> = _Tp;
pub type stlp_std__Nonconst_traits_reference<_Tp> = *mut _Tp;
pub type stlp_std__Nonconst_traits_pointer<_Tp> = *mut _Tp;
pub type stlp_std__Nonconst_traits__ConstTraits = stlp_std__Const_traits;
pub type stlp_std__Nonconst_traits__NonConstTraits = stlp_std__Nonconst_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Const_Const_traits {
    pub _address: u8,
}
pub type stlp_std__Const_Const_traits_value_type<_Tp> = _Tp;
pub type stlp_std__Const_Const_traits_reference<_Tp> = *const _Tp;
pub type stlp_std__Const_Const_traits_pointer<_Tp> = *const _Tp;
pub type stlp_std__Const_Const_traits__ConstTraits = stlp_std__Const_Const_traits;
pub type stlp_std__Const_Const_traits__NonConstTraits = stlp_std__Nonconst_Const_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Nonconst_Const_traits {
    pub _address: u8,
}
pub type stlp_std__Nonconst_Const_traits_value_type<_Tp> = _Tp;
pub type stlp_std__Nonconst_Const_traits_reference<_Tp> = *const _Tp;
pub type stlp_std__Nonconst_Const_traits_pointer<_Tp> = *const _Tp;
pub type stlp_std__Nonconst_Const_traits__ConstTraits = stlp_std__Const_Const_traits;
pub type stlp_std__Nonconst_Const_traits__NonConstTraits = stlp_std__Nonconst_Const_traits;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_unary_function {
    pub _address: u8,
}
pub type stlp_std_unary_function_argument_type<_Arg> = _Arg;
pub type stlp_std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_binary_function {
    pub _address: u8,
}
pub type stlp_std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type stlp_std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type stlp_std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_reverse_iterator<_Iterator> {
    pub current: _Iterator,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type stlp_std_reverse_iterator__Self<_Iterator> = stlp_std_reverse_iterator<_Iterator>;
pub type stlp_std_reverse_iterator_difference_type = stlp_std_iterator_traits;
pub type stlp_std_reverse_iterator_pointer = stlp_std_iterator_traits;
pub type stlp_std_reverse_iterator_reference = stlp_std_iterator_traits;
pub type stlp_std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_back_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type stlp_std_back_insert_iterator__Self<_Container> =
    stlp_std_back_insert_iterator<_Container>;
pub type stlp_std_back_insert_iterator_container_type<_Container> = _Container;
pub type stlp_std_back_insert_iterator_iterator_category = stlp_std_output_iterator_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_front_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type stlp_std_front_insert_iterator__Self<_Container> =
    stlp_std_front_insert_iterator<_Container>;
pub type stlp_std_front_insert_iterator_container_type<_Container> = _Container;
pub type stlp_std_front_insert_iterator_iterator_category = stlp_std_output_iterator_tag;
#[repr(C)]
pub struct stlp_std_insert_iterator<_Container> {
    pub container: *mut _Container,
    pub _M_iter: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
}
pub type stlp_std_insert_iterator__Self<_Container> = stlp_std_insert_iterator<_Container>;
pub type stlp_std_insert_iterator_container_type<_Container> = _Container;
pub type stlp_std_insert_iterator_iterator_category = stlp_std_output_iterator_tag;
pub type stlp_std___oom_handler_type = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___malloc_alloc {
    pub _address: u8,
}
pub type stlp_std___malloc_alloc_value_type = ::std::os::raw::c_char;
#[test]
fn bindgen_test_layout_stlp_std___malloc_alloc() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___malloc_alloc>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std___malloc_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___malloc_alloc>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std___malloc_alloc))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std14__malloc_alloc8allocateEj"]
    pub fn stlp_std___malloc_alloc_allocate(__n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std14__malloc_alloc18set_malloc_handlerEPFvvE"]
    pub fn stlp_std___malloc_alloc_set_malloc_handler(
        __f: stlp_std___oom_handler_type,
    ) -> stlp_std___oom_handler_type;
}
impl stlp_std___malloc_alloc {
    #[inline]
    pub unsafe fn allocate(__n: usize) -> *mut ::std::os::raw::c_void {
        stlp_std___malloc_alloc_allocate(__n)
    }
    #[inline]
    pub unsafe fn set_malloc_handler(
        __f: stlp_std___oom_handler_type,
    ) -> stlp_std___oom_handler_type {
        stlp_std___malloc_alloc_set_malloc_handler(__f)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___new_alloc {
    pub _address: u8,
}
pub type stlp_std___new_alloc_value_type = ::std::os::raw::c_char;
#[test]
fn bindgen_test_layout_stlp_std___new_alloc() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___new_alloc>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std___new_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___new_alloc>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std___new_alloc))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std___debug_alloc<_Alloc> {
    pub _base: _Alloc,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type stlp_std___debug_alloc___allocator_type<_Alloc> = _Alloc;
pub type stlp_std___debug_alloc_value_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___debug_alloc___alloc_header {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub _M_size: ::std::os::raw::c_ulong,
}
impl stlp_std___debug_alloc___alloc_header {
    #[inline]
    pub fn __magic(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___magic(&mut self, val: usize) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __type_size(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___type_size(&mut self, val: usize) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __magic: usize,
        __type_size: usize,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let __magic: u32 = unsafe { ::std::mem::transmute(__magic) };
            __magic as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let __type_size: u32 = unsafe { ::std::mem::transmute(__type_size) };
            __type_size as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const stlp_std___debug_alloc___pad: stlp_std___debug_alloc__bindgen_ty_1 = 0;
pub const stlp_std___debug_alloc___magic: stlp_std___debug_alloc__bindgen_ty_1 = 0;
pub const stlp_std___debug_alloc___deleted_magic: stlp_std___debug_alloc__bindgen_ty_1 = 0;
pub const stlp_std___debug_alloc___shred_byte: stlp_std___debug_alloc__bindgen_ty_1 = 0;
pub type stlp_std___debug_alloc__bindgen_ty_1 = i32;
pub const stlp_std___debug_alloc___extra_before: stlp_std___debug_alloc__bindgen_ty_2 = 0;
pub const stlp_std___debug_alloc___extra_after: stlp_std___debug_alloc__bindgen_ty_2 = 0;
pub type stlp_std___debug_alloc__bindgen_ty_2 = i32;
pub const _MAX_BYTES: stlp_std__bindgen_ty_1 = 128;
pub type stlp_std__bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___node_alloc {
    pub _address: u8,
}
pub type stlp_std___node_alloc_value_type = ::std::os::raw::c_char;
#[test]
fn bindgen_test_layout_stlp_std___node_alloc() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___node_alloc>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std___node_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___node_alloc>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std___node_alloc))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Alloc_traits {
    pub _address: u8,
}
pub type stlp_std__Alloc_traits__Orig<_Allocator> = _Allocator;
pub type stlp_std__Alloc_traits__Rebind_type = [u8; 0usize];
pub type stlp_std__Alloc_traits_allocator_type = [u8; 0usize];
pub type stlp_std___alloc_type = stlp_std___malloc_alloc;
pub type stlp_std___sgi_alloc = stlp_std___alloc_type;
pub type stlp_std___single_client_alloc = stlp_std___sgi_alloc;
pub type stlp_std___multithreaded_alloc = stlp_std___sgi_alloc;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_allocator {
    pub _address: u8,
}
pub type stlp_std_allocator_value_type<_Tp> = _Tp;
pub type stlp_std_allocator_pointer<_Tp> = *mut _Tp;
pub type stlp_std_allocator_const_pointer<_Tp> = *const _Tp;
pub type stlp_std_allocator_reference<_Tp> = *mut _Tp;
pub type stlp_std_allocator_const_reference<_Tp> = *const _Tp;
pub type stlp_std_allocator_size_type = usize;
pub type stlp_std_allocator_difference_type = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_allocator_rebind {
    pub _address: u8,
}
pub type stlp_std_allocator_rebind_other = stlp_std_allocator;
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type stlp_std_streamoff = off64_t;
pub type stlp_std_streamsize = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_fpos<_StateT> {
    pub _M_pos: stlp_std_streamoff,
    pub _M_st: _StateT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
}
pub type stlp_std_streampos = stlp_std_fpos<mbstate_t>;
pub type stlp_std_wstreampos = stlp_std_fpos<mbstate_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std___char_traits_base {
    pub _address: u8,
}
pub type stlp_std___char_traits_base_char_type<_CharT> = _CharT;
pub type stlp_std___char_traits_base_int_type<_IntT> = _IntT;
pub type stlp_std___char_traits_base_off_type = stlp_std_streamoff;
pub type stlp_std___char_traits_base_pos_type = stlp_std_streampos;
pub type stlp_std___char_traits_base_state_type = mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_char_traits {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_stringbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_istringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_ostringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_stringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_basic_fstream {
    pub _address: u8,
}
pub type stlp_std_ios = stlp_std_basic_ios<::std::os::raw::c_char>;
pub type stlp_std_wios = stlp_std_basic_ios<u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_collate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_collate_byname {
    pub _address: u8,
}
pub type stlp_std_istream = stlp_std_basic_istream<::std::os::raw::c_char>;
pub type stlp_std_ostream = stlp_std_basic_ostream<::std::os::raw::c_char>;
pub type stlp_std_iostream = stlp_std_basic_iostream<::std::os::raw::c_char>;
pub type stlp_std_streambuf = stlp_std_basic_streambuf<::std::os::raw::c_char>;
pub type stlp_std_stringbuf = stlp_std_basic_stringbuf;
pub type stlp_std_istringstream = stlp_std_basic_istringstream;
pub type stlp_std_ostringstream = stlp_std_basic_ostringstream;
pub type stlp_std_stringstream = stlp_std_basic_stringstream;
pub type stlp_std_filebuf = stlp_std_basic_filebuf;
pub type stlp_std_ifstream = stlp_std_basic_ifstream;
pub type stlp_std_ofstream = stlp_std_basic_ofstream;
pub type stlp_std_fstream = stlp_std_basic_fstream;
pub type stlp_std_wstreambuf = stlp_std_basic_streambuf<u32>;
pub type stlp_std_wistream = stlp_std_basic_istream<u32>;
pub type stlp_std_wostream = stlp_std_basic_ostream<u32>;
pub type stlp_std_wiostream = stlp_std_basic_iostream<u32>;
pub type stlp_std_wstringbuf = stlp_std_basic_stringbuf;
pub type stlp_std_wistringstream = stlp_std_basic_istringstream;
pub type stlp_std_wostringstream = stlp_std_basic_ostringstream;
pub type stlp_std_wstringstream = stlp_std_basic_stringstream;
pub type stlp_std_wfilebuf = stlp_std_basic_filebuf;
pub type stlp_std_wifstream = stlp_std_basic_ifstream;
pub type stlp_std_wofstream = stlp_std_basic_ofstream;
pub type stlp_std_wfstream = stlp_std_basic_fstream;
pub type stlp_std_string = stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>;
pub type stlp_std_wstring = stlp_std_basic_string<u32, stlp_std_allocator>;
#[repr(C)]
pub struct stlp_std_basic_string<_CharT, _Alloc> {
    pub _base: stlp_std_priv___String_base<_CharT, _Alloc>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type stlp_std_basic_string__Base<_CharT, _Alloc> = stlp_std_priv___String_base<_CharT, _Alloc>;
pub type stlp_std_basic_string__Self<_CharT, _Alloc> = stlp_std_basic_string<_CharT, _Alloc>;
pub type stlp_std_basic_string_value_type<_CharT> = _CharT;
pub type stlp_std_basic_string_traits_type<_Traits> = _Traits;
pub type stlp_std_basic_string_pointer<_CharT> = *mut stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_const_pointer<_CharT> =
    *const stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_reference<_CharT> = *mut stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_const_reference<_CharT> =
    *const stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_size_type<_CharT, _Alloc> =
    stlp_std_basic_string__Base<_CharT, _Alloc>;
pub type stlp_std_basic_string_difference_type = isize;
pub type stlp_std_basic_string__Iterator_category = stlp_std_random_access_iterator_tag;
pub type stlp_std_basic_string_const_iterator<_CharT> =
    *const stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_iterator<_CharT> = *mut stlp_std_basic_string_value_type<_CharT>;
pub type stlp_std_basic_string_const_reverse_iterator<_CharT> =
    stlp_std_reverse_iterator<stlp_std_basic_string_const_iterator<_CharT>>;
pub type stlp_std_basic_string_reverse_iterator<_CharT> =
    stlp_std_reverse_iterator<stlp_std_basic_string_iterator<_CharT>>;
pub type stlp_std_basic_string__Reserve_t = stlp_std_priv___String_reserve_t;
pub type stlp_std_basic_string_allocator_type<_CharT, _Alloc> =
    stlp_std_basic_string__Base<_CharT, _Alloc>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_less_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_negate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_logical_not {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_unary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
pub type stlp_std_unary_negate__Base = stlp_std_unary_function;
pub type stlp_std_unary_negate_argument_type = [u8; 0usize];
pub type stlp_std_unary_negate__ArgParamType = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_binary_negate<_Predicate> {
    pub _M_pred: _Predicate,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
}
pub type stlp_std_binary_negate__Base = stlp_std_binary_function;
pub type stlp_std_binary_negate_first_argument_type = [u8; 0usize];
pub type stlp_std_binary_negate_second_argument_type = [u8; 0usize];
pub type stlp_std_binary_negate__FstArgParamType = [u8; 0usize];
pub type stlp_std_binary_negate__SndArgParamType = [u8; 0usize];
#[repr(C)]
pub struct stlp_std_binder1st<_Operation> {
    pub op: _Operation,
    pub _M_value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
pub type stlp_std_binder1st__Base = stlp_std_unary_function;
pub type stlp_std_binder1st_argument_type = [u8; 0usize];
pub type stlp_std_binder1st_result_type = [u8; 0usize];
pub type stlp_std_binder1st__ArgParamType = [u8; 0usize];
pub type stlp_std_binder1st__ConstArgParamType = [u8; 0usize];
pub type stlp_std_binder1st__ValueParamType = [u8; 0usize];
#[repr(C)]
pub struct stlp_std_binder2nd<_Operation> {
    pub op: _Operation,
    pub value: [u8; 0usize],
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
}
pub type stlp_std_binder2nd__Base = stlp_std_unary_function;
pub type stlp_std_binder2nd_argument_type = [u8; 0usize];
pub type stlp_std_binder2nd_result_type = [u8; 0usize];
pub type stlp_std_binder2nd__ArgParamType = [u8; 0usize];
pub type stlp_std_binder2nd__ConstArgParamType = [u8; 0usize];
pub type stlp_std_binder2nd__ValueParamType = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_unary_compose<_Operation1, _Operation2> {
    pub _M_fn1: _Operation1,
    pub _M_fn2: _Operation2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation2>>,
}
pub type stlp_std_unary_compose__Base = stlp_std_unary_function;
pub type stlp_std_unary_compose_argument_type = [u8; 0usize];
pub type stlp_std_unary_compose_result_type = [u8; 0usize];
pub type stlp_std_unary_compose__ArgParamType = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_binary_compose<_Operation1, _Operation2, _Operation3> {
    pub _M_fn1: _Operation1,
    pub _M_fn2: _Operation2,
    pub _M_fn3: _Operation3,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation3>>,
}
pub type stlp_std_binary_compose__Base = stlp_std_unary_function;
pub type stlp_std_binary_compose_argument_type = [u8; 0usize];
pub type stlp_std_binary_compose_result_type = [u8; 0usize];
pub type stlp_std_binary_compose__ArgParamType = [u8; 0usize];
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_project1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_project2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_constant_void_fun<_Result> {
    pub _base: stlp_std_priv___Constant_void_fun<_Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_constant_unary_fun<_Result> {
    pub _base: stlp_std_priv___Constant_unary_fun<_Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_constant_binary_fun<_Result> {
    pub _base: stlp_std_priv___Constant_binary_fun<_Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
pub struct stlp_std_subtractive_rng {
    pub _M_table: [::std::os::raw::c_ulong; 55usize],
    pub _M_index1: ::std::os::raw::c_ulong,
    pub _M_index2: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_stlp_std_subtractive_rng() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_subtractive_rng>(),
        228usize,
        concat!("Size of: ", stringify!(stlp_std_subtractive_rng))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_subtractive_rng>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_subtractive_rng))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_subtractive_rng>()))._M_table as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_subtractive_rng),
            "::",
            stringify!(_M_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_subtractive_rng>()))._M_index1 as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_subtractive_rng),
            "::",
            stringify!(_M_index1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_subtractive_rng>()))._M_index2 as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_subtractive_rng),
            "::",
            stringify!(_M_index2)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_mem_fun_t<_Ret> {
    pub _M_f: stlp_std_mem_fun_t___fun_type<_Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
pub type stlp_std_mem_fun_t___fun_type<_Ret> =
    ::std::option::Option<unsafe extern "C" fn() -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_const_mem_fun_t<_Ret> {
    pub _M_f: stlp_std_const_mem_fun_t___fun_type<_Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
pub type stlp_std_const_mem_fun_t___fun_type<_Ret> =
    ::std::option::Option<unsafe extern "C" fn() -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_mem_fun_ref_t<_Ret> {
    pub _M_f: stlp_std_mem_fun_ref_t___fun_type<_Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
pub type stlp_std_mem_fun_ref_t___fun_type<_Ret> =
    ::std::option::Option<unsafe extern "C" fn() -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_const_mem_fun_ref_t<_Ret> {
    pub _M_f: stlp_std_const_mem_fun_ref_t___fun_type<_Ret>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
}
pub type stlp_std_const_mem_fun_ref_t___fun_type<_Ret> =
    ::std::option::Option<unsafe extern "C" fn() -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: stlp_std_mem_fun1_t___fun_type<_Ret, _Arg>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
pub type stlp_std_mem_fun1_t___fun_type<_Ret, _Arg> =
    ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_const_mem_fun1_t<_Ret, _Arg> {
    pub _M_f: stlp_std_const_mem_fun1_t___fun_type<_Ret, _Arg>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
pub type stlp_std_const_mem_fun1_t___fun_type<_Ret, _Arg> =
    ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: stlp_std_mem_fun1_ref_t___fun_type<_Ret, _Arg>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
pub type stlp_std_mem_fun1_ref_t___fun_type<_Ret, _Arg> =
    ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _M_f: stlp_std_const_mem_fun1_ref_t___fun_type<_Ret, _Arg>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
}
pub type stlp_std_const_mem_fun1_ref_t___fun_type<_Ret, _Arg> =
    ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_pointer_to_unary_function<_Arg, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std25__stl_throw_runtime_errorEPKc"]
    pub fn stlp_std___stl_throw_runtime_error(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std23__stl_throw_range_errorEPKc"]
    pub fn stlp_std___stl_throw_range_error(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std24__stl_throw_out_of_rangeEPKc"]
    pub fn stlp_std___stl_throw_out_of_range(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std24__stl_throw_length_errorEPKc"]
    pub fn stlp_std___stl_throw_length_error(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std28__stl_throw_invalid_argumentEPKc"]
    pub fn stlp_std___stl_throw_invalid_argument(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std26__stl_throw_overflow_errorEPKc"]
    pub fn stlp_std___stl_throw_overflow_error(__msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}npos"]
    pub static stlp_std_npos: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_hash {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_ptr_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_ptr_const_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_hash_open0_ptr_void_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_hash>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_hash)
        )
    );
}
#[repr(C)]
pub struct stlp_std___Named_exception {
    pub _base: std_exception,
    pub _M_static_name: [::std::os::raw::c_char; 256usize],
    pub _M_name: *mut ::std::os::raw::c_char,
}
pub const stlp_std___Named_exception__S_bufsize: stlp_std___Named_exception__bindgen_ty_1 = 256;
pub type stlp_std___Named_exception__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_stlp_std___Named_exception() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___Named_exception>(),
        264usize,
        concat!("Size of: ", stringify!(stlp_std___Named_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___Named_exception>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std___Named_exception))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std___Named_exception>()))._M_static_name as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std___Named_exception),
            "::",
            stringify!(_M_static_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std___Named_exception>()))._M_name as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std___Named_exception),
            "::",
            stringify!(_M_name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std17__Named_exceptionC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn stlp_std___Named_exception___Named_exception(
        this: *mut stlp_std___Named_exception,
        __str: *const stlp_std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std17__Named_exceptionC1ERKS0_"]
    pub fn stlp_std___Named_exception___Named_exception1(
        this: *mut stlp_std___Named_exception,
        arg1: *const stlp_std___Named_exception,
    );
}
impl stlp_std___Named_exception {
    #[inline]
    pub unsafe fn new(__str: *const stlp_std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std___Named_exception___Named_exception(&mut __bindgen_tmp, __str);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const stlp_std___Named_exception) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std___Named_exception___Named_exception1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK8stlp_std17__Named_exception4whatEv"]
    pub fn stlp_std___Named_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std17__Named_exceptionD1Ev"]
    pub fn stlp_std___Named_exception___Named_exception_destructor(
        this: *mut stlp_std___Named_exception,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__STLP_mutex_base {
    pub _M_lock: pthread_spinlock_t,
}
#[test]
fn bindgen_test_layout_stlp_std__STLP_mutex_base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__STLP_mutex_base>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std__STLP_mutex_base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__STLP_mutex_base>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std__STLP_mutex_base))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std__STLP_mutex_base>()))._M_lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std__STLP_mutex_base),
            "::",
            stringify!(_M_lock)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std__STLP_mutex {
    pub _base: stlp_std__STLP_mutex_base,
}
#[test]
fn bindgen_test_layout_stlp_std__STLP_mutex() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__STLP_mutex>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std__STLP_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__STLP_mutex>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std__STLP_mutex))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std__STLP_auto_lock {
    pub _M_lock: *mut stlp_std__STLP_mutex,
}
#[test]
fn bindgen_test_layout_stlp_std__STLP_auto_lock() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__STLP_auto_lock>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std__STLP_auto_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__STLP_auto_lock>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std__STLP_auto_lock))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std__STLP_auto_lock>()))._M_lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std__STLP_auto_lock),
            "::",
            stringify!(_M_lock)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Refcount_Base {
    pub _M_ref_count: __stl_atomic_t,
}
#[test]
fn bindgen_test_layout_stlp_std__Refcount_Base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__Refcount_Base>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std__Refcount_Base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__Refcount_Base>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std__Refcount_Base))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std__Refcount_Base>()))._M_ref_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std__Refcount_Base),
            "::",
            stringify!(_M_ref_count)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_S_swap_lock"]
    pub static mut stlp_std__Atomic_swap_struct__S_swap_lock: stlp_std__STLP_mutex;
}
extern "C" {
    #[link_name = "\u{1}_S_swap_lock"]
    pub static mut stlp_std__S_swap_lock: stlp_std__STLP_mutex;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_money_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_money_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_time_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_time_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__Locale_impl {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std16_get_Locale_implEPNS_12_Locale_implE"]
    pub fn stlp_std__get_Locale_impl(
        locimpl: *mut stlp_std__Locale_impl,
    ) -> *mut stlp_std__Locale_impl;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std26_copy_Nameless_Locale_implEPNS_12_Locale_implE"]
    pub fn stlp_std__copy_Nameless_Locale_impl(
        locimpl: *mut stlp_std__Locale_impl,
    ) -> *mut stlp_std__Locale_impl;
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_locale {
    pub _M_impl: *mut stlp_std__Locale_impl,
}
#[repr(C)]
pub struct stlp_std_locale_facet__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_locale_facet {
    pub vtable_: *const stlp_std_locale_facet__bindgen_vtable,
    pub _base: stlp_std__Refcount_Base,
}
#[test]
fn bindgen_test_layout_stlp_std_locale_facet() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_locale_facet>(),
        8usize,
        concat!("Size of: ", stringify!(stlp_std_locale_facet))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_locale_facet>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_locale_facet))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_locale_id {
    pub _M_index: usize,
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale2id6_S_maxE"]
    pub static mut stlp_std_locale_id__S_max: usize;
}
#[test]
fn bindgen_test_layout_stlp_std_locale_id() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_locale_id>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std_locale_id))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_locale_id>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_locale_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_locale_id>()))._M_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_locale_id),
            "::",
            stringify!(_M_index)
        )
    );
}
pub type stlp_std_locale_category = ::std::os::raw::c_int;
pub const stlp_std_locale_none: stlp_std_locale_category = 0;
pub const stlp_std_locale_collate: stlp_std_locale_category = 16;
pub const stlp_std_locale_ctype: stlp_std_locale_category = 32;
pub const stlp_std_locale_monetary: stlp_std_locale_category = 64;
pub const stlp_std_locale_numeric: stlp_std_locale_category = 256;
pub const stlp_std_locale_time: stlp_std_locale_category = 512;
pub const stlp_std_locale_messages: stlp_std_locale_category = 1024;
pub const stlp_std_locale_all: stlp_std_locale_category = 1904;
#[test]
fn bindgen_test_layout_stlp_std_locale() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_locale>(),
        4usize,
        concat!("Size of: ", stringify!(stlp_std_locale))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_locale>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_locale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_locale>()))._M_impl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_locale),
            "::",
            stringify!(_M_impl)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK8stlp_std6locale4nameEv"]
    pub fn stlp_std_locale_name(this: *const stlp_std_locale) -> stlp_std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale6globalERKS0_"]
    pub fn stlp_std_locale_global(arg1: *const stlp_std_locale) -> stlp_std_locale;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale7classicEv"]
    pub fn stlp_std_locale_classic() -> *const stlp_std_locale;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8stlp_std6locale12_M_get_facetERKNS0_2idE"]
    pub fn stlp_std_locale__M_get_facet(
        this: *const stlp_std_locale,
        arg1: *const stlp_std_locale_id,
    ) -> *mut stlp_std_locale_facet;
}
extern "C" {
    #[link_name = "\u{1}_ZNK8stlp_std6locale12_M_use_facetERKNS0_2idE"]
    pub fn stlp_std_locale__M_use_facet(
        this: *const stlp_std_locale,
        arg1: *const stlp_std_locale_id,
    ) -> *mut stlp_std_locale_facet;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale25_M_throw_on_combine_errorERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn stlp_std_locale__M_throw_on_combine_error(name: *const stlp_std_string);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale21_M_throw_on_null_nameEv"]
    pub fn stlp_std_locale__M_throw_on_null_name();
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale28_M_throw_on_creation_failureEiPKcS2_"]
    pub fn stlp_std_locale__M_throw_on_creation_failure(
        __err_code: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        facet: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale9_M_insertEPNS0_5facetERNS0_2idE"]
    pub fn stlp_std_locale__M_insert(
        this: *mut stlp_std_locale,
        __f: *mut stlp_std_locale_facet,
        __id: *mut stlp_std_locale_id,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1Ev"]
    pub fn stlp_std_locale_locale(this: *mut stlp_std_locale);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1ERKS0_"]
    pub fn stlp_std_locale_locale1(this: *mut stlp_std_locale, arg1: *const stlp_std_locale);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1EPKc"]
    pub fn stlp_std_locale_locale2(this: *mut stlp_std_locale, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1ERKS0_PKci"]
    pub fn stlp_std_locale_locale3(
        this: *mut stlp_std_locale,
        arg1: *const stlp_std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: stlp_std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1EPNS_12_Locale_implE"]
    pub fn stlp_std_locale_locale4(this: *mut stlp_std_locale, arg1: *mut stlp_std__Locale_impl);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeC1ERKS0_S2_i"]
    pub fn stlp_std_locale_locale5(
        this: *mut stlp_std_locale,
        arg1: *const stlp_std_locale,
        arg2: *const stlp_std_locale,
        arg3: stlp_std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6localeD1Ev"]
    pub fn stlp_std_locale_locale_destructor(this: *mut stlp_std_locale);
}
impl stlp_std_locale {
    #[inline]
    pub unsafe fn name(&self) -> stlp_std_string {
        stlp_std_locale_name(self)
    }
    #[inline]
    pub unsafe fn global(arg1: *const stlp_std_locale) -> stlp_std_locale {
        stlp_std_locale_global(arg1)
    }
    #[inline]
    pub unsafe fn classic() -> *const stlp_std_locale {
        stlp_std_locale_classic()
    }
    #[inline]
    pub unsafe fn _M_get_facet(
        &self,
        arg1: *const stlp_std_locale_id,
    ) -> *mut stlp_std_locale_facet {
        stlp_std_locale__M_get_facet(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_use_facet(
        &self,
        arg1: *const stlp_std_locale_id,
    ) -> *mut stlp_std_locale_facet {
        stlp_std_locale__M_use_facet(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_throw_on_combine_error(name: *const stlp_std_string) {
        stlp_std_locale__M_throw_on_combine_error(name)
    }
    #[inline]
    pub unsafe fn _M_throw_on_null_name() {
        stlp_std_locale__M_throw_on_null_name()
    }
    #[inline]
    pub unsafe fn _M_throw_on_creation_failure(
        __err_code: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        facet: *const ::std::os::raw::c_char,
    ) {
        stlp_std_locale__M_throw_on_creation_failure(__err_code, name, facet)
    }
    #[inline]
    pub unsafe fn _M_insert(
        &mut self,
        __f: *mut stlp_std_locale_facet,
        __id: *mut stlp_std_locale_id,
    ) {
        stlp_std_locale__M_insert(self, __f, __id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const stlp_std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale2(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        arg1: *const stlp_std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: stlp_std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale3(&mut __bindgen_tmp, arg1, arg2, arg3);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(arg1: *mut stlp_std__Locale_impl) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale4(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new5(
        arg1: *const stlp_std_locale,
        arg2: *const stlp_std_locale,
        arg3: stlp_std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_locale_locale5(&mut __bindgen_tmp, arg1, arg2, arg3);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        stlp_std_locale_locale_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std6locale5facetD1Ev"]
    pub fn stlp_std_locale_facet_facet_destructor(this: *mut stlp_std_locale_facet);
}
#[repr(C)]
pub struct stlp_std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_ios_base {
    pub vtable_: *const stlp_std_ios_base__bindgen_vtable,
    pub _M_fmtflags: stlp_std_ios_base_fmtflags,
    pub _M_iostate: stlp_std_ios_base_iostate,
    pub _M_openmode: stlp_std_ios_base_openmode,
    pub _M_seekdir: stlp_std_ios_base_seekdir,
    pub _M_exception_mask: stlp_std_ios_base_iostate,
    pub _M_precision: stlp_std_streamsize,
    pub _M_width: stlp_std_streamsize,
    pub _M_locale: stlp_std_locale,
    pub _M_callbacks: *mut stlp_std_pair<stlp_std_ios_base_event_callback, ::std::os::raw::c_int>,
    pub _M_num_callbacks: usize,
    pub _M_callback_index: usize,
    pub _M_iwords: *mut ::std::os::raw::c_long,
    pub _M_num_iwords: usize,
    pub _M_pwords: *mut *mut ::std::os::raw::c_void,
    pub _M_num_pwords: usize,
}
#[repr(C)]
pub struct stlp_std_ios_base_failure {
    pub _base: stlp_std___Named_exception,
}
#[test]
fn bindgen_test_layout_stlp_std_ios_base_failure() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ios_base_failure>(),
        264usize,
        concat!("Size of: ", stringify!(stlp_std_ios_base_failure))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ios_base_failure>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_ios_base_failure))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn stlp_std_ios_base_failure_failure(
        this: *mut stlp_std_ios_base_failure,
        arg1: *const stlp_std_string,
    );
}
impl stlp_std_ios_base_failure {
    #[inline]
    pub unsafe fn new(arg1: *const stlp_std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_ios_base_failure_failure(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
pub type stlp_std_ios_base_fmtflags = ::std::os::raw::c_int;
pub type stlp_std_ios_base_iostate = ::std::os::raw::c_int;
pub type stlp_std_ios_base_openmode = ::std::os::raw::c_int;
pub type stlp_std_ios_base_seekdir = ::std::os::raw::c_int;
pub type stlp_std_ios_base_fmt_flags = stlp_std_ios_base_fmtflags;
pub const stlp_std_ios_base_event_erase_event: stlp_std_ios_base_event = 0;
pub const stlp_std_ios_base_event_imbue_event: stlp_std_ios_base_event = 1;
pub const stlp_std_ios_base_event_copyfmt_event: stlp_std_ios_base_event = 2;
pub type stlp_std_ios_base_event = u32;
pub type stlp_std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: stlp_std_ios_base_event,
        arg2: *mut stlp_std_ios_base,
        __index: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_ios_base_Init {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base4Init8_S_countE"]
    pub static mut stlp_std_ios_base_Init__S_count: ::std::os::raw::c_long;
}
#[test]
fn bindgen_test_layout_stlp_std_ios_base_Init() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ios_base_Init>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_ios_base_Init))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ios_base_Init>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_ios_base_Init))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base4InitC1Ev"]
    pub fn stlp_std_ios_base_Init_Init(this: *mut stlp_std_ios_base_Init);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base4InitD1Ev"]
    pub fn stlp_std_ios_base_Init_Init_destructor(this: *mut stlp_std_ios_base_Init);
}
impl stlp_std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_ios_base_Init_Init(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        stlp_std_ios_base_Init_Init_destructor(self)
    }
}
pub type stlp_std_ios_base_io_state = stlp_std_ios_base_iostate;
pub type stlp_std_ios_base_open_mode = stlp_std_ios_base_openmode;
pub type stlp_std_ios_base_seek_dir = stlp_std_ios_base_seekdir;
pub type stlp_std_ios_base_streamoff = stlp_std_streamoff;
pub type stlp_std_ios_base_streampos = stlp_std_streampos;
pub const stlp_std_ios_base_left: ::std::os::raw::c_int = 1;
pub const stlp_std_ios_base_right: ::std::os::raw::c_int = 2;
pub const stlp_std_ios_base_internal: ::std::os::raw::c_int = 4;
pub const stlp_std_ios_base_dec: ::std::os::raw::c_int = 8;
pub const stlp_std_ios_base_hex: ::std::os::raw::c_int = 16;
pub const stlp_std_ios_base_oct: ::std::os::raw::c_int = 32;
pub const stlp_std_ios_base_fixed: ::std::os::raw::c_int = 64;
pub const stlp_std_ios_base_scientific: ::std::os::raw::c_int = 128;
pub const stlp_std_ios_base_boolalpha: ::std::os::raw::c_int = 256;
pub const stlp_std_ios_base_showbase: ::std::os::raw::c_int = 512;
pub const stlp_std_ios_base_showpoint: ::std::os::raw::c_int = 1024;
pub const stlp_std_ios_base_showpos: ::std::os::raw::c_int = 2048;
pub const stlp_std_ios_base_skipws: ::std::os::raw::c_int = 4096;
pub const stlp_std_ios_base_unitbuf: ::std::os::raw::c_int = 8192;
pub const stlp_std_ios_base_uppercase: ::std::os::raw::c_int = 16384;
pub const stlp_std_ios_base_adjustfield: ::std::os::raw::c_int = 7;
pub const stlp_std_ios_base_basefield: ::std::os::raw::c_int = 56;
pub const stlp_std_ios_base_floatfield: ::std::os::raw::c_int = 192;
pub const stlp_std_ios_base_goodbit: ::std::os::raw::c_int = 0;
pub const stlp_std_ios_base_badbit: ::std::os::raw::c_int = 1;
pub const stlp_std_ios_base_eofbit: ::std::os::raw::c_int = 2;
pub const stlp_std_ios_base_failbit: ::std::os::raw::c_int = 4;
pub const stlp_std_ios_base___default_mode: ::std::os::raw::c_int = 0;
pub const stlp_std_ios_base_app: ::std::os::raw::c_int = 1;
pub const stlp_std_ios_base_ate: ::std::os::raw::c_int = 2;
pub const stlp_std_ios_base_binary: ::std::os::raw::c_int = 4;
pub const stlp_std_ios_base_in: ::std::os::raw::c_int = 8;
pub const stlp_std_ios_base_out: ::std::os::raw::c_int = 16;
pub const stlp_std_ios_base_trunc: ::std::os::raw::c_int = 32;
pub const stlp_std_ios_base_beg: ::std::os::raw::c_int = 1;
pub const stlp_std_ios_base_cur: ::std::os::raw::c_int = 2;
pub const stlp_std_ios_base_end: ::std::os::raw::c_int = 4;
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base12_S_is_syncedE"]
    pub static mut stlp_std_ios_base__S_is_synced: bool;
}
#[test]
fn bindgen_test_layout_stlp_std_ios_base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ios_base>(),
        64usize,
        concat!("Size of: ", stringify!(stlp_std_ios_base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ios_base>(),
        4usize,
        concat!("Alignment of ", stringify!(stlp_std_ios_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_fmtflags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_fmtflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_iostate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_iostate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_openmode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_openmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_seekdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_seekdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_exception_mask as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_exception_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_precision as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_width as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_locale as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_callbacks as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_callbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_num_callbacks as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_num_callbacks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_callback_index as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_callback_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_iwords as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_iwords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_num_iwords as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_num_iwords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_pwords as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_pwords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stlp_std_ios_base>()))._M_num_pwords as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(stlp_std_ios_base),
            "::",
            stringify!(_M_num_pwords)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base5imbueERKNS_6localeE"]
    pub fn stlp_std_ios_base_imbue(
        this: *mut stlp_std_ios_base,
        arg1: *const stlp_std_locale,
    ) -> stlp_std_locale;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base6xallocEv"]
    pub fn stlp_std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base5iwordEi"]
    pub fn stlp_std_ios_base_iword(
        this: *mut stlp_std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base5pwordEi"]
    pub fn stlp_std_ios_base_pword(
        this: *mut stlp_std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base17register_callbackEPFvNS0_5eventERS0_iEi"]
    pub fn stlp_std_ios_base_register_callback(
        this: *mut stlp_std_ios_base,
        __fn: stlp_std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base15sync_with_stdioEb"]
    pub fn stlp_std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base13_M_copy_stateERKS0_"]
    pub fn stlp_std_ios_base__M_copy_state(
        this: *mut stlp_std_ios_base,
        __x: *const stlp_std_ios_base,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base19_M_invoke_callbacksENS0_5eventE"]
    pub fn stlp_std_ios_base__M_invoke_callbacks(
        this: *mut stlp_std_ios_base,
        arg1: stlp_std_ios_base_event,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base16_M_throw_failureEv"]
    pub fn stlp_std_ios_base__M_throw_failure(this: *mut stlp_std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base13_S_initializeEv"]
    pub fn stlp_std_ios_base__S_initialize();
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base15_S_uninitializeEv"]
    pub fn stlp_std_ios_base__S_uninitialize();
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_baseC1Ev"]
    pub fn stlp_std_ios_base_ios_base(this: *mut stlp_std_ios_base);
}
impl stlp_std_ios_base {
    #[inline]
    pub unsafe fn imbue(&mut self, arg1: *const stlp_std_locale) -> stlp_std_locale {
        stlp_std_ios_base_imbue(self, arg1)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int {
        stlp_std_ios_base_xalloc()
    }
    #[inline]
    pub unsafe fn iword(&mut self, __index: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_long {
        stlp_std_ios_base_iword(self, __index)
    }
    #[inline]
    pub unsafe fn pword(
        &mut self,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void {
        stlp_std_ios_base_pword(self, __index)
    }
    #[inline]
    pub unsafe fn register_callback(
        &mut self,
        __fn: stlp_std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    ) {
        stlp_std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        stlp_std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn _M_copy_state(&mut self, __x: *const stlp_std_ios_base) {
        stlp_std_ios_base__M_copy_state(self, __x)
    }
    #[inline]
    pub unsafe fn _M_invoke_callbacks(&mut self, arg1: stlp_std_ios_base_event) {
        stlp_std_ios_base__M_invoke_callbacks(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_throw_failure(&mut self) {
        stlp_std_ios_base__M_throw_failure(self)
    }
    #[inline]
    pub unsafe fn _S_initialize() {
        stlp_std_ios_base__S_initialize()
    }
    #[inline]
    pub unsafe fn _S_uninitialize() {
        stlp_std_ios_base__S_uninitialize()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        stlp_std_ios_base_ios_base(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_base7failureD1Ev"]
    pub fn stlp_std_ios_base_failure_failure_destructor(this: *mut stlp_std_ios_base_failure);
}
extern "C" {
    #[link_name = "\u{1}_ZN8stlp_std8ios_baseD1Ev"]
    pub fn stlp_std_ios_base_ios_base_destructor(this: *mut stlp_std_ios_base);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_ctype_base {
    pub _address: u8,
}
pub const stlp_std_ctype_base_mask_space: stlp_std_ctype_base_mask = 8192;
pub const stlp_std_ctype_base_mask_print: stlp_std_ctype_base_mask = 16384;
pub const stlp_std_ctype_base_mask_cntrl: stlp_std_ctype_base_mask = 2;
pub const stlp_std_ctype_base_mask_upper: stlp_std_ctype_base_mask = 256;
pub const stlp_std_ctype_base_mask_lower: stlp_std_ctype_base_mask = 512;
pub const stlp_std_ctype_base_mask_alpha: stlp_std_ctype_base_mask = 1024;
pub const stlp_std_ctype_base_mask_digit: stlp_std_ctype_base_mask = 2048;
pub const stlp_std_ctype_base_mask_punct: stlp_std_ctype_base_mask = 4;
pub const stlp_std_ctype_base_mask_xdigit: stlp_std_ctype_base_mask = 4096;
pub const stlp_std_ctype_base_mask_alnum: stlp_std_ctype_base_mask = 3072;
pub const stlp_std_ctype_base_mask_graph: stlp_std_ctype_base_mask = 3076;
pub type stlp_std_ctype_base_mask = u32;
#[test]
fn bindgen_test_layout_stlp_std_ctype_base() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype_base>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std_ctype_base))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype_base>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std_ctype_base))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_ctype {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_ctype_byname {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_byname_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype_byname>(),
        1044usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_byname_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype_byname>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_numpunct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_numpunct_byname {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_numpunct_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numpunct>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numpunct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numpunct>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numpunct)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numpunct_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numpunct>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numpunct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numpunct>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numpunct)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numpunct_byname_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numpunct_byname>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numpunct_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numpunct_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numpunct_byname)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numpunct_byname_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numpunct_byname>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numpunct_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numpunct_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numpunct_byname)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_ios<_CharT> {
    pub _base: stlp_std_ios_base,
    pub _M_cached_ctype: *const stlp_std_ctype,
    pub _M_fill: stlp_std_basic_ios_char_type<_CharT>,
    pub _M_streambuf: *mut stlp_std_basic_streambuf<_CharT>,
    pub _M_tied_ostream: *mut stlp_std_basic_ostream<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_ios_char_type<_CharT> = _CharT;
pub type stlp_std_basic_ios_int_type = [u8; 0usize];
pub type stlp_std_basic_ios_pos_type = [u8; 0usize];
pub type stlp_std_basic_ios_off_type = [u8; 0usize];
pub type stlp_std_basic_ios_traits_type<_Traits> = _Traits;
#[repr(C)]
pub struct stlp_std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_streambuf<_CharT> {
    pub vtable_: *const stlp_std_basic_streambuf__bindgen_vtable,
    pub _M_gbegin: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_gnext: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_gend: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_pbegin: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_pnext: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_pend: *mut stlp_std_basic_streambuf_char_type<_CharT>,
    pub _M_locale: stlp_std_locale,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_streambuf_char_type<_CharT> = _CharT;
pub type stlp_std_basic_streambuf_int_type = [u8; 0usize];
pub type stlp_std_basic_streambuf_pos_type = [u8; 0usize];
pub type stlp_std_basic_streambuf_off_type = [u8; 0usize];
pub type stlp_std_basic_streambuf_traits_type<_Traits> = _Traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_ostreambuf_iterator<_CharT> {
    pub _M_buf: *mut stlp_std_ostreambuf_iterator_streambuf_type<_CharT>,
    pub _M_ok: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_ostreambuf_iterator_char_type<_CharT> = _CharT;
pub type stlp_std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type stlp_std_ostreambuf_iterator_int_type = [u8; 0usize];
pub type stlp_std_ostreambuf_iterator_streambuf_type<_CharT> = stlp_std_basic_streambuf<_CharT>;
pub type stlp_std_ostreambuf_iterator_ostream_type<_CharT> = stlp_std_basic_ostream<_CharT>;
pub type stlp_std_ostreambuf_iterator_iterator_category = stlp_std_output_iterator_tag;
pub type stlp_std_ostreambuf_iterator_value_type = ::std::os::raw::c_void;
pub type stlp_std_ostreambuf_iterator_difference_type = ::std::os::raw::c_void;
pub type stlp_std_ostreambuf_iterator_pointer = ::std::os::raw::c_void;
pub type stlp_std_ostreambuf_iterator_reference = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_ostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_ostream__Self<_CharT> = stlp_std_basic_ostream<_CharT>;
pub type stlp_std_basic_ostream_char_type<_CharT> = _CharT;
pub type stlp_std_basic_ostream_int_type = [u8; 0usize];
pub type stlp_std_basic_ostream_pos_type = [u8; 0usize];
pub type stlp_std_basic_ostream_off_type = [u8; 0usize];
pub type stlp_std_basic_ostream_traits_type<_Traits> = _Traits;
pub type stlp_std_basic_ostream__Basic_ios<_CharT> = stlp_std_basic_ios<_CharT>;
pub type stlp_std_basic_ostream___ios_fn<_CharT> = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut stlp_std_basic_ios<_CharT>) -> *mut stlp_std_basic_ios<_CharT>,
>;
pub type stlp_std_basic_ostream___ios_base_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut stlp_std_ios_base) -> *mut stlp_std_ios_base,
>;
pub type stlp_std_basic_ostream___ostream_fn<_CharT> = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut stlp_std_basic_ostream__Self<_CharT>,
    ) -> *mut stlp_std_basic_ostream__Self<_CharT>,
>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_ostream_sentry<_CharT> {
    pub _M_str: *mut stlp_std_basic_ostream<_CharT>,
    pub _M_ok: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_ostream_sentry__Self<_CharT> = stlp_std_basic_ostream_sentry<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_num_put {
    pub _base: stlp_std_locale_facet,
}
pub type stlp_std_num_put_char_type<_CharT> = _CharT;
pub type stlp_std_num_put_iter_type<_OutputIter> = _OutputIter;
pub const stlp_std_float_round_style_round_indeterminate: stlp_std_float_round_style = -1;
pub const stlp_std_float_round_style_round_toward_zero: stlp_std_float_round_style = 0;
pub const stlp_std_float_round_style_round_to_nearest: stlp_std_float_round_style = 1;
pub const stlp_std_float_round_style_round_toward_infinity: stlp_std_float_round_style = 2;
pub const stlp_std_float_round_style_round_toward_neg_infinity: stlp_std_float_round_style = 3;
pub type stlp_std_float_round_style = i32;
pub const stlp_std_float_denorm_style_denorm_indeterminate: stlp_std_float_denorm_style = -1;
pub const stlp_std_float_denorm_style_denorm_absent: stlp_std_float_denorm_style = 0;
pub const stlp_std_float_denorm_style_denorm_present: stlp_std_float_denorm_style = 1;
pub type stlp_std_float_denorm_style = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_numeric_limits {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_numeric_limits_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_numeric_limits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_numeric_limits)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut stlp_std_id: stlp_std_locale_id;
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std__SPutBackC<_CharT> {
    pub __pfrom: *mut stlp_std__SPutBackC__StreamBuf<_CharT>,
    pub __c: stlp_std__SPutBackC_int_type<_CharT>,
    pub __do_guard: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std__SPutBackC__StreamBuf<_CharT> = stlp_std_basic_streambuf<_CharT>;
pub type stlp_std__SPutBackC_int_type<_CharT> = stlp_std__SPutBackC__StreamBuf<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std_istreambuf_iterator<_CharT> {
    pub _M_buf: *mut stlp_std_istreambuf_iterator_streambuf_type<_CharT>,
    pub _M_c: _CharT,
    pub _M_eof: bool,
    pub _M_have_c: bool,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_istreambuf_iterator_char_type<_CharT> = _CharT;
pub type stlp_std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type stlp_std_istreambuf_iterator_int_type = [u8; 0usize];
pub type stlp_std_istreambuf_iterator_streambuf_type<_CharT> = stlp_std_basic_streambuf<_CharT>;
pub type stlp_std_istreambuf_iterator_istream_type<_CharT> = stlp_std_basic_istream<_CharT>;
pub type stlp_std_istreambuf_iterator_iterator_category = stlp_std_input_iterator_tag;
pub type stlp_std_istreambuf_iterator_value_type<_CharT> = _CharT;
pub type stlp_std_istreambuf_iterator_difference_type = [u8; 0usize];
pub type stlp_std_istreambuf_iterator_pointer<_CharT> = *const _CharT;
pub type stlp_std_istreambuf_iterator_reference<_CharT> = *const _CharT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stlp_std__No_Skip_WS {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_stlp_std__No_Skip_WS() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std__No_Skip_WS>(),
        1usize,
        concat!("Size of: ", stringify!(stlp_std__No_Skip_WS))
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std__No_Skip_WS>(),
        1usize,
        concat!("Alignment of ", stringify!(stlp_std__No_Skip_WS))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_istream<_CharT> {
    pub _M_gcount: stlp_std_streamsize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_istream__Self<_CharT> = stlp_std_basic_istream<_CharT>;
pub type stlp_std_basic_istream_char_type<_CharT> = _CharT;
pub type stlp_std_basic_istream_int_type = [u8; 0usize];
pub type stlp_std_basic_istream_pos_type = [u8; 0usize];
pub type stlp_std_basic_istream_off_type = [u8; 0usize];
pub type stlp_std_basic_istream_traits_type<_Traits> = _Traits;
pub type stlp_std_basic_istream__Basic_ios<_CharT> = stlp_std_basic_ios<_CharT>;
pub type stlp_std_basic_istream___ios_fn<_CharT> = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut stlp_std_basic_ios<_CharT>) -> *mut stlp_std_basic_ios<_CharT>,
>;
pub type stlp_std_basic_istream___ios_base_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut stlp_std_ios_base) -> *mut stlp_std_ios_base,
>;
pub type stlp_std_basic_istream___istream_fn<_CharT> = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut stlp_std_basic_istream__Self<_CharT>,
    ) -> *mut stlp_std_basic_istream__Self<_CharT>,
>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_istream_sentry {
    pub _M_ok: bool,
}
pub type stlp_std_basic_istream_sentry__Self = stlp_std_basic_istream_sentry;
pub type stlp_std_basic_istream_sentry_traits_type<_Traits> = _Traits;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_basic_iostream<_CharT> {
    pub _base: stlp_std_basic_istream<_CharT>,
    pub _base_1: stlp_std_basic_ostream<_CharT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type stlp_std_basic_iostream__Basic_ios<_CharT> = stlp_std_basic_ios<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_num_get {
    pub _base: stlp_std_locale_facet,
}
pub type stlp_std_num_get_char_type<_CharT> = _CharT;
pub type stlp_std_num_get_iter_type<_InputIter> = _InputIter;
pub type stlp_std_num_get_string_type = stlp_std_string;
pub type stlp_std_num_get__Ctype = stlp_std_ctype;
pub type stlp_std_num_get__Numpunct = stlp_std_numpunct;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_vector<_Tp, _Alloc> {
    pub _base: stlp_std_priv___Vector_base<_Tp, _Alloc>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
}
pub type stlp_std_vector__Base<_Tp, _Alloc> = stlp_std_priv___Vector_base<_Tp, _Alloc>;
pub type stlp_std_vector__Self<_Tp, _Alloc> = stlp_std_vector<_Tp, _Alloc>;
pub type stlp_std_vector_allocator_type<_Tp, _Alloc> = stlp_std_vector__Base<_Tp, _Alloc>;
pub type stlp_std_vector_value_type<_Tp> = _Tp;
pub type stlp_std_vector_pointer<_Tp> = *mut stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_const_pointer<_Tp> = *const stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_iterator<_Tp> = *mut stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_const_iterator<_Tp> = *const stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_reference<_Tp> = *mut stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_const_reference<_Tp> = *const stlp_std_vector_value_type<_Tp>;
pub type stlp_std_vector_size_type = usize;
pub type stlp_std_vector_difference_type = isize;
pub type stlp_std_vector__Iterator_category = stlp_std_random_access_iterator_tag;
pub type stlp_std_vector_const_reverse_iterator<_Tp> =
    stlp_std_reverse_iterator<stlp_std_vector_const_iterator<_Tp>>;
pub type stlp_std_vector_reverse_iterator<_Tp> =
    stlp_std_reverse_iterator<stlp_std_vector_iterator<_Tp>>;
#[test]
fn __bindgen_test_layout_stlp_std___type_traits_open0_stlp_std_priv__Bit_reference_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std___type_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std___type_traits)
        )
    );
}
pub type stlp_std_bit_vector = stlp_std_vector<bool, stlp_std_allocator>;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_set {
    pub _M_t: stlp_std_set__Rep_type,
}
pub type stlp_std_set__Self = stlp_std_set;
pub type stlp_std_set_key_type<_Key> = _Key;
pub type stlp_std_set_value_type<_Key> = _Key;
pub type stlp_std_set_key_compare<_Compare> = _Compare;
pub type stlp_std_set_value_compare<_Compare> = _Compare;
pub type stlp_std_set__SetTraits = stlp_std_priv___SetTraitsT;
pub type stlp_std_set__Rep_type = stlp_std_priv___Rb_tree<_Compare>;
pub type stlp_std_set_pointer = stlp_std_set__Rep_type;
pub type stlp_std_set_const_pointer = stlp_std_set__Rep_type;
pub type stlp_std_set_reference = stlp_std_set__Rep_type;
pub type stlp_std_set_const_reference = stlp_std_set__Rep_type;
pub type stlp_std_set_iterator = stlp_std_set__Rep_type;
pub type stlp_std_set_const_iterator = stlp_std_set__Rep_type;
pub type stlp_std_set_reverse_iterator = stlp_std_set__Rep_type;
pub type stlp_std_set_const_reverse_iterator = stlp_std_set__Rep_type;
pub type stlp_std_set_size_type = stlp_std_set__Rep_type;
pub type stlp_std_set_difference_type = stlp_std_set__Rep_type;
pub type stlp_std_set_allocator_type = stlp_std_set__Rep_type;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_multiset {
    pub _M_t: stlp_std_multiset__Rep_type,
}
pub type stlp_std_multiset__Self = stlp_std_multiset;
pub type stlp_std_multiset_key_type<_Key> = _Key;
pub type stlp_std_multiset_value_type<_Key> = _Key;
pub type stlp_std_multiset_key_compare<_Compare> = _Compare;
pub type stlp_std_multiset_value_compare<_Compare> = _Compare;
pub type stlp_std_multiset__MultisetTraits = stlp_std_priv___MultisetTraitsT;
pub type stlp_std_multiset__Rep_type = stlp_std_priv___Rb_tree<_Compare>;
pub type stlp_std_multiset_pointer = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_const_pointer = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_reference = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_const_reference = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_iterator = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_const_iterator = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_reverse_iterator = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_const_reverse_iterator = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_size_type = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_difference_type = stlp_std_multiset__Rep_type;
pub type stlp_std_multiset_allocator_type = stlp_std_multiset__Rep_type;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_map {
    pub _M_t: stlp_std_map__Rep_type,
}
pub type stlp_std_map__Self = stlp_std_map;
pub type stlp_std_map_key_type<_Key> = _Key;
pub type stlp_std_map_data_type<_Tp> = _Tp;
pub type stlp_std_map_mapped_type<_Tp> = _Tp;
pub type stlp_std_map_value_type<_Key, _Tp> = stlp_std_pair<_Key, _Tp>;
pub type stlp_std_map_key_compare<_Compare> = _Compare;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_map_value_compare<_Compare> {
    pub comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type stlp_std_map__MapTraits = stlp_std_priv___MapTraitsT;
pub type stlp_std_map__Rep_type = stlp_std_priv___Rb_tree<_Compare>;
pub type stlp_std_map_pointer = stlp_std_map__Rep_type;
pub type stlp_std_map_const_pointer = stlp_std_map__Rep_type;
pub type stlp_std_map_reference = stlp_std_map__Rep_type;
pub type stlp_std_map_const_reference = stlp_std_map__Rep_type;
pub type stlp_std_map_iterator = stlp_std_map__Rep_type;
pub type stlp_std_map_const_iterator = stlp_std_map__Rep_type;
pub type stlp_std_map_reverse_iterator = stlp_std_map__Rep_type;
pub type stlp_std_map_const_reverse_iterator = stlp_std_map__Rep_type;
pub type stlp_std_map_size_type = stlp_std_map__Rep_type;
pub type stlp_std_map_difference_type = stlp_std_map__Rep_type;
pub type stlp_std_map_allocator_type = stlp_std_map__Rep_type;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_multimap {
    pub _M_t: stlp_std_multimap__Rep_type,
}
pub type stlp_std_multimap__Self = stlp_std_multimap;
pub type stlp_std_multimap_key_type<_Key> = _Key;
pub type stlp_std_multimap_data_type<_Tp> = _Tp;
pub type stlp_std_multimap_mapped_type<_Tp> = _Tp;
pub type stlp_std_multimap_value_type<_Key, _Tp> = stlp_std_pair<_Key, _Tp>;
pub type stlp_std_multimap_key_compare<_Compare> = _Compare;
#[repr(C)]
#[derive(Debug)]
pub struct stlp_std_multimap_value_compare<_Compare> {
    pub comp: _Compare,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
}
pub type stlp_std_multimap__MultimapTraits = stlp_std_priv___MultimapTraitsT;
pub type stlp_std_multimap__Rep_type = stlp_std_priv___Rb_tree<_Compare>;
pub type stlp_std_multimap_pointer = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_const_pointer = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_reference = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_const_reference = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_iterator = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_const_iterator = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_reverse_iterator = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_const_reverse_iterator = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_size_type = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_difference_type = stlp_std_multimap__Rep_type;
pub type stlp_std_multimap_allocator_type = stlp_std_multimap__Rep_type;
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_byname_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype_byname>(),
        1044usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_byname_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype_byname>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype_byname>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype_byname)
        )
    );
}
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_signed_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___add_unsigned_open0_long_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___add_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___add_unsigned)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type = __gnu_cxx___remove_unsigned___if_type;
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_long_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0_instantiation()
{
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___remove_unsigned>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___remove_unsigned)
        )
    );
}
pub type __gnu_cxx___promote___type = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_2 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_2___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_3 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_3___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_4 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_4___type<_Tp2> = _Tp2;
extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
    pub fn __gnu_cxx___verbose_terminate_handler();
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        116usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        8usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        4usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        8usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __flags: ::std::os::raw::c_uchar,
    pub __shared: ::std::os::raw::c_uchar,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad2: ::std::os::raw::c_uchar,
    pub __cur_writer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        32usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __kind: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: __pthread_mutex_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_mutex_s__bindgen_ty_1 {
    pub __elision_data: __pthread_mutex_s__bindgen_ty_1__bindgen_ty_1,
    pub __list: __pthread_slist_t,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s__bindgen_ty_1__bindgen_ty_1 {
    pub __espins: ::std::os::raw::c_short,
    pub __eelision: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>())).__espins
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__espins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1>())).__eelision
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__eelision)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_mutex_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s__bindgen_ty_1>())).__elision_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__elision_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s__bindgen_ty_1>())).__list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 36usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 9usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 24usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u32; 12usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 20usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        28usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        4usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        4usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
pub const FP_INT_UPWARD: _bindgen_ty_1 = 0;
pub const FP_INT_DOWNWARD: _bindgen_ty_1 = 1;
pub const FP_INT_TOWARDZERO: _bindgen_ty_1 = 2;
pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_1 = 3;
pub const FP_INT_TONEAREST: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn totalorder(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermag(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn __getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn setpayload(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn totalorderf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn __getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn sincosl(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincosl(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10l(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nextdownl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextdownl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextupl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextupl(__x: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn roundevenl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundevenl(__x: f64) -> f64;
}
extern "C" {
    pub fn fromfpl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxl(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxmagl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminmagl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminmagl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn totalorderl(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagl(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizel(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadl(__x: *const f64) -> f64;
}
extern "C" {
    pub fn __getpayloadl(__x: *const f64) -> f64;
}
extern "C" {
    pub fn setpayloadl(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigl(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn __sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn __modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn __nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn __scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int)
        -> _Float32;
}
extern "C" {
    pub fn lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn totalorderf32(__x: _Float32, __y: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32(__x: _Float32, __y: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef32(__cx: *mut _Float32, __x: *const _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn __getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn setpayloadf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn __sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn __modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn __nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn __scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int)
        -> _Float64;
}
extern "C" {
    pub fn lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn totalorderf64(__x: _Float64, __y: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64(__x: _Float64, __y: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef64(__cx: *mut _Float64, __x: *const _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn __getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn setpayloadf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn __sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn __nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn __scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn totalorderf32x(__x: _Float32x, __y: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32x(__x: _Float32x, __y: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef32x(__cx: *mut _Float32x, __x: *const _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn setpayloadf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn __sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn __nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn __scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn totalorderf64x(__x: _Float64x, __y: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64x(__x: _Float64x, __y: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalizef64x(__cx: *mut _Float64x, __x: *const _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn setpayloadf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fadd(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fdiv(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fmul(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fsub(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn faddl(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fdivl(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fmull(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fsubl(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn daddl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn ddivl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn dmull(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn dsubl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn f32addf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32divf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32mulf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32subf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32addf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32divf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32mulf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32subf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32addf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32divf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32mulf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32subf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32xaddf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xaddf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f64addf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64divf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64mulf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64subf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    #[link_name = "\u{1}signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = 0;
pub const FP_INFINITE: _bindgen_ty_2 = 1;
pub const FP_ZERO: _bindgen_ty_2 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = u32;
extern "C" {
    pub fn __iscanonicall(__x: f64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __iseqsig_type {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_float_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
#[test]
fn __bindgen_test_layout___iseqsig_type_open0_long_double_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__iseqsig_type>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__iseqsig_type)
        )
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
pub type mbstate_t = __mbstate_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u32, __s2: *const u32, __n: usize, __loc: locale_t) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
extern "C" {
    pub fn wcslen(__s: *const u32) -> usize;
}
extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u32, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32;
}
extern "C" {
    pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64;
}
extern "C" {
    pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64x;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
extern "C" {
    pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
extern "C" {
    pub fn wcstof32_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32;
}
extern "C" {
    pub fn wcstof64_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64;
}
extern "C" {
    pub fn wcstof32x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64x;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const u32, __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: usize,
        __format: *const u32,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const u32, __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut u32, __n: ::std::os::raw::c_int, __stream: *mut __FILE) -> *mut u32;
}
extern "C" {
    pub fn fputws(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputws_unlocked(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 32usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize], u8>,
}
#[test]
fn bindgen_test_layout_timex() {
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        128usize,
        concat!("Size of: ", stringify!(timex))
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        4usize,
        concat!("Alignment of ", stringify!(timex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).modes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).maxerror as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(maxerror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).esterror as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(esterror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).constant as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).precision as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tolerance as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tolerance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).time as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tick as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).ppsfreq as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(ppsfreq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitter as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).shift as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stabil as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stabil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).jitcnt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).calcnt as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(calcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).errcnt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(errcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).stbcnt as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stbcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timex>())).tai as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tai)
        )
    );
}
impl timex {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 44usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 44usize], u8> =
            Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        44usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        16usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_int; 6usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_3 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_4 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_4 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_4 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_4 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_4 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_4 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_4 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_4 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_4 = 0;
pub type _bindgen_ty_4 = u32;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_5 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_5 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = u32;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_6 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_6 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_7 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_7 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_7 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_7 = 0;
pub type _bindgen_ty_7 = u32;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_8 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = u32;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_9 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_10 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        4usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_11 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = u32;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_12 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_12 = 1;
pub type _bindgen_ty_12 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        44usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_class() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_class>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_class>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_arg as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_class>())).__do_it as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_class>())).__cancel_type as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent_np(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust_np(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust_np(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __stl_atomic_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        16usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub const _ISupper: _bindgen_ty_13 = 256;
pub const _ISlower: _bindgen_ty_13 = 512;
pub const _ISalpha: _bindgen_ty_13 = 1024;
pub const _ISdigit: _bindgen_ty_13 = 2048;
pub const _ISxdigit: _bindgen_ty_13 = 4096;
pub const _ISspace: _bindgen_ty_13 = 8192;
pub const _ISprint: _bindgen_ty_13 = 16384;
pub const _ISgraph: _bindgen_ty_13 = 32768;
pub const _ISblank: _bindgen_ty_13 = 1;
pub const _IScntrl: _bindgen_ty_13 = 2;
pub const _ISpunct: _bindgen_ty_13 = 4;
pub const _ISalnum: _bindgen_ty_13 = 8;
pub type _bindgen_ty_13 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_ctype {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_numeric {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_time {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_collate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_monetary {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Locale_messages {
    _unused: [u8; 0],
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const asEEngineProp_asEP_ALLOW_UNSAFE_REFERENCES: asEEngineProp = 1;
pub const asEEngineProp_asEP_OPTIMIZE_BYTECODE: asEEngineProp = 2;
pub const asEEngineProp_asEP_COPY_SCRIPT_SECTIONS: asEEngineProp = 3;
pub const asEEngineProp_asEP_MAX_STACK_SIZE: asEEngineProp = 4;
pub const asEEngineProp_asEP_USE_CHARACTER_LITERALS: asEEngineProp = 5;
pub const asEEngineProp_asEP_ALLOW_MULTILINE_STRINGS: asEEngineProp = 6;
pub const asEEngineProp_asEP_ALLOW_IMPLICIT_HANDLE_TYPES: asEEngineProp = 7;
pub const asEEngineProp_asEP_BUILD_WITHOUT_LINE_CUES: asEEngineProp = 8;
pub const asEEngineProp_asEP_INIT_GLOBAL_VARS_AFTER_BUILD: asEEngineProp = 9;
pub const asEEngineProp_asEP_REQUIRE_ENUM_SCOPE: asEEngineProp = 10;
pub const asEEngineProp_asEP_SCRIPT_SCANNER: asEEngineProp = 11;
pub const asEEngineProp_asEP_INCLUDE_JIT_INSTRUCTIONS: asEEngineProp = 12;
pub const asEEngineProp_asEP_STRING_ENCODING: asEEngineProp = 13;
pub const asEEngineProp_asEP_PROPERTY_ACCESSOR_MODE: asEEngineProp = 14;
pub const asEEngineProp_asEP_EXPAND_DEF_ARRAY_TO_TMPL: asEEngineProp = 15;
pub const asEEngineProp_asEP_AUTO_GARBAGE_COLLECT: asEEngineProp = 16;
pub const asEEngineProp_asEP_DISALLOW_GLOBAL_VARS: asEEngineProp = 17;
pub const asEEngineProp_asEP_ALWAYS_IMPL_DEFAULT_CONSTRUCT: asEEngineProp = 18;
pub type asEEngineProp = u32;
pub const asECallConvTypes_asCALL_CDECL: asECallConvTypes = 0;
pub const asECallConvTypes_asCALL_STDCALL: asECallConvTypes = 1;
pub const asECallConvTypes_asCALL_THISCALL: asECallConvTypes = 2;
pub const asECallConvTypes_asCALL_CDECL_OBJLAST: asECallConvTypes = 3;
pub const asECallConvTypes_asCALL_CDECL_OBJFIRST: asECallConvTypes = 4;
pub const asECallConvTypes_asCALL_GENERIC: asECallConvTypes = 5;
pub type asECallConvTypes = u32;
pub const asEObjTypeFlags_asOBJ_REF: asEObjTypeFlags = 1;
pub const asEObjTypeFlags_asOBJ_VALUE: asEObjTypeFlags = 2;
pub const asEObjTypeFlags_asOBJ_GC: asEObjTypeFlags = 4;
pub const asEObjTypeFlags_asOBJ_POD: asEObjTypeFlags = 8;
pub const asEObjTypeFlags_asOBJ_NOHANDLE: asEObjTypeFlags = 16;
pub const asEObjTypeFlags_asOBJ_SCOPED: asEObjTypeFlags = 32;
pub const asEObjTypeFlags_asOBJ_TEMPLATE: asEObjTypeFlags = 64;
pub const asEObjTypeFlags_asOBJ_ASHANDLE: asEObjTypeFlags = 128;
pub const asEObjTypeFlags_asOBJ_APP_CLASS: asEObjTypeFlags = 256;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CONSTRUCTOR: asEObjTypeFlags = 512;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DESTRUCTOR: asEObjTypeFlags = 1024;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ASSIGNMENT: asEObjTypeFlags = 2048;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_COPY_CONSTRUCTOR: asEObjTypeFlags = 4096;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_C: asEObjTypeFlags = 768;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CD: asEObjTypeFlags = 1792;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CA: asEObjTypeFlags = 2816;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CK: asEObjTypeFlags = 4864;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDA: asEObjTypeFlags = 3840;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDK: asEObjTypeFlags = 5888;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CAK: asEObjTypeFlags = 6912;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_CDAK: asEObjTypeFlags = 7936;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_D: asEObjTypeFlags = 1280;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DA: asEObjTypeFlags = 3328;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DK: asEObjTypeFlags = 5376;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_DAK: asEObjTypeFlags = 7424;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_A: asEObjTypeFlags = 2304;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_AK: asEObjTypeFlags = 6400;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_K: asEObjTypeFlags = 4352;
pub const asEObjTypeFlags_asOBJ_APP_PRIMITIVE: asEObjTypeFlags = 8192;
pub const asEObjTypeFlags_asOBJ_APP_FLOAT: asEObjTypeFlags = 16384;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ALLINTS: asEObjTypeFlags = 32768;
pub const asEObjTypeFlags_asOBJ_APP_CLASS_ALLFLOATS: asEObjTypeFlags = 65536;
pub const asEObjTypeFlags_asOBJ_NOCOUNT: asEObjTypeFlags = 131072;
pub const asEObjTypeFlags_asOBJ_MASK_VALID_FLAGS: asEObjTypeFlags = 262143;
pub const asEObjTypeFlags_asOBJ_SCRIPT_OBJECT: asEObjTypeFlags = 524288;
pub const asEObjTypeFlags_asOBJ_SHARED: asEObjTypeFlags = 1048576;
pub const asEObjTypeFlags_asOBJ_NOINHERIT: asEObjTypeFlags = 2097152;
pub type asEObjTypeFlags = u32;
pub const asEBehaviours_asBEHAVE_CONSTRUCT: asEBehaviours = 0;
pub const asEBehaviours_asBEHAVE_DESTRUCT: asEBehaviours = 1;
pub const asEBehaviours_asBEHAVE_FACTORY: asEBehaviours = 2;
pub const asEBehaviours_asBEHAVE_LIST_FACTORY: asEBehaviours = 3;
pub const asEBehaviours_asBEHAVE_ADDREF: asEBehaviours = 4;
pub const asEBehaviours_asBEHAVE_RELEASE: asEBehaviours = 5;
pub const asEBehaviours_asBEHAVE_VALUE_CAST: asEBehaviours = 6;
pub const asEBehaviours_asBEHAVE_IMPLICIT_VALUE_CAST: asEBehaviours = 7;
pub const asEBehaviours_asBEHAVE_REF_CAST: asEBehaviours = 8;
pub const asEBehaviours_asBEHAVE_IMPLICIT_REF_CAST: asEBehaviours = 9;
pub const asEBehaviours_asBEHAVE_TEMPLATE_CALLBACK: asEBehaviours = 10;
pub const asEBehaviours_asBEHAVE_FIRST_GC: asEBehaviours = 11;
pub const asEBehaviours_asBEHAVE_GETREFCOUNT: asEBehaviours = 11;
pub const asEBehaviours_asBEHAVE_SETGCFLAG: asEBehaviours = 12;
pub const asEBehaviours_asBEHAVE_GETGCFLAG: asEBehaviours = 13;
pub const asEBehaviours_asBEHAVE_ENUMREFS: asEBehaviours = 14;
pub const asEBehaviours_asBEHAVE_RELEASEREFS: asEBehaviours = 15;
pub const asEBehaviours_asBEHAVE_LAST_GC: asEBehaviours = 15;
pub const asEBehaviours_asBEHAVE_MAX: asEBehaviours = 16;
pub type asEBehaviours = u32;
pub const asERetCodes_asSUCCESS: asERetCodes = 0;
pub const asERetCodes_asERROR: asERetCodes = -1;
pub const asERetCodes_asCONTEXT_ACTIVE: asERetCodes = -2;
pub const asERetCodes_asCONTEXT_NOT_FINISHED: asERetCodes = -3;
pub const asERetCodes_asCONTEXT_NOT_PREPARED: asERetCodes = -4;
pub const asERetCodes_asINVALID_ARG: asERetCodes = -5;
pub const asERetCodes_asNO_FUNCTION: asERetCodes = -6;
pub const asERetCodes_asNOT_SUPPORTED: asERetCodes = -7;
pub const asERetCodes_asINVALID_NAME: asERetCodes = -8;
pub const asERetCodes_asNAME_TAKEN: asERetCodes = -9;
pub const asERetCodes_asINVALID_DECLARATION: asERetCodes = -10;
pub const asERetCodes_asINVALID_OBJECT: asERetCodes = -11;
pub const asERetCodes_asINVALID_TYPE: asERetCodes = -12;
pub const asERetCodes_asALREADY_REGISTERED: asERetCodes = -13;
pub const asERetCodes_asMULTIPLE_FUNCTIONS: asERetCodes = -14;
pub const asERetCodes_asNO_MODULE: asERetCodes = -15;
pub const asERetCodes_asNO_GLOBAL_VAR: asERetCodes = -16;
pub const asERetCodes_asINVALID_CONFIGURATION: asERetCodes = -17;
pub const asERetCodes_asINVALID_INTERFACE: asERetCodes = -18;
pub const asERetCodes_asCANT_BIND_ALL_FUNCTIONS: asERetCodes = -19;
pub const asERetCodes_asLOWER_ARRAY_DIMENSION_NOT_REGISTERED: asERetCodes = -20;
pub const asERetCodes_asWRONG_CONFIG_GROUP: asERetCodes = -21;
pub const asERetCodes_asCONFIG_GROUP_IS_IN_USE: asERetCodes = -22;
pub const asERetCodes_asILLEGAL_BEHAVIOUR_FOR_TYPE: asERetCodes = -23;
pub const asERetCodes_asWRONG_CALLING_CONV: asERetCodes = -24;
pub const asERetCodes_asBUILD_IN_PROGRESS: asERetCodes = -25;
pub const asERetCodes_asINIT_GLOBAL_VARS_FAILED: asERetCodes = -26;
pub type asERetCodes = i32;
pub const asEContextState_asEXECUTION_FINISHED: asEContextState = 0;
pub const asEContextState_asEXECUTION_SUSPENDED: asEContextState = 1;
pub const asEContextState_asEXECUTION_ABORTED: asEContextState = 2;
pub const asEContextState_asEXECUTION_EXCEPTION: asEContextState = 3;
pub const asEContextState_asEXECUTION_PREPARED: asEContextState = 4;
pub const asEContextState_asEXECUTION_UNINITIALIZED: asEContextState = 5;
pub const asEContextState_asEXECUTION_ACTIVE: asEContextState = 6;
pub const asEContextState_asEXECUTION_ERROR: asEContextState = 7;
pub type asEContextState = u32;
pub const asEMsgType_asMSGTYPE_ERROR: asEMsgType = 0;
pub const asEMsgType_asMSGTYPE_WARNING: asEMsgType = 1;
pub const asEMsgType_asMSGTYPE_INFORMATION: asEMsgType = 2;
pub type asEMsgType = u32;
pub const asEGCFlags_asGC_FULL_CYCLE: asEGCFlags = 1;
pub const asEGCFlags_asGC_ONE_STEP: asEGCFlags = 2;
pub const asEGCFlags_asGC_DESTROY_GARBAGE: asEGCFlags = 4;
pub const asEGCFlags_asGC_DETECT_GARBAGE: asEGCFlags = 8;
pub type asEGCFlags = u32;
pub const asETokenClass_asTC_UNKNOWN: asETokenClass = 0;
pub const asETokenClass_asTC_KEYWORD: asETokenClass = 1;
pub const asETokenClass_asTC_VALUE: asETokenClass = 2;
pub const asETokenClass_asTC_IDENTIFIER: asETokenClass = 3;
pub const asETokenClass_asTC_COMMENT: asETokenClass = 4;
pub const asETokenClass_asTC_WHITESPACE: asETokenClass = 5;
pub type asETokenClass = u32;
pub const asPREPARE_PREVIOUS: ::std::os::raw::c_int = -1;
pub const asETypeIdFlags_asTYPEID_VOID: asETypeIdFlags = 0;
pub const asETypeIdFlags_asTYPEID_BOOL: asETypeIdFlags = 1;
pub const asETypeIdFlags_asTYPEID_INT8: asETypeIdFlags = 2;
pub const asETypeIdFlags_asTYPEID_INT16: asETypeIdFlags = 3;
pub const asETypeIdFlags_asTYPEID_INT32: asETypeIdFlags = 4;
pub const asETypeIdFlags_asTYPEID_INT64: asETypeIdFlags = 5;
pub const asETypeIdFlags_asTYPEID_UINT8: asETypeIdFlags = 6;
pub const asETypeIdFlags_asTYPEID_UINT16: asETypeIdFlags = 7;
pub const asETypeIdFlags_asTYPEID_UINT32: asETypeIdFlags = 8;
pub const asETypeIdFlags_asTYPEID_UINT64: asETypeIdFlags = 9;
pub const asETypeIdFlags_asTYPEID_FLOAT: asETypeIdFlags = 10;
pub const asETypeIdFlags_asTYPEID_DOUBLE: asETypeIdFlags = 11;
pub const asETypeIdFlags_asTYPEID_OBJHANDLE: asETypeIdFlags = 1073741824;
pub const asETypeIdFlags_asTYPEID_HANDLETOCONST: asETypeIdFlags = 536870912;
pub const asETypeIdFlags_asTYPEID_MASK_OBJECT: asETypeIdFlags = 469762048;
pub const asETypeIdFlags_asTYPEID_APPOBJECT: asETypeIdFlags = 67108864;
pub const asETypeIdFlags_asTYPEID_SCRIPTOBJECT: asETypeIdFlags = 134217728;
pub const asETypeIdFlags_asTYPEID_TEMPLATE: asETypeIdFlags = 268435456;
pub const asETypeIdFlags_asTYPEID_MASK_SEQNBR: asETypeIdFlags = 67108863;
pub type asETypeIdFlags = u32;
pub const asETypeModifiers_asTM_NONE: asETypeModifiers = 0;
pub const asETypeModifiers_asTM_INREF: asETypeModifiers = 1;
pub const asETypeModifiers_asTM_OUTREF: asETypeModifiers = 2;
pub const asETypeModifiers_asTM_INOUTREF: asETypeModifiers = 3;
pub type asETypeModifiers = u32;
pub const asEGMFlags_asGM_ONLY_IF_EXISTS: asEGMFlags = 0;
pub const asEGMFlags_asGM_CREATE_IF_NOT_EXISTS: asEGMFlags = 1;
pub const asEGMFlags_asGM_ALWAYS_CREATE: asEGMFlags = 2;
pub type asEGMFlags = u32;
pub const asECompileFlags_asCOMP_ADD_TO_MODULE: asECompileFlags = 1;
pub type asECompileFlags = u32;
pub const asEFuncType_asFUNC_DUMMY: asEFuncType = -1;
pub const asEFuncType_asFUNC_SYSTEM: asEFuncType = 0;
pub const asEFuncType_asFUNC_SCRIPT: asEFuncType = 1;
pub const asEFuncType_asFUNC_INTERFACE: asEFuncType = 2;
pub const asEFuncType_asFUNC_VIRTUAL: asEFuncType = 3;
pub const asEFuncType_asFUNC_FUNCDEF: asEFuncType = 4;
pub const asEFuncType_asFUNC_IMPORTED: asEFuncType = 5;
pub type asEFuncType = i32;
pub type asBYTE = ::std::os::raw::c_uchar;
pub type asWORD = ::std::os::raw::c_ushort;
pub type asUINT = ::std::os::raw::c_uint;
pub type asPWORD = usize;
pub type asDWORD = ::std::os::raw::c_ulong;
pub type asQWORD = u64;
pub type asINT64 = i64;
pub type asFUNCTION_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type asGENFUNC_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptGeneric)>;
pub type asALLOCFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>;
pub type asFREEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type asCLEANENGINEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptEngine)>;
pub type asCLEANMODULEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptModule)>;
pub type asCLEANCONTEXTFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptContext)>;
pub type asCLEANFUNCTIONFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIScriptFunction)>;
pub type asCLEANOBJECTTYPEFUNC_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut asIObjectType)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asCUnknownClass {
    _unused: [u8; 0],
}
pub type asMETHOD_t = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct asSFuncPtr {
    pub ptr: asSFuncPtr__bindgen_ty_1,
    pub flag: asBYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union asSFuncPtr__bindgen_ty_1 {
    pub dummy: [::std::os::raw::c_char; 25usize],
    pub m: asSFuncPtr__bindgen_ty_1__bindgen_ty_1,
    pub f: asSFuncPtr__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u32; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSFuncPtr__bindgen_ty_1__bindgen_ty_1 {
    pub mthd: asMETHOD_t,
    pub dummy: [::std::os::raw::c_char; 17usize],
}
#[test]
fn bindgen_test_layout_asSFuncPtr__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<asSFuncPtr__bindgen_ty_1__bindgen_ty_1>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<asSFuncPtr__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1__bindgen_ty_1>())).mthd as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mthd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1__bindgen_ty_1>())).dummy as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSFuncPtr__bindgen_ty_1__bindgen_ty_2 {
    pub func: asFUNCTION_t,
    pub dummy: [::std::os::raw::c_char; 21usize],
}
#[test]
fn bindgen_test_layout_asSFuncPtr__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<asSFuncPtr__bindgen_ty_1__bindgen_ty_2>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<asSFuncPtr__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1__bindgen_ty_2>())).func as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1__bindgen_ty_2>())).dummy as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_asSFuncPtr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<asSFuncPtr__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(asSFuncPtr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<asSFuncPtr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(asSFuncPtr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSFuncPtr__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
}
#[test]
fn bindgen_test_layout_asSFuncPtr() {
    assert_eq!(
        ::std::mem::size_of::<asSFuncPtr>(),
        32usize,
        concat!("Size of: ", stringify!(asSFuncPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<asSFuncPtr>(),
        4usize,
        concat!("Alignment of ", stringify!(asSFuncPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSFuncPtr>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSFuncPtr>())).flag as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(asSFuncPtr),
            "::",
            stringify!(flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSMessageInfo {
    pub section: *const ::std::os::raw::c_char,
    pub row: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
    pub type_: asEMsgType,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_asSMessageInfo() {
    assert_eq!(
        ::std::mem::size_of::<asSMessageInfo>(),
        20usize,
        concat!("Size of: ", stringify!(asSMessageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<asSMessageInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(asSMessageInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).section as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).row as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).col as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSMessageInfo>())).message as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(asSMessageInfo),
            "::",
            stringify!(message)
        )
    );
}
extern "C" {
    pub fn asCreateScriptEngine(version: asDWORD) -> *mut asIScriptEngine;
}
extern "C" {
    pub fn asGetLibraryVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asGetLibraryOptions() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn asGetActiveContext() -> *mut asIScriptContext;
}
extern "C" {
    pub fn asThreadCleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asSetGlobalMemoryFunctions(
        allocFunc: asALLOCFUNC_t,
        freeFunc: asFREEFUNC_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asResetGlobalMemoryFunctions() -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct asIScriptEngine__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptEngine {
    pub vtable_: *const asIScriptEngine__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptEngine() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptEngine>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptEngine))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptEngine>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptEngine))
    );
}
#[repr(C)]
pub struct asIScriptModule__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptModule {
    pub vtable_: *const asIScriptModule__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptModule() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptModule>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptModule))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptModule>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptModule))
    );
}
#[repr(C)]
pub struct asIScriptContext__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptContext {
    pub vtable_: *const asIScriptContext__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptContext() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptContext>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptContext))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptContext>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptContext))
    );
}
#[repr(C)]
pub struct asIScriptGeneric__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptGeneric {
    pub vtable_: *const asIScriptGeneric__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptGeneric() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptGeneric>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptGeneric))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptGeneric>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptGeneric))
    );
}
#[repr(C)]
pub struct asIScriptObject__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptObject {
    pub vtable_: *const asIScriptObject__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptObject() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptObject>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptObject))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptObject>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptObject))
    );
}
#[repr(C)]
pub struct asIObjectType__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIObjectType {
    pub vtable_: *const asIObjectType__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIObjectType() {
    assert_eq!(
        ::std::mem::size_of::<asIObjectType>(),
        4usize,
        concat!("Size of: ", stringify!(asIObjectType))
    );
    assert_eq!(
        ::std::mem::align_of::<asIObjectType>(),
        4usize,
        concat!("Alignment of ", stringify!(asIObjectType))
    );
}
#[repr(C)]
pub struct asIScriptFunction__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIScriptFunction {
    pub vtable_: *const asIScriptFunction__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIScriptFunction() {
    assert_eq!(
        ::std::mem::size_of::<asIScriptFunction>(),
        4usize,
        concat!("Size of: ", stringify!(asIScriptFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<asIScriptFunction>(),
        4usize,
        concat!("Alignment of ", stringify!(asIScriptFunction))
    );
}
#[repr(C)]
pub struct asIBinaryStream__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIBinaryStream {
    pub vtable_: *const asIBinaryStream__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIBinaryStream() {
    assert_eq!(
        ::std::mem::size_of::<asIBinaryStream>(),
        4usize,
        concat!("Size of: ", stringify!(asIBinaryStream))
    );
    assert_eq!(
        ::std::mem::align_of::<asIBinaryStream>(),
        4usize,
        concat!("Alignment of ", stringify!(asIBinaryStream))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asCSimpleDummy {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_asCSimpleDummy() {
    assert_eq!(
        ::std::mem::size_of::<asCSimpleDummy>(),
        1usize,
        concat!("Size of: ", stringify!(asCSimpleDummy))
    );
    assert_eq!(
        ::std::mem::align_of::<asCSimpleDummy>(),
        1usize,
        concat!("Alignment of ", stringify!(asCSimpleDummy))
    );
}
pub type asSIMPLEMETHOD_t = ::std::option::Option<unsafe extern "C" fn()>;
pub const SINGLE_PTR_SIZE: ::std::os::raw::c_int = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSVMRegisters {
    pub programPointer: *mut asDWORD,
    pub stackFramePointer: *mut asDWORD,
    pub stackPointer: *mut asDWORD,
    pub valueRegister: asQWORD,
    pub objectRegister: *mut ::std::os::raw::c_void,
    pub objectType: *mut asIObjectType,
    pub doProcessSuspend: bool,
    pub ctx: *mut asIScriptContext,
}
#[test]
fn bindgen_test_layout_asSVMRegisters() {
    assert_eq!(
        ::std::mem::size_of::<asSVMRegisters>(),
        36usize,
        concat!("Size of: ", stringify!(asSVMRegisters))
    );
    assert_eq!(
        ::std::mem::align_of::<asSVMRegisters>(),
        4usize,
        concat!("Alignment of ", stringify!(asSVMRegisters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).programPointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(programPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<asSVMRegisters>())).stackFramePointer as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(stackFramePointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).stackPointer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(stackPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).valueRegister as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(valueRegister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).objectRegister as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(objectRegister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).objectType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).doProcessSuspend as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(doProcessSuspend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSVMRegisters>())).ctx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(asSVMRegisters),
            "::",
            stringify!(ctx)
        )
    );
}
pub type asJITFunction =
    ::std::option::Option<unsafe extern "C" fn(registers: *mut asSVMRegisters, jitArg: asPWORD)>;
#[repr(C)]
pub struct asIJITCompiler__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct asIJITCompiler {
    pub vtable_: *const asIJITCompiler__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_asIJITCompiler() {
    assert_eq!(
        ::std::mem::size_of::<asIJITCompiler>(),
        4usize,
        concat!("Size of: ", stringify!(asIJITCompiler))
    );
    assert_eq!(
        ::std::mem::align_of::<asIJITCompiler>(),
        4usize,
        concat!("Alignment of ", stringify!(asIJITCompiler))
    );
}
pub const asEBCInstr_asBC_POP: asEBCInstr = 0;
pub const asEBCInstr_asBC_PUSH: asEBCInstr = 1;
pub const asEBCInstr_asBC_PshC4: asEBCInstr = 2;
pub const asEBCInstr_asBC_PshV4: asEBCInstr = 3;
pub const asEBCInstr_asBC_PSF: asEBCInstr = 4;
pub const asEBCInstr_asBC_SwapPtr: asEBCInstr = 5;
pub const asEBCInstr_asBC_NOT: asEBCInstr = 6;
pub const asEBCInstr_asBC_PshG4: asEBCInstr = 7;
pub const asEBCInstr_asBC_LdGRdR4: asEBCInstr = 8;
pub const asEBCInstr_asBC_CALL: asEBCInstr = 9;
pub const asEBCInstr_asBC_RET: asEBCInstr = 10;
pub const asEBCInstr_asBC_JMP: asEBCInstr = 11;
pub const asEBCInstr_asBC_JZ: asEBCInstr = 12;
pub const asEBCInstr_asBC_JNZ: asEBCInstr = 13;
pub const asEBCInstr_asBC_JS: asEBCInstr = 14;
pub const asEBCInstr_asBC_JNS: asEBCInstr = 15;
pub const asEBCInstr_asBC_JP: asEBCInstr = 16;
pub const asEBCInstr_asBC_JNP: asEBCInstr = 17;
pub const asEBCInstr_asBC_TZ: asEBCInstr = 18;
pub const asEBCInstr_asBC_TNZ: asEBCInstr = 19;
pub const asEBCInstr_asBC_TS: asEBCInstr = 20;
pub const asEBCInstr_asBC_TNS: asEBCInstr = 21;
pub const asEBCInstr_asBC_TP: asEBCInstr = 22;
pub const asEBCInstr_asBC_TNP: asEBCInstr = 23;
pub const asEBCInstr_asBC_NEGi: asEBCInstr = 24;
pub const asEBCInstr_asBC_NEGf: asEBCInstr = 25;
pub const asEBCInstr_asBC_NEGd: asEBCInstr = 26;
pub const asEBCInstr_asBC_INCi16: asEBCInstr = 27;
pub const asEBCInstr_asBC_INCi8: asEBCInstr = 28;
pub const asEBCInstr_asBC_DECi16: asEBCInstr = 29;
pub const asEBCInstr_asBC_DECi8: asEBCInstr = 30;
pub const asEBCInstr_asBC_INCi: asEBCInstr = 31;
pub const asEBCInstr_asBC_DECi: asEBCInstr = 32;
pub const asEBCInstr_asBC_INCf: asEBCInstr = 33;
pub const asEBCInstr_asBC_DECf: asEBCInstr = 34;
pub const asEBCInstr_asBC_INCd: asEBCInstr = 35;
pub const asEBCInstr_asBC_DECd: asEBCInstr = 36;
pub const asEBCInstr_asBC_IncVi: asEBCInstr = 37;
pub const asEBCInstr_asBC_DecVi: asEBCInstr = 38;
pub const asEBCInstr_asBC_BNOT: asEBCInstr = 39;
pub const asEBCInstr_asBC_BAND: asEBCInstr = 40;
pub const asEBCInstr_asBC_BOR: asEBCInstr = 41;
pub const asEBCInstr_asBC_BXOR: asEBCInstr = 42;
pub const asEBCInstr_asBC_BSLL: asEBCInstr = 43;
pub const asEBCInstr_asBC_BSRL: asEBCInstr = 44;
pub const asEBCInstr_asBC_BSRA: asEBCInstr = 45;
pub const asEBCInstr_asBC_COPY: asEBCInstr = 46;
pub const asEBCInstr_asBC_PshC8: asEBCInstr = 47;
pub const asEBCInstr_asBC_PshVPtr: asEBCInstr = 48;
pub const asEBCInstr_asBC_RDSPtr: asEBCInstr = 49;
pub const asEBCInstr_asBC_CMPd: asEBCInstr = 50;
pub const asEBCInstr_asBC_CMPu: asEBCInstr = 51;
pub const asEBCInstr_asBC_CMPf: asEBCInstr = 52;
pub const asEBCInstr_asBC_CMPi: asEBCInstr = 53;
pub const asEBCInstr_asBC_CMPIi: asEBCInstr = 54;
pub const asEBCInstr_asBC_CMPIf: asEBCInstr = 55;
pub const asEBCInstr_asBC_CMPIu: asEBCInstr = 56;
pub const asEBCInstr_asBC_JMPP: asEBCInstr = 57;
pub const asEBCInstr_asBC_PopRPtr: asEBCInstr = 58;
pub const asEBCInstr_asBC_PshRPtr: asEBCInstr = 59;
pub const asEBCInstr_asBC_STR: asEBCInstr = 60;
pub const asEBCInstr_asBC_CALLSYS: asEBCInstr = 61;
pub const asEBCInstr_asBC_CALLBND: asEBCInstr = 62;
pub const asEBCInstr_asBC_SUSPEND: asEBCInstr = 63;
pub const asEBCInstr_asBC_ALLOC: asEBCInstr = 64;
pub const asEBCInstr_asBC_FREE: asEBCInstr = 65;
pub const asEBCInstr_asBC_LOADOBJ: asEBCInstr = 66;
pub const asEBCInstr_asBC_STOREOBJ: asEBCInstr = 67;
pub const asEBCInstr_asBC_GETOBJ: asEBCInstr = 68;
pub const asEBCInstr_asBC_REFCPY: asEBCInstr = 69;
pub const asEBCInstr_asBC_CHKREF: asEBCInstr = 70;
pub const asEBCInstr_asBC_GETOBJREF: asEBCInstr = 71;
pub const asEBCInstr_asBC_GETREF: asEBCInstr = 72;
pub const asEBCInstr_asBC_PshNull: asEBCInstr = 73;
pub const asEBCInstr_asBC_ClrVPtr: asEBCInstr = 74;
pub const asEBCInstr_asBC_OBJTYPE: asEBCInstr = 75;
pub const asEBCInstr_asBC_TYPEID: asEBCInstr = 76;
pub const asEBCInstr_asBC_SetV4: asEBCInstr = 77;
pub const asEBCInstr_asBC_SetV8: asEBCInstr = 78;
pub const asEBCInstr_asBC_ADDSi: asEBCInstr = 79;
pub const asEBCInstr_asBC_CpyVtoV4: asEBCInstr = 80;
pub const asEBCInstr_asBC_CpyVtoV8: asEBCInstr = 81;
pub const asEBCInstr_asBC_CpyVtoR4: asEBCInstr = 82;
pub const asEBCInstr_asBC_CpyVtoR8: asEBCInstr = 83;
pub const asEBCInstr_asBC_CpyVtoG4: asEBCInstr = 84;
pub const asEBCInstr_asBC_CpyRtoV4: asEBCInstr = 85;
pub const asEBCInstr_asBC_CpyRtoV8: asEBCInstr = 86;
pub const asEBCInstr_asBC_CpyGtoV4: asEBCInstr = 87;
pub const asEBCInstr_asBC_WRTV1: asEBCInstr = 88;
pub const asEBCInstr_asBC_WRTV2: asEBCInstr = 89;
pub const asEBCInstr_asBC_WRTV4: asEBCInstr = 90;
pub const asEBCInstr_asBC_WRTV8: asEBCInstr = 91;
pub const asEBCInstr_asBC_RDR1: asEBCInstr = 92;
pub const asEBCInstr_asBC_RDR2: asEBCInstr = 93;
pub const asEBCInstr_asBC_RDR4: asEBCInstr = 94;
pub const asEBCInstr_asBC_RDR8: asEBCInstr = 95;
pub const asEBCInstr_asBC_LDG: asEBCInstr = 96;
pub const asEBCInstr_asBC_LDV: asEBCInstr = 97;
pub const asEBCInstr_asBC_PGA: asEBCInstr = 98;
pub const asEBCInstr_asBC_CmpPtr: asEBCInstr = 99;
pub const asEBCInstr_asBC_VAR: asEBCInstr = 100;
pub const asEBCInstr_asBC_iTOf: asEBCInstr = 101;
pub const asEBCInstr_asBC_fTOi: asEBCInstr = 102;
pub const asEBCInstr_asBC_uTOf: asEBCInstr = 103;
pub const asEBCInstr_asBC_fTOu: asEBCInstr = 104;
pub const asEBCInstr_asBC_sbTOi: asEBCInstr = 105;
pub const asEBCInstr_asBC_swTOi: asEBCInstr = 106;
pub const asEBCInstr_asBC_ubTOi: asEBCInstr = 107;
pub const asEBCInstr_asBC_uwTOi: asEBCInstr = 108;
pub const asEBCInstr_asBC_dTOi: asEBCInstr = 109;
pub const asEBCInstr_asBC_dTOu: asEBCInstr = 110;
pub const asEBCInstr_asBC_dTOf: asEBCInstr = 111;
pub const asEBCInstr_asBC_iTOd: asEBCInstr = 112;
pub const asEBCInstr_asBC_uTOd: asEBCInstr = 113;
pub const asEBCInstr_asBC_fTOd: asEBCInstr = 114;
pub const asEBCInstr_asBC_ADDi: asEBCInstr = 115;
pub const asEBCInstr_asBC_SUBi: asEBCInstr = 116;
pub const asEBCInstr_asBC_MULi: asEBCInstr = 117;
pub const asEBCInstr_asBC_DIVi: asEBCInstr = 118;
pub const asEBCInstr_asBC_MODi: asEBCInstr = 119;
pub const asEBCInstr_asBC_ADDf: asEBCInstr = 120;
pub const asEBCInstr_asBC_SUBf: asEBCInstr = 121;
pub const asEBCInstr_asBC_MULf: asEBCInstr = 122;
pub const asEBCInstr_asBC_DIVf: asEBCInstr = 123;
pub const asEBCInstr_asBC_MODf: asEBCInstr = 124;
pub const asEBCInstr_asBC_ADDd: asEBCInstr = 125;
pub const asEBCInstr_asBC_SUBd: asEBCInstr = 126;
pub const asEBCInstr_asBC_MULd: asEBCInstr = 127;
pub const asEBCInstr_asBC_DIVd: asEBCInstr = 128;
pub const asEBCInstr_asBC_MODd: asEBCInstr = 129;
pub const asEBCInstr_asBC_ADDIi: asEBCInstr = 130;
pub const asEBCInstr_asBC_SUBIi: asEBCInstr = 131;
pub const asEBCInstr_asBC_MULIi: asEBCInstr = 132;
pub const asEBCInstr_asBC_ADDIf: asEBCInstr = 133;
pub const asEBCInstr_asBC_SUBIf: asEBCInstr = 134;
pub const asEBCInstr_asBC_MULIf: asEBCInstr = 135;
pub const asEBCInstr_asBC_SetG4: asEBCInstr = 136;
pub const asEBCInstr_asBC_ChkRefS: asEBCInstr = 137;
pub const asEBCInstr_asBC_ChkNullV: asEBCInstr = 138;
pub const asEBCInstr_asBC_CALLINTF: asEBCInstr = 139;
pub const asEBCInstr_asBC_iTOb: asEBCInstr = 140;
pub const asEBCInstr_asBC_iTOw: asEBCInstr = 141;
pub const asEBCInstr_asBC_SetV1: asEBCInstr = 142;
pub const asEBCInstr_asBC_SetV2: asEBCInstr = 143;
pub const asEBCInstr_asBC_Cast: asEBCInstr = 144;
pub const asEBCInstr_asBC_i64TOi: asEBCInstr = 145;
pub const asEBCInstr_asBC_uTOi64: asEBCInstr = 146;
pub const asEBCInstr_asBC_iTOi64: asEBCInstr = 147;
pub const asEBCInstr_asBC_fTOi64: asEBCInstr = 148;
pub const asEBCInstr_asBC_dTOi64: asEBCInstr = 149;
pub const asEBCInstr_asBC_fTOu64: asEBCInstr = 150;
pub const asEBCInstr_asBC_dTOu64: asEBCInstr = 151;
pub const asEBCInstr_asBC_i64TOf: asEBCInstr = 152;
pub const asEBCInstr_asBC_u64TOf: asEBCInstr = 153;
pub const asEBCInstr_asBC_i64TOd: asEBCInstr = 154;
pub const asEBCInstr_asBC_u64TOd: asEBCInstr = 155;
pub const asEBCInstr_asBC_NEGi64: asEBCInstr = 156;
pub const asEBCInstr_asBC_INCi64: asEBCInstr = 157;
pub const asEBCInstr_asBC_DECi64: asEBCInstr = 158;
pub const asEBCInstr_asBC_BNOT64: asEBCInstr = 159;
pub const asEBCInstr_asBC_ADDi64: asEBCInstr = 160;
pub const asEBCInstr_asBC_SUBi64: asEBCInstr = 161;
pub const asEBCInstr_asBC_MULi64: asEBCInstr = 162;
pub const asEBCInstr_asBC_DIVi64: asEBCInstr = 163;
pub const asEBCInstr_asBC_MODi64: asEBCInstr = 164;
pub const asEBCInstr_asBC_BAND64: asEBCInstr = 165;
pub const asEBCInstr_asBC_BOR64: asEBCInstr = 166;
pub const asEBCInstr_asBC_BXOR64: asEBCInstr = 167;
pub const asEBCInstr_asBC_BSLL64: asEBCInstr = 168;
pub const asEBCInstr_asBC_BSRL64: asEBCInstr = 169;
pub const asEBCInstr_asBC_BSRA64: asEBCInstr = 170;
pub const asEBCInstr_asBC_CMPi64: asEBCInstr = 171;
pub const asEBCInstr_asBC_CMPu64: asEBCInstr = 172;
pub const asEBCInstr_asBC_ChkNullS: asEBCInstr = 173;
pub const asEBCInstr_asBC_ClrHi: asEBCInstr = 174;
pub const asEBCInstr_asBC_JitEntry: asEBCInstr = 175;
pub const asEBCInstr_asBC_CallPtr: asEBCInstr = 176;
pub const asEBCInstr_asBC_FuncPtr: asEBCInstr = 177;
pub const asEBCInstr_asBC_LoadThisR: asEBCInstr = 178;
pub const asEBCInstr_asBC_PshV8: asEBCInstr = 179;
pub const asEBCInstr_asBC_DIVu: asEBCInstr = 180;
pub const asEBCInstr_asBC_MODu: asEBCInstr = 181;
pub const asEBCInstr_asBC_DIVu64: asEBCInstr = 182;
pub const asEBCInstr_asBC_MODu64: asEBCInstr = 183;
pub const asEBCInstr_asBC_LoadRObjR: asEBCInstr = 184;
pub const asEBCInstr_asBC_LoadVObjR: asEBCInstr = 185;
pub const asEBCInstr_asBC_MAXBYTECODE: asEBCInstr = 186;
pub const asEBCInstr_asBC_VarDecl: asEBCInstr = 251;
pub const asEBCInstr_asBC_Block: asEBCInstr = 252;
pub const asEBCInstr_asBC_ObjInfo: asEBCInstr = 253;
pub const asEBCInstr_asBC_LINE: asEBCInstr = 254;
pub const asEBCInstr_asBC_LABEL: asEBCInstr = 255;
pub type asEBCInstr = u32;
pub const asEBCType_asBCTYPE_INFO: asEBCType = 0;
pub const asEBCType_asBCTYPE_NO_ARG: asEBCType = 1;
pub const asEBCType_asBCTYPE_W_ARG: asEBCType = 2;
pub const asEBCType_asBCTYPE_wW_ARG: asEBCType = 3;
pub const asEBCType_asBCTYPE_DW_ARG: asEBCType = 4;
pub const asEBCType_asBCTYPE_rW_DW_ARG: asEBCType = 5;
pub const asEBCType_asBCTYPE_QW_ARG: asEBCType = 6;
pub const asEBCType_asBCTYPE_DW_DW_ARG: asEBCType = 7;
pub const asEBCType_asBCTYPE_wW_rW_rW_ARG: asEBCType = 8;
pub const asEBCType_asBCTYPE_wW_QW_ARG: asEBCType = 9;
pub const asEBCType_asBCTYPE_wW_rW_ARG: asEBCType = 10;
pub const asEBCType_asBCTYPE_rW_ARG: asEBCType = 11;
pub const asEBCType_asBCTYPE_wW_DW_ARG: asEBCType = 12;
pub const asEBCType_asBCTYPE_wW_rW_DW_ARG: asEBCType = 13;
pub const asEBCType_asBCTYPE_rW_rW_ARG: asEBCType = 14;
pub const asEBCType_asBCTYPE_wW_W_ARG: asEBCType = 15;
pub const asEBCType_asBCTYPE_QW_DW_ARG: asEBCType = 16;
pub const asEBCType_asBCTYPE_rW_QW_ARG: asEBCType = 17;
pub const asEBCType_asBCTYPE_W_DW_ARG: asEBCType = 18;
pub const asEBCType_asBCTYPE_rW_W_DW_ARG: asEBCType = 19;
pub type asEBCType = u32;
extern "C" {
    #[link_name = "\u{1}_ZL12asBCTypeSize"]
    pub static mut asBCTypeSize: [::std::os::raw::c_int; 20usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asSBCInfo {
    pub bc: asEBCInstr,
    pub type_: asEBCType,
    pub stackInc: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_asSBCInfo() {
    assert_eq!(
        ::std::mem::size_of::<asSBCInfo>(),
        16usize,
        concat!("Size of: ", stringify!(asSBCInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<asSBCInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(asSBCInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSBCInfo>())).bc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(asSBCInfo),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSBCInfo>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(asSBCInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSBCInfo>())).stackInc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(asSBCInfo),
            "::",
            stringify!(stackInc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<asSBCInfo>())).name as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(asSBCInfo),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZL8asBCInfo"]
    pub static mut asBCInfo: [asSBCInfo; 256usize];
}
extern "C" {
    #[link_name = "\u{1}ASEngine"]
    pub static mut ASEngine: *mut asIScriptEngine;
}
#[repr(C)]
pub struct ScriptString__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct ScriptString {
    pub vtable_: *const ScriptString__bindgen_vtable,
    pub buffer: stlp_std_string,
    pub refCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScriptString() {
    assert_eq!(
        ::std::mem::size_of::<ScriptString>(),
        32usize,
        concat!("Size of: ", stringify!(ScriptString))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptString>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptString>())).buffer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptString),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptString>())).refCount as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptString),
            "::",
            stringify!(refCount)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringC1Ev"]
    pub fn ScriptString_ScriptString(this: *mut ScriptString);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringC1ERKS_"]
    pub fn ScriptString_ScriptString1(this: *mut ScriptString, other: *const ScriptString);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringC1EPKcj"]
    pub fn ScriptString_ScriptString2(
        this: *mut ScriptString,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringC1EPKc"]
    pub fn ScriptString_ScriptString3(this: *mut ScriptString, s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringC1ERKN8stlp_std12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]
    pub fn ScriptString_ScriptString4(this: *mut ScriptString, s: *const stlp_std_string);
}
impl ScriptString {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptString_ScriptString(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(other: *const ScriptString) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptString_ScriptString1(&mut __bindgen_tmp, other);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(s: *const ::std::os::raw::c_char, len: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptString_ScriptString2(&mut __bindgen_tmp, s, len);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(s: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptString_ScriptString3(&mut __bindgen_tmp, s);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(s: *const stlp_std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptString_ScriptString4(&mut __bindgen_tmp, s);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptStringD1Ev"]
    pub fn ScriptString_ScriptString_destructor(this: *mut ScriptString);
}
extern "C" {
    #[link_name = "\u{1}_ZNK12ScriptString6AddRefEv"]
    pub fn ScriptString_AddRef(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK12ScriptString7ReleaseEv"]
    pub fn ScriptString_Release(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString6assignEPKcj"]
    pub fn ScriptString_assign(
        this: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString6assignEPKc"]
    pub fn ScriptString_assign1(
        this: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString6appendEPKcj"]
    pub fn ScriptString_append(
        this: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString6appendEPKc"]
    pub fn ScriptString_append1(
        this: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString7reserveEj"]
    pub fn ScriptString_reserve(this: *mut ::std::os::raw::c_void, count: usize);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ScriptString6resizeEj"]
    pub fn ScriptString_resize(this: *mut ::std::os::raw::c_void, count: usize);
}
#[repr(C)]
pub struct ScriptArray__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ScriptArray {
    pub vtable_: *const ScriptArray__bindgen_vtable,
    pub refCount: ::std::os::raw::c_int,
    pub gcFlag: bool,
    pub objType: *mut asIObjectType,
    pub buffer: *mut ScriptArray_ArrayBuffer,
    pub elementSize: ::std::os::raw::c_int,
    pub cmpFuncId: ::std::os::raw::c_int,
    pub eqFuncId: ::std::os::raw::c_int,
    pub subTypeId: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScriptArray_ArrayBuffer {
    pub numElements: asDWORD,
    pub data: [asBYTE; 1usize],
}
#[test]
fn bindgen_test_layout_ScriptArray_ArrayBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ScriptArray_ArrayBuffer>(),
        8usize,
        concat!("Size of: ", stringify!(ScriptArray_ArrayBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptArray_ArrayBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptArray_ArrayBuffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptArray_ArrayBuffer>())).numElements as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray_ArrayBuffer),
            "::",
            stringify!(numElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray_ArrayBuffer>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray_ArrayBuffer),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_ScriptArray() {
    assert_eq!(
        ::std::mem::size_of::<ScriptArray>(),
        36usize,
        concat!("Size of: ", stringify!(ScriptArray))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptArray>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).refCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).gcFlag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(gcFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).objType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(objType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).elementSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(elementSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).cmpFuncId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(cmpFuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).eqFuncId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(eqFuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptArray>())).subTypeId as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptArray),
            "::",
            stringify!(subTypeId)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArrayC1Ev"]
    pub fn ScriptArray_ScriptArray(this: *mut ScriptArray);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArrayC1ERKS_"]
    pub fn ScriptArray_ScriptArray1(this: *mut ScriptArray, arg1: *const ScriptArray);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArrayC1EjP13asIObjectType"]
    pub fn ScriptArray_ScriptArray2(this: *mut ScriptArray, length: asUINT, ot: *mut asIObjectType);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArrayC1EjPvP13asIObjectType"]
    pub fn ScriptArray_ScriptArray3(
        this: *mut ScriptArray,
        length: asUINT,
        defVal: *mut ::std::os::raw::c_void,
        ot: *mut asIObjectType,
    );
}
impl ScriptArray {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptArray_ScriptArray(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ScriptArray) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptArray_ScriptArray1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(length: asUINT, ot: *mut asIObjectType) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptArray_ScriptArray2(&mut __bindgen_tmp, length, ot);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        length: asUINT,
        defVal: *mut ::std::os::raw::c_void,
        ot: *mut asIObjectType,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptArray_ScriptArray3(&mut __bindgen_tmp, length, defVal, ot);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArrayD1Ev"]
    pub fn ScriptArray_ScriptArray_destructor(this: *mut ScriptArray);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray6AddRefEv"]
    pub fn ScriptArray_AddRef(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray7ReleaseEv"]
    pub fn ScriptArray_Release(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray18GetArrayObjectTypeEv"]
    pub fn ScriptArray_GetArrayObjectType(this: *mut ::std::os::raw::c_void) -> *mut asIObjectType;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray14GetArrayTypeIdEv"]
    pub fn ScriptArray_GetArrayTypeId(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray16GetElementTypeIdEv"]
    pub fn ScriptArray_GetElementTypeId(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray6ResizeEj"]
    pub fn ScriptArray_Resize(this: *mut ::std::os::raw::c_void, numElements: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4GrowEj"]
    pub fn ScriptArray_Grow(this: *mut ::std::os::raw::c_void, numElements: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray6ReduceEj"]
    pub fn ScriptArray_Reduce(this: *mut ::std::os::raw::c_void, numElements: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray7GetSizeEv"]
    pub fn ScriptArray_GetSize(this: *mut ::std::os::raw::c_void) -> asUINT;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ScriptArray14GetElementSizeEv"]
    pub fn ScriptArray_GetElementSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray2AtEj"]
    pub fn ScriptArray_At(
        this: *mut ::std::os::raw::c_void,
        index: asUINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray5FirstEv"]
    pub fn ScriptArray_First(this: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4LastEv"]
    pub fn ScriptArray_Last(this: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray6AssignERKS_"]
    pub fn ScriptArray_Assign(this: *mut ::std::os::raw::c_void, other: *const ScriptArray);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8InsertAtEjPv"]
    pub fn ScriptArray_InsertAt(
        this: *mut ::std::os::raw::c_void,
        index: asUINT,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8RemoveAtEj"]
    pub fn ScriptArray_RemoveAt(this: *mut ::std::os::raw::c_void, index: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray11InsertFirstEPv"]
    pub fn ScriptArray_InsertFirst(
        this: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray11RemoveFirstEv"]
    pub fn ScriptArray_RemoveFirst(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray10InsertLastEPv"]
    pub fn ScriptArray_InsertLast(
        this: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray10RemoveLastEv"]
    pub fn ScriptArray_RemoveLast(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray7SortAscEv"]
    pub fn ScriptArray_SortAsc(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8SortDescEv"]
    pub fn ScriptArray_SortDesc(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray7SortAscEjj"]
    pub fn ScriptArray_SortAsc1(this: *mut ::std::os::raw::c_void, index: asUINT, count: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8SortDescEjj"]
    pub fn ScriptArray_SortDesc1(this: *mut ::std::os::raw::c_void, index: asUINT, count: asUINT);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4SortEjjb"]
    pub fn ScriptArray_Sort(
        this: *mut ::std::os::raw::c_void,
        index: asUINT,
        count: asUINT,
        asc: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray7ReverseEv"]
    pub fn ScriptArray_Reverse(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4FindEPv"]
    pub fn ScriptArray_Find(
        this: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4FindEjPv"]
    pub fn ScriptArray_Find1(
        this: *mut ::std::os::raw::c_void,
        index: asUINT,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray11GetRefCountEv"]
    pub fn ScriptArray_GetRefCount(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray7SetFlagEv"]
    pub fn ScriptArray_SetFlag(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray7GetFlagEv"]
    pub fn ScriptArray_GetFlag(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray14EnumReferencesEP15asIScriptEngine"]
    pub fn ScriptArray_EnumReferences(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray17ReleaseAllHandlesEP15asIScriptEngine"]
    pub fn ScriptArray_ReleaseAllHandles(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4LessEPKvS1_bP16asIScriptContext"]
    pub fn ScriptArray_Less(
        this: *mut ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        asc: bool,
        ctx: *mut asIScriptContext,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray19GetArrayItemPointerEi"]
    pub fn ScriptArray_GetArrayItemPointer(
        this: *mut ::std::os::raw::c_void,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray14GetDataPointerEPv"]
    pub fn ScriptArray_GetDataPointer(
        this: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray4CopyEPvS0_"]
    pub fn ScriptArray_Copy(
        this: *mut ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8PrecacheEv"]
    pub fn ScriptArray_Precache(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray12CheckMaxSizeEj"]
    pub fn ScriptArray_CheckMaxSize(this: *mut ::std::os::raw::c_void, numElements: asUINT)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray6ResizeEij"]
    pub fn ScriptArray_Resize1(
        this: *mut ::std::os::raw::c_void,
        delta: ::std::os::raw::c_int,
        at: asUINT,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8SetValueEjPv"]
    pub fn ScriptArray_SetValue(
        this: *mut ::std::os::raw::c_void,
        index: asUINT,
        value: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray12CreateBufferEPPNS_11ArrayBufferEj"]
    pub fn ScriptArray_CreateBuffer(
        this: *mut ::std::os::raw::c_void,
        buf: *mut *mut ScriptArray_ArrayBuffer,
        numElements: asUINT,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray12DeleteBufferEPNS_11ArrayBufferE"]
    pub fn ScriptArray_DeleteBuffer(
        this: *mut ::std::os::raw::c_void,
        buf: *mut ScriptArray_ArrayBuffer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray10CopyBufferEPNS_11ArrayBufferES1_"]
    pub fn ScriptArray_CopyBuffer(
        this: *mut ::std::os::raw::c_void,
        dst: *mut ScriptArray_ArrayBuffer,
        src: *mut ScriptArray_ArrayBuffer,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray9ConstructEPNS_11ArrayBufferEjj"]
    pub fn ScriptArray_Construct(
        this: *mut ::std::os::raw::c_void,
        buf: *mut ScriptArray_ArrayBuffer,
        start: asUINT,
        end: asUINT,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray8DestructEPNS_11ArrayBufferEjj"]
    pub fn ScriptArray_Destruct(
        this: *mut ::std::os::raw::c_void,
        buf: *mut ScriptArray_ArrayBuffer,
        start: asUINT,
        end: asUINT,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ScriptArray6EqualsEPKvS1_P16asIScriptContext"]
    pub fn ScriptArray_Equals(
        this: *mut ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        ctx: *mut asIScriptContext,
    ) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        12usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        148usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        4usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        16usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gets(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct ScriptFile__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ScriptFile {
    pub vtable_: *const ScriptFile__bindgen_vtable,
    pub mostSignificantByteFirst: bool,
    pub refCount: ::std::os::raw::c_int,
    pub file: *mut FILE,
}
#[test]
fn bindgen_test_layout_ScriptFile() {
    assert_eq!(
        ::std::mem::size_of::<ScriptFile>(),
        16usize,
        concat!("Size of: ", stringify!(ScriptFile))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptFile>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptFile))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptFile>())).mostSignificantByteFirst as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptFile),
            "::",
            stringify!(mostSignificantByteFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptFile>())).refCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptFile),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptFile>())).file as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptFile),
            "::",
            stringify!(file)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFileC1Ev"]
    pub fn ScriptFile_ScriptFile(this: *mut ScriptFile);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFileC1ERKS_"]
    pub fn ScriptFile_ScriptFile1(this: *mut ScriptFile, arg1: *const ScriptFile);
}
impl ScriptFile {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptFile_ScriptFile(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ScriptFile) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptFile_ScriptFile1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ScriptFile6AddRefEv"]
    pub fn ScriptFile_AddRef(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ScriptFile7ReleaseEv"]
    pub fn ScriptFile_Release(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile4OpenERK12ScriptStringS2_"]
    pub fn ScriptFile_Open(
        this: *mut ::std::os::raw::c_void,
        filename: *const ScriptString,
        mode: *const ScriptString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile5CloseEv"]
    pub fn ScriptFile_Close(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ScriptFile7GetSizeEv"]
    pub fn ScriptFile_GetSize(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ScriptFile5IsEOFEv"]
    pub fn ScriptFile_IsEOF(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadStringEjR12ScriptString"]
    pub fn ScriptFile_ReadString(
        this: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
        str: *mut ScriptString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile8ReadLineER12ScriptString"]
    pub fn ScriptFile_ReadLine(
        this: *mut ::std::os::raw::c_void,
        str: *mut ScriptString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile7ReadIntEj"]
    pub fn ScriptFile_ReadInt(this: *mut ::std::os::raw::c_void, bytes: asUINT) -> asINT64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile8ReadUIntEj"]
    pub fn ScriptFile_ReadUInt(this: *mut ::std::os::raw::c_void, bytes: asUINT) -> asQWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile9ReadFloatEv"]
    pub fn ScriptFile_ReadFloat(this: *mut ::std::os::raw::c_void) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadDoubleEv"]
    pub fn ScriptFile_ReadDouble(this: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile11WriteStringERK12ScriptString"]
    pub fn ScriptFile_WriteString(
        this: *mut ::std::os::raw::c_void,
        str: *const ScriptString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile8WriteIntExj"]
    pub fn ScriptFile_WriteInt(
        this: *mut ::std::os::raw::c_void,
        v: asINT64,
        bytes: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile9WriteUIntEyj"]
    pub fn ScriptFile_WriteUInt(
        this: *mut ::std::os::raw::c_void,
        v: asQWORD,
        bytes: asUINT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10WriteFloatEf"]
    pub fn ScriptFile_WriteFloat(
        this: *mut ::std::os::raw::c_void,
        v: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile11WriteDoubleEd"]
    pub fn ScriptFile_WriteDouble(
        this: *mut ::std::os::raw::c_void,
        v: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ScriptFile6GetPosEv"]
    pub fn ScriptFile_GetPos(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile6SetPosEi"]
    pub fn ScriptFile_SetPos(
        this: *mut ::std::os::raw::c_void,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile7MovePosEi"]
    pub fn ScriptFile_MovePos(
        this: *mut ::std::os::raw::c_void,
        delta: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile8ReadWordEv"]
    pub fn ScriptFile_ReadWord(this: *mut ::std::os::raw::c_void) -> *mut ScriptString;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadNumberEv"]
    pub fn ScriptFile_ReadNumber(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile9ReadUint8Ev"]
    pub fn ScriptFile_ReadUint8(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadUint16Ev"]
    pub fn ScriptFile_ReadUint16(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_ushort;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadUint32Ev"]
    pub fn ScriptFile_ReadUint32(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10ReadUint64Ev"]
    pub fn ScriptFile_ReadUint64(this: *mut ::std::os::raw::c_void) -> asQWORD;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile8ReadDataEjR11ScriptArray"]
    pub fn ScriptFile_ReadData(
        this: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_uint,
        data: *mut ScriptArray,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile10WriteUint8Eh"]
    pub fn ScriptFile_WriteUint8(
        this: *mut ::std::os::raw::c_void,
        data: ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile11WriteUint16Et"]
    pub fn ScriptFile_WriteUint16(
        this: *mut ::std::os::raw::c_void,
        data: ::std::os::raw::c_ushort,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile11WriteUint32Ej"]
    pub fn ScriptFile_WriteUint32(
        this: *mut ::std::os::raw::c_void,
        data: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile11WriteUint64Ey"]
    pub fn ScriptFile_WriteUint64(this: *mut ::std::os::raw::c_void, data: asQWORD) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFile9WriteDataER11ScriptArrayj"]
    pub fn ScriptFile_WriteData(
        this: *mut ::std::os::raw::c_void,
        data: *mut ScriptArray,
        count: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ScriptFileD1Ev"]
    pub fn ScriptFile_ScriptFile_destructor(this: *mut ScriptFile);
}
#[repr(C)]
pub struct ScriptDictionary__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct ScriptDictionary {
    pub vtable_: *const ScriptDictionary__bindgen_vtable,
    pub engine: *mut asIScriptEngine,
    pub refCount: ::std::os::raw::c_int,
    pub dict: stlp_std_map,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScriptDictionary_valueStruct {
    pub __bindgen_anon_1: ScriptDictionary_valueStruct__bindgen_ty_1,
    pub typeId: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ScriptDictionary_valueStruct__bindgen_ty_1 {
    pub valueInt: asINT64,
    pub valueFlt: f64,
    pub valueObj: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_ScriptDictionary_valueStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ScriptDictionary_valueStruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ScriptDictionary_valueStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptDictionary_valueStruct__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ScriptDictionary_valueStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptDictionary_valueStruct__bindgen_ty_1>())).valueInt
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptDictionary_valueStruct__bindgen_ty_1>())).valueFlt
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueFlt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptDictionary_valueStruct__bindgen_ty_1>())).valueObj
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueObj)
        )
    );
}
#[test]
fn bindgen_test_layout_ScriptDictionary_valueStruct() {
    assert_eq!(
        ::std::mem::size_of::<ScriptDictionary_valueStruct>(),
        12usize,
        concat!("Size of: ", stringify!(ScriptDictionary_valueStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptDictionary_valueStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptDictionary_valueStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptDictionary_valueStruct>())).typeId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary_valueStruct),
            "::",
            stringify!(typeId)
        )
    );
}
#[test]
fn bindgen_test_layout_ScriptDictionary() {
    assert_eq!(
        ::std::mem::size_of::<ScriptDictionary>(),
        36usize,
        concat!("Size of: ", stringify!(ScriptDictionary))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptDictionary>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptDictionary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptDictionary>())).engine as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptDictionary>())).refCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptDictionary>())).dict as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptDictionary),
            "::",
            stringify!(dict)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionaryC1Ev"]
    pub fn ScriptDictionary_ScriptDictionary(this: *mut ScriptDictionary);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionaryC1ERKS_"]
    pub fn ScriptDictionary_ScriptDictionary1(
        this: *mut ScriptDictionary,
        arg1: *const ScriptDictionary,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionaryC1EP15asIScriptEngine"]
    pub fn ScriptDictionary_ScriptDictionary2(
        this: *mut ScriptDictionary,
        engine: *mut asIScriptEngine,
    );
}
impl ScriptDictionary {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptDictionary_ScriptDictionary(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ScriptDictionary) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptDictionary_ScriptDictionary1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(engine: *mut asIScriptEngine) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptDictionary_ScriptDictionary2(&mut __bindgen_tmp, engine);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary6AddRefEv"]
    pub fn ScriptDictionary_AddRef(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary7ReleaseEv"]
    pub fn ScriptDictionary_Release(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary6AssignERKS_"]
    pub fn ScriptDictionary_Assign(
        this: *mut ::std::os::raw::c_void,
        other: *const ScriptDictionary,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary3SetERK12ScriptStringPvi"]
    pub fn ScriptDictionary_Set(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut ::std::os::raw::c_void,
        typeId: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary3GetERK12ScriptStringPvi"]
    pub fn ScriptDictionary_Get(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut ::std::os::raw::c_void,
        typeId: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary3SetERK12ScriptStringRx"]
    pub fn ScriptDictionary_Set1(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut asINT64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary3GetERK12ScriptStringRx"]
    pub fn ScriptDictionary_Get1(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut asINT64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary3SetERK12ScriptStringRd"]
    pub fn ScriptDictionary_Set2(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary3GetERK12ScriptStringRd"]
    pub fn ScriptDictionary_Get2(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
        value: *mut f64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK16ScriptDictionary6ExistsERK12ScriptString"]
    pub fn ScriptDictionary_Exists(
        this: *mut ::std::os::raw::c_void,
        key: *const ScriptString,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary6DeleteERK12ScriptString"]
    pub fn ScriptDictionary_Delete(this: *mut ::std::os::raw::c_void, key: *const ScriptString);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary9DeleteAllEv"]
    pub fn ScriptDictionary_DeleteAll(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary4KeysEP11ScriptArray"]
    pub fn ScriptDictionary_Keys(
        this: *mut ::std::os::raw::c_void,
        keys: *mut ScriptArray,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary11GetRefCountEv"]
    pub fn ScriptDictionary_GetRefCount(this: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary9SetGCFlagEv"]
    pub fn ScriptDictionary_SetGCFlag(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary9GetGCFlagEv"]
    pub fn ScriptDictionary_GetGCFlag(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary14EnumReferencesEP15asIScriptEngine"]
    pub fn ScriptDictionary_EnumReferences(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary20ReleaseAllReferencesEP15asIScriptEngine"]
    pub fn ScriptDictionary_ReleaseAllReferences(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionaryD1Ev"]
    pub fn ScriptDictionary_ScriptDictionary_destructor(this: *mut ScriptDictionary);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ScriptDictionary9FreeValueERNS_11valueStructE"]
    pub fn ScriptDictionary_FreeValue(
        this: *mut ::std::os::raw::c_void,
        value: *mut ScriptDictionary_valueStruct,
    );
}
#[repr(C)]
pub struct ScriptAny__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct ScriptAny {
    pub vtable_: *const ScriptAny__bindgen_vtable,
    pub refCount: ::std::os::raw::c_int,
    pub engine: *mut asIScriptEngine,
    pub value: ScriptAny_valueStruct,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScriptAny_valueStruct {
    pub __bindgen_anon_1: ScriptAny_valueStruct__bindgen_ty_1,
    pub typeId: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ScriptAny_valueStruct__bindgen_ty_1 {
    pub valueInt: asINT64,
    pub valueFlt: f64,
    pub valueObj: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_ScriptAny_valueStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ScriptAny_valueStruct__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ScriptAny_valueStruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptAny_valueStruct__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ScriptAny_valueStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptAny_valueStruct__bindgen_ty_1>())).valueInt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptAny_valueStruct__bindgen_ty_1>())).valueFlt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueFlt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScriptAny_valueStruct__bindgen_ty_1>())).valueObj as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny_valueStruct__bindgen_ty_1),
            "::",
            stringify!(valueObj)
        )
    );
}
#[test]
fn bindgen_test_layout_ScriptAny_valueStruct() {
    assert_eq!(
        ::std::mem::size_of::<ScriptAny_valueStruct>(),
        12usize,
        concat!("Size of: ", stringify!(ScriptAny_valueStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptAny_valueStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptAny_valueStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptAny_valueStruct>())).typeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny_valueStruct),
            "::",
            stringify!(typeId)
        )
    );
}
#[test]
fn bindgen_test_layout_ScriptAny() {
    assert_eq!(
        ::std::mem::size_of::<ScriptAny>(),
        24usize,
        concat!("Size of: ", stringify!(ScriptAny))
    );
    assert_eq!(
        ::std::mem::align_of::<ScriptAny>(),
        4usize,
        concat!("Alignment of ", stringify!(ScriptAny))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptAny>())).refCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptAny>())).engine as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScriptAny>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScriptAny),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAnyC1Ev"]
    pub fn ScriptAny_ScriptAny(this: *mut ScriptAny);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAnyC1ERKS_"]
    pub fn ScriptAny_ScriptAny1(this: *mut ScriptAny, arg1: *const ScriptAny);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAnyC1EP15asIScriptEngine"]
    pub fn ScriptAny_ScriptAny2(this: *mut ScriptAny, engine: *mut asIScriptEngine);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAnyC1EPviP15asIScriptEngine"]
    pub fn ScriptAny_ScriptAny3(
        this: *mut ScriptAny,
        ref_: *mut ::std::os::raw::c_void,
        refTypeId: ::std::os::raw::c_int,
        engine: *mut asIScriptEngine,
    );
}
impl ScriptAny {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptAny_ScriptAny(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ScriptAny) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptAny_ScriptAny1(&mut __bindgen_tmp, arg1);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(engine: *mut asIScriptEngine) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptAny_ScriptAny2(&mut __bindgen_tmp, engine);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(
        ref_: *mut ::std::os::raw::c_void,
        refTypeId: ::std::os::raw::c_int,
        engine: *mut asIScriptEngine,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        ScriptAny_ScriptAny3(&mut __bindgen_tmp, ref_, refTypeId, engine);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny6AddRefEv"]
    pub fn ScriptAny_AddRef(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny7ReleaseEv"]
    pub fn ScriptAny_Release(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny6AssignERKS_"]
    pub fn ScriptAny_Assign(this: *mut ::std::os::raw::c_void, other: *const ScriptAny);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny8CopyFromEPKS_"]
    pub fn ScriptAny_CopyFrom(
        this: *mut ::std::os::raw::c_void,
        other: *const ScriptAny,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny5StoreEPvi"]
    pub fn ScriptAny_Store(
        this: *mut ::std::os::raw::c_void,
        ref_: *mut ::std::os::raw::c_void,
        refTypeId: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny5StoreERx"]
    pub fn ScriptAny_Store1(this: *mut ::std::os::raw::c_void, value: *mut asINT64);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny5StoreERd"]
    pub fn ScriptAny_Store2(this: *mut ::std::os::raw::c_void, value: *mut f64);
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny8RetrieveEPvi"]
    pub fn ScriptAny_Retrieve(
        this: *mut ::std::os::raw::c_void,
        ref_: *mut ::std::os::raw::c_void,
        refTypeId: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny8RetrieveERx"]
    pub fn ScriptAny_Retrieve1(this: *mut ::std::os::raw::c_void, value: *mut asINT64) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny8RetrieveERd"]
    pub fn ScriptAny_Retrieve2(this: *mut ::std::os::raw::c_void, value: *mut f64) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK9ScriptAny9GetTypeIdEv"]
    pub fn ScriptAny_GetTypeId(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny11GetRefCountEv"]
    pub fn ScriptAny_GetRefCount(this: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny7SetFlagEv"]
    pub fn ScriptAny_SetFlag(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny7GetFlagEv"]
    pub fn ScriptAny_GetFlag(this: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny14EnumReferencesEP15asIScriptEngine"]
    pub fn ScriptAny_EnumReferences(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny17ReleaseAllHandlesEP15asIScriptEngine"]
    pub fn ScriptAny_ReleaseAllHandles(
        this: *mut ::std::os::raw::c_void,
        engine: *mut asIScriptEngine,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAnyD1Ev"]
    pub fn ScriptAny_ScriptAny_destructor(this: *mut ScriptAny);
}
extern "C" {
    #[link_name = "\u{1}_ZN9ScriptAny10FreeObjectEv"]
    pub fn ScriptAny_FreeObject(this: *mut ::std::os::raw::c_void);
}
pub type CritterMutual = CritterCl;
pub type int8 = ::std::os::raw::c_char;
pub type uint8 = ::std::os::raw::c_uchar;
pub type int16 = ::std::os::raw::c_short;
pub type uint16 = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type uint64 = u64;
pub type int64 = i64;
pub type IntPair = stlp_std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>;
pub type UintPair = stlp_std_pair<uint, uint>;
pub type Uint16Pair = stlp_std_pair<uint16, uint16>;
pub type UintVec = stlp_std_vector<uint, stlp_std_allocator>;
pub type UintVecIt = const_iterator;
pub type Uint16Vec = stlp_std_vector<uint16, stlp_std_allocator>;
pub type Uint16VecIt = const_iterator;
pub type IntVec = stlp_std_vector<::std::os::raw::c_int, stlp_std_allocator>;
pub type IntVecIt = const_iterator;
pub type UintPairVec = stlp_std_vector<UintPair, stlp_std_allocator>;
pub type Uint16PairVec = stlp_std_vector<Uint16Pair, stlp_std_allocator>;
pub type IntSet = stlp_std_set;
pub type IntSetIt = u8;
pub type UintSet = stlp_std_set;
pub type UintSetIt = u8;
pub type IntMap = stlp_std_map;
pub type IntMapIt = u8;
pub type NpcPlaneVec = stlp_std_vector<*mut NpcPlane, stlp_std_allocator>;
pub type NpcPlaneVecIt = const_iterator;
pub type CrVec = stlp_std_vector<*mut Critter, stlp_std_allocator>;
pub type CrVecIt = const_iterator;
pub type CrClVec = stlp_std_vector<*mut CritterCl, stlp_std_allocator>;
pub type CrClVecIt = const_iterator;
pub type ClVec = stlp_std_vector<*mut Client, stlp_std_allocator>;
pub type ClVecIt = const_iterator;
pub type PcVec = stlp_std_vector<*mut Npc, stlp_std_allocator>;
pub type PcVecIt = const_iterator;
pub type ItemVec = stlp_std_vector<*mut Item, stlp_std_allocator>;
pub type ItemVecIt = const_iterator;
pub type MapObjectVec = stlp_std_vector<*mut MapObject, stlp_std_allocator>;
pub type MapObjectVecIt = const_iterator;
pub type MapVec = stlp_std_vector<*mut Map, stlp_std_allocator>;
pub type MapVecIt = const_iterator;
pub type LocVec = stlp_std_vector<*mut Location, stlp_std_allocator>;
pub type LocVecIt = const_iterator;
extern "C" {
    #[link_name = "\u{1}Log"]
    pub static mut Log:
        ::std::option::Option<unsafe extern "C" fn(frmt: *const ::std::os::raw::c_char, ...)>;
}
extern "C" {
    #[link_name = "\u{1}ScriptGetActiveContext"]
    pub static mut ScriptGetActiveContext:
        ::std::option::Option<unsafe extern "C" fn() -> *mut asIScriptContext>;
}
extern "C" {
    pub fn ScriptGetLibraryOptions() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ScriptGetLibraryVersion() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct GameOptions {
    pub YearStart: uint16,
    pub YearStartFTLo: uint,
    pub YearStartFTHi: uint,
    pub Year: uint16,
    pub Month: uint16,
    pub Day: uint16,
    pub Hour: uint16,
    pub Minute: uint16,
    pub Second: uint16,
    pub FullSecondStart: uint,
    pub FullSecond: uint,
    pub TimeMultiplier: uint16,
    pub GameTimeTick: uint,
    pub DisableTcpNagle: bool,
    pub DisableZlibCompression: bool,
    pub FloodSize: uint,
    pub NoAnswerShuffle: bool,
    pub DialogDemandRecheck: bool,
    pub FixBoyDefaultExperience: uint,
    pub SneakDivider: uint,
    pub LevelCap: uint,
    pub LevelCapAddExperience: bool,
    pub LookNormal: uint,
    pub LookMinimum: uint,
    pub GlobalMapMaxGroupCount: uint,
    pub CritterIdleTick: uint,
    pub TurnBasedTick: uint,
    pub DeadHitPoints: ::std::os::raw::c_int,
    pub Breaktime: uint,
    pub TimeoutTransfer: uint,
    pub TimeoutBattle: uint,
    pub ApRegeneration: uint,
    pub RtApCostCritterWalk: uint,
    pub RtApCostCritterRun: uint,
    pub RtApCostMoveItemContainer: uint,
    pub RtApCostMoveItemInventory: uint,
    pub RtApCostPickItem: uint,
    pub RtApCostDropItem: uint,
    pub RtApCostReloadWeapon: uint,
    pub RtApCostPickCritter: uint,
    pub RtApCostUseItem: uint,
    pub RtApCostUseSkill: uint,
    pub RtAlwaysRun: bool,
    pub TbApCostCritterMove: uint,
    pub TbApCostMoveItemContainer: uint,
    pub TbApCostMoveItemInventory: uint,
    pub TbApCostPickItem: uint,
    pub TbApCostDropItem: uint,
    pub TbApCostReloadWeapon: uint,
    pub TbApCostPickCritter: uint,
    pub TbApCostUseItem: uint,
    pub TbApCostUseSkill: uint,
    pub TbAlwaysRun: bool,
    pub ApCostAimEyes: uint,
    pub ApCostAimHead: uint,
    pub ApCostAimGroin: uint,
    pub ApCostAimTorso: uint,
    pub ApCostAimArms: uint,
    pub ApCostAimLegs: uint,
    pub RunOnCombat: bool,
    pub RunOnTransfer: bool,
    pub GlobalMapWidth: uint,
    pub GlobalMapHeight: uint,
    pub GlobalMapZoneLength: uint,
    pub GlobalMapMoveTime: uint,
    pub BagRefreshTime: uint,
    pub AttackAnimationsMinDist: uint,
    pub WhisperDist: uint,
    pub ShoutDist: uint,
    pub LookChecks: ::std::os::raw::c_int,
    pub LookDir: [uint; 5usize],
    pub LookSneakDir: [uint; 5usize],
    pub LookWeight: uint,
    pub CustomItemCost: bool,
    pub RegistrationTimeout: uint,
    pub AccountPlayTime: uint,
    pub LoggingVars: bool,
    pub ScriptRunSuspendTimeout: uint,
    pub ScriptRunMessageTimeout: uint,
    pub TalkDistance: uint,
    pub NpcMaxTalkers: uint,
    pub MinNameLength: uint,
    pub MaxNameLength: uint,
    pub DlgTalkMinTime: uint,
    pub DlgBarterMinTime: uint,
    pub MinimumOfflineTime: uint,
    pub StartSpecialPoints: ::std::os::raw::c_int,
    pub StartTagSkillPoints: ::std::os::raw::c_int,
    pub SkillMaxValue: ::std::os::raw::c_int,
    pub SkillModAdd2: ::std::os::raw::c_int,
    pub SkillModAdd3: ::std::os::raw::c_int,
    pub SkillModAdd4: ::std::os::raw::c_int,
    pub SkillModAdd5: ::std::os::raw::c_int,
    pub SkillModAdd6: ::std::os::raw::c_int,
    pub AbsoluteOffsets: bool,
    pub SkillBegin: uint,
    pub SkillEnd: uint,
    pub TimeoutBegin: uint,
    pub TimeoutEnd: uint,
    pub KillBegin: uint,
    pub KillEnd: uint,
    pub PerkBegin: uint,
    pub PerkEnd: uint,
    pub AddictionBegin: uint,
    pub AddictionEnd: uint,
    pub KarmaBegin: uint,
    pub KarmaEnd: uint,
    pub DamageBegin: uint,
    pub DamageEnd: uint,
    pub TraitBegin: uint,
    pub TraitEnd: uint,
    pub ReputationBegin: uint,
    pub ReputationEnd: uint,
    pub ReputationLoved: ::std::os::raw::c_int,
    pub ReputationLiked: ::std::os::raw::c_int,
    pub ReputationAccepted: ::std::os::raw::c_int,
    pub ReputationNeutral: ::std::os::raw::c_int,
    pub ReputationAntipathy: ::std::os::raw::c_int,
    pub ReputationHated: ::std::os::raw::c_int,
    pub MapHexagonal: bool,
    pub MapHexWidth: ::std::os::raw::c_int,
    pub MapHexHeight: ::std::os::raw::c_int,
    pub MapHexLineHeight: ::std::os::raw::c_int,
    pub MapTileOffsX: ::std::os::raw::c_int,
    pub MapTileOffsY: ::std::os::raw::c_int,
    pub MapRoofOffsX: ::std::os::raw::c_int,
    pub MapRoofOffsY: ::std::os::raw::c_int,
    pub MapRoofSkipSize: ::std::os::raw::c_int,
    pub MapCameraAngle: f32,
    pub MapSmoothPath: bool,
    pub MapDataPrefix: ScriptString,
    pub Quit: bool,
    pub OpenGLDebug: bool,
    pub AssimpLogging: bool,
    pub MouseX: ::std::os::raw::c_int,
    pub MouseY: ::std::os::raw::c_int,
    pub ScrOx: ::std::os::raw::c_int,
    pub ScrOy: ::std::os::raw::c_int,
    pub ShowTile: bool,
    pub ShowRoof: bool,
    pub ShowItem: bool,
    pub ShowScen: bool,
    pub ShowWall: bool,
    pub ShowCrit: bool,
    pub ShowFast: bool,
    pub ShowPlayerNames: bool,
    pub ShowNpcNames: bool,
    pub ShowCritId: bool,
    pub ScrollKeybLeft: bool,
    pub ScrollKeybRight: bool,
    pub ScrollKeybUp: bool,
    pub ScrollKeybDown: bool,
    pub ScrollMouseLeft: bool,
    pub ScrollMouseRight: bool,
    pub ScrollMouseUp: bool,
    pub ScrollMouseDown: bool,
    pub ShowGroups: bool,
    pub HelpInfo: bool,
    pub DebugInfo: bool,
    pub DebugNet: bool,
    pub DebugSprites: bool,
    pub FullScreen: bool,
    pub VSync: bool,
    pub FlushVal: ::std::os::raw::c_int,
    pub BaseTexture: ::std::os::raw::c_int,
    pub Light: ::std::os::raw::c_int,
    pub Host: ScriptString,
    pub Port: uint,
    pub ProxyType: uint,
    pub ProxyHost: ScriptString,
    pub ProxyPort: uint,
    pub ProxyUser: ScriptString,
    pub ProxyPass: ScriptString,
    pub Name: ScriptString,
    pub ScrollDelay: ::std::os::raw::c_int,
    pub ScrollStep: uint,
    pub ScrollCheck: bool,
    pub FoDataPath: ScriptString,
    pub FixedFPS: ::std::os::raw::c_int,
    pub MsgboxInvert: bool,
    pub ChangeLang: ::std::os::raw::c_int,
    pub DefaultCombatMode: uint8,
    pub MessNotify: bool,
    pub SoundNotify: bool,
    pub AlwaysOnTop: bool,
    pub TextDelay: uint,
    pub DamageHitDelay: uint,
    pub ScreenWidth: ::std::os::raw::c_int,
    pub ScreenHeight: ::std::os::raw::c_int,
    pub MultiSampling: ::std::os::raw::c_int,
    pub MouseScroll: bool,
    pub IndicatorType: ::std::os::raw::c_int,
    pub DoubleClickTime: uint,
    pub RoofAlpha: uint8,
    pub HideCursor: bool,
    pub DisableLMenu: bool,
    pub DisableMouseEvents: bool,
    pub DisableKeyboardEvents: bool,
    pub HidePassword: bool,
    pub PlayerOffAppendix: ScriptString,
    pub CombatMessagesType: ::std::os::raw::c_int,
    pub DisableDrawScreens: bool,
    pub Animation3dSmoothTime: uint,
    pub Animation3dFPS: uint,
    pub RunModMul: ::std::os::raw::c_int,
    pub RunModDiv: ::std::os::raw::c_int,
    pub RunModAdd: ::std::os::raw::c_int,
    pub MapZooming: bool,
    pub SpritesZoom: f32,
    pub SpritesZoomMax: f32,
    pub SpritesZoomMin: f32,
    pub EffectValues: [f32; 10usize],
    pub AlwaysRun: bool,
    pub AlwaysRunMoveDist: ::std::os::raw::c_int,
    pub AlwaysRunUseDist: ::std::os::raw::c_int,
    pub KeyboardRemap: ScriptString,
    pub CritterFidgetTime: uint,
    pub Anim2CombatBegin: uint,
    pub Anim2CombatIdle: uint,
    pub Anim2CombatEnd: uint,
    pub ClientPath: ScriptString,
    pub ServerPath: ScriptString,
    pub ShowCorners: bool,
    pub ShowCuttedSprites: bool,
    pub ShowDrawOrder: bool,
    pub SplitTilesCollection: bool,
    pub CritterChangeParameter:
        ::std::option::Option<unsafe extern "C" fn(cr: *mut Critter, index: uint)>,
    pub CritterTypes: *mut CritterType,
    pub ClientMap: *mut Field,
    pub ClientMapLight: *mut uint8,
    pub ClientMapWidth: uint,
    pub ClientMapHeight: uint,
    pub GetDrawingSprites:
        ::std::option::Option<unsafe extern "C" fn(count: *mut uint) -> *mut *mut Sprite>,
    pub GetSpriteInfo: ::std::option::Option<unsafe extern "C" fn(sprId: uint) -> *mut SpriteInfo>,
    pub GetSpriteColor: ::std::option::Option<
        unsafe extern "C" fn(
            sprId: uint,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            affectZoom: bool,
        ) -> uint,
    >,
    pub IsSpriteHit: ::std::option::Option<
        unsafe extern "C" fn(
            sprite: *mut Sprite,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            checkEgg: bool,
        ) -> bool,
    >,
    pub GetNameByHash:
        ::std::option::Option<unsafe extern "C" fn(hash: uint) -> *const ::std::os::raw::c_char>,
    pub GetHashByName:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> uint>,
    pub ScriptLoadModule: ::std::option::Option<
        unsafe extern "C" fn(moduleName: *const ::std::os::raw::c_char) -> bool,
    >,
    pub ScriptBind: ::std::option::Option<
        unsafe extern "C" fn(
            moduleName: *const ::std::os::raw::c_char,
            funcDecl: *const ::std::os::raw::c_char,
            temporaryId: bool,
        ) -> uint,
    >,
    pub ScriptPrepare: ::std::option::Option<unsafe extern "C" fn(bindId: uint) -> bool>,
    pub ScriptSetArgInt8: ::std::option::Option<unsafe extern "C" fn(value: int8)>,
    pub ScriptSetArgInt16: ::std::option::Option<unsafe extern "C" fn(value: int16)>,
    pub ScriptSetArgInt: ::std::option::Option<unsafe extern "C" fn(value: ::std::os::raw::c_int)>,
    pub ScriptSetArgInt64: ::std::option::Option<unsafe extern "C" fn(value: int64)>,
    pub ScriptSetArgUInt8: ::std::option::Option<unsafe extern "C" fn(value: uint8)>,
    pub ScriptSetArgUInt16: ::std::option::Option<unsafe extern "C" fn(value: uint16)>,
    pub ScriptSetArgUInt: ::std::option::Option<unsafe extern "C" fn(value: uint)>,
    pub ScriptSetArgUInt64: ::std::option::Option<unsafe extern "C" fn(value: uint64)>,
    pub ScriptSetArgBool: ::std::option::Option<unsafe extern "C" fn(value: bool)>,
    pub ScriptSetArgFloat: ::std::option::Option<unsafe extern "C" fn(value: f32)>,
    pub ScriptSetArgDouble: ::std::option::Option<unsafe extern "C" fn(value: f64)>,
    pub ScriptSetArgObject:
        ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>,
    pub ScriptSetArgAddress:
        ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>,
    pub ScriptRunPrepared: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ScriptGetReturnedInt8: ::std::option::Option<unsafe extern "C" fn() -> int8>,
    pub ScriptGetReturnedInt16: ::std::option::Option<unsafe extern "C" fn() -> int16>,
    pub ScriptGetReturnedInt:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub ScriptGetReturnedInt64: ::std::option::Option<unsafe extern "C" fn() -> int64>,
    pub ScriptGetReturnedUInt8: ::std::option::Option<unsafe extern "C" fn() -> uint8>,
    pub ScriptGetReturnedUInt16: ::std::option::Option<unsafe extern "C" fn() -> uint16>,
    pub ScriptGetReturnedUInt: ::std::option::Option<unsafe extern "C" fn() -> uint>,
    pub ScriptGetReturnedUInt64: ::std::option::Option<unsafe extern "C" fn() -> uint64>,
    pub ScriptGetReturnedBool: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ScriptGetReturnedFloat: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub ScriptGetReturnedDouble: ::std::option::Option<unsafe extern "C" fn() -> f64>,
    pub ScriptGetReturnedObject:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub ScriptGetReturnedAddress:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub GetUseApCost: ::std::option::Option<
        unsafe extern "C" fn(cr: *mut CritterMutual, item: *mut Item, mode: uint8) -> uint,
    >,
    pub GetAttackDistantion: ::std::option::Option<
        unsafe extern "C" fn(cr: *mut CritterMutual, item: *mut Item, mode: uint8) -> uint,
    >,
}
#[test]
fn bindgen_test_layout_GameOptions() {
    assert_eq!(
        ::std::mem::size_of::<GameOptions>(),
        1312usize,
        concat!("Size of: ", stringify!(GameOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<GameOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(GameOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).YearStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(YearStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).YearStartFTLo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(YearStartFTLo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).YearStartFTHi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(YearStartFTHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Year as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Month as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Day as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Hour as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Minute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Second as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FullSecondStart as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FullSecondStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FullSecond as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FullSecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TimeMultiplier as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TimeMultiplier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GameTimeTick as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GameTimeTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DisableTcpNagle as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableTcpNagle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).DisableZlibCompression as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableZlibCompression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FloodSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FloodSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).NoAnswerShuffle as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(NoAnswerShuffle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DialogDemandRecheck as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DialogDemandRecheck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).FixBoyDefaultExperience as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FixBoyDefaultExperience)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SneakDivider as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SneakDivider)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LevelCap as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LevelCap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).LevelCapAddExperience as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LevelCapAddExperience)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookNormal as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookNormal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookMinimum as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookMinimum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).GlobalMapMaxGroupCount as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GlobalMapMaxGroupCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).CritterIdleTick as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CritterIdleTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TurnBasedTick as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TurnBasedTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DeadHitPoints as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DeadHitPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Breaktime as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Breaktime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TimeoutTransfer as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TimeoutTransfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TimeoutBattle as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TimeoutBattle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApRegeneration as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApRegeneration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostCritterWalk as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostCritterWalk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostCritterRun as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostCritterRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).RtApCostMoveItemContainer as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostMoveItemContainer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).RtApCostMoveItemInventory as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostMoveItemInventory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostPickItem as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostPickItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostDropItem as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostDropItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).RtApCostReloadWeapon as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostReloadWeapon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostPickCritter as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostPickCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostUseItem as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostUseItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtApCostUseSkill as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtApCostUseSkill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RtAlwaysRun as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RtAlwaysRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostCritterMove as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostCritterMove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).TbApCostMoveItemContainer as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostMoveItemContainer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).TbApCostMoveItemInventory as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostMoveItemInventory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostPickItem as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostPickItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostDropItem as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostDropItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).TbApCostReloadWeapon as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostReloadWeapon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostPickCritter as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostPickCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostUseItem as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostUseItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbApCostUseSkill as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbApCostUseSkill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TbAlwaysRun as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TbAlwaysRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimEyes as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimEyes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimHead as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimHead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimGroin as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimGroin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimTorso as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimTorso)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimArms as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimArms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ApCostAimLegs as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ApCostAimLegs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RunOnCombat as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RunOnCombat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RunOnTransfer as *const _ as usize },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RunOnTransfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GlobalMapWidth as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GlobalMapWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GlobalMapHeight as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GlobalMapHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GlobalMapZoneLength as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GlobalMapZoneLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GlobalMapMoveTime as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GlobalMapMoveTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).BagRefreshTime as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(BagRefreshTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).AttackAnimationsMinDist as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AttackAnimationsMinDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).WhisperDist as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(WhisperDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShoutDist as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShoutDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookChecks as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookChecks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookDir as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookSneakDir as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookSneakDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LookWeight as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LookWeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).CustomItemCost as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CustomItemCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RegistrationTimeout as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RegistrationTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AccountPlayTime as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AccountPlayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).LoggingVars as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(LoggingVars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptRunSuspendTimeout as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptRunSuspendTimeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptRunMessageTimeout as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptRunMessageTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TalkDistance as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TalkDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).NpcMaxTalkers as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(NpcMaxTalkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MinNameLength as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MinNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MaxNameLength as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MaxNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DlgTalkMinTime as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DlgTalkMinTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DlgBarterMinTime as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DlgBarterMinTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MinimumOfflineTime as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MinimumOfflineTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).StartSpecialPoints as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(StartSpecialPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).StartTagSkillPoints as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(StartTagSkillPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillMaxValue as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillMaxValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillModAdd2 as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillModAdd2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillModAdd3 as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillModAdd3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillModAdd4 as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillModAdd4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillModAdd5 as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillModAdd5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillModAdd6 as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillModAdd6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AbsoluteOffsets as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AbsoluteOffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillBegin as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SkillEnd as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SkillEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TimeoutBegin as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TimeoutBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TimeoutEnd as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TimeoutEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).KillBegin as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(KillBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).KillEnd as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(KillEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).PerkBegin as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(PerkBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).PerkEnd as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(PerkEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AddictionBegin as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AddictionBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AddictionEnd as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AddictionEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).KarmaBegin as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(KarmaBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).KarmaEnd as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(KarmaEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DamageBegin as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DamageBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DamageEnd as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DamageEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TraitBegin as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TraitBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TraitEnd as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TraitEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationBegin as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationEnd as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationLoved as *const _ as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationLoved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationLiked as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationLiked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationAccepted as *const _ as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationAccepted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationNeutral as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationNeutral)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationAntipathy as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationAntipathy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ReputationHated as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ReputationHated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapHexagonal as *const _ as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapHexagonal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapHexWidth as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapHexWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapHexHeight as *const _ as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapHexHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapHexLineHeight as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapHexLineHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapTileOffsX as *const _ as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapTileOffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapTileOffsY as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapTileOffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapRoofOffsX as *const _ as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapRoofOffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapRoofOffsY as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapRoofOffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapRoofSkipSize as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapRoofSkipSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapCameraAngle as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapCameraAngle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapSmoothPath as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapSmoothPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapDataPrefix as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapDataPrefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Quit as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Quit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).OpenGLDebug as *const _ as usize },
        561usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(OpenGLDebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AssimpLogging as *const _ as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AssimpLogging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MouseX as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MouseX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MouseY as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MouseY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrOx as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrOx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrOy as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrOy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowTile as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowTile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowRoof as *const _ as usize },
        581usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowRoof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowItem as *const _ as usize },
        582usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowScen as *const _ as usize },
        583usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowScen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowWall as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowWall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowCrit as *const _ as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowCrit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowFast as *const _ as usize },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowFast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowPlayerNames as *const _ as usize },
        587usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowPlayerNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowNpcNames as *const _ as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowNpcNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowCritId as *const _ as usize },
        589usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowCritId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollKeybLeft as *const _ as usize },
        590usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollKeybLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollKeybRight as *const _ as usize },
        591usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollKeybRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollKeybUp as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollKeybUp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollKeybDown as *const _ as usize },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollKeybDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollMouseLeft as *const _ as usize },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollMouseLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollMouseRight as *const _ as usize },
        595usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollMouseRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollMouseUp as *const _ as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollMouseUp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollMouseDown as *const _ as usize },
        597usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollMouseDown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowGroups as *const _ as usize },
        598usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).HelpInfo as *const _ as usize },
        599usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(HelpInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DebugInfo as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DebugInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DebugNet as *const _ as usize },
        601usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DebugNet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DebugSprites as *const _ as usize },
        602usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DebugSprites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FullScreen as *const _ as usize },
        603usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FullScreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).VSync as *const _ as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(VSync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FlushVal as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FlushVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).BaseTexture as *const _ as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(BaseTexture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Light as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Light)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Host as *const _ as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Port as *const _ as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ProxyType as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ProxyType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ProxyHost as *const _ as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ProxyHost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ProxyPort as *const _ as usize },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ProxyPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ProxyUser as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ProxyUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ProxyPass as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ProxyPass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Name as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollDelay as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollStep as *const _ as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollStep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScrollCheck as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScrollCheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FoDataPath as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FoDataPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).FixedFPS as *const _ as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(FixedFPS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MsgboxInvert as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MsgboxInvert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ChangeLang as *const _ as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ChangeLang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DefaultCombatMode as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DefaultCombatMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MessNotify as *const _ as usize },
        849usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MessNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SoundNotify as *const _ as usize },
        850usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SoundNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AlwaysOnTop as *const _ as usize },
        851usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AlwaysOnTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).TextDelay as *const _ as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(TextDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DamageHitDelay as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DamageHitDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScreenWidth as *const _ as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScreenWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScreenHeight as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScreenHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MultiSampling as *const _ as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MultiSampling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MouseScroll as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MouseScroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).IndicatorType as *const _ as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(IndicatorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DoubleClickTime as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RoofAlpha as *const _ as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RoofAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).HideCursor as *const _ as usize },
        885usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(HideCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DisableLMenu as *const _ as usize },
        886usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableLMenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DisableMouseEvents as *const _ as usize },
        887usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableMouseEvents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).DisableKeyboardEvents as *const _ as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableKeyboardEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).HidePassword as *const _ as usize },
        889usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(HidePassword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).PlayerOffAppendix as *const _ as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(PlayerOffAppendix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).CombatMessagesType as *const _ as usize },
        924usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CombatMessagesType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).DisableDrawScreens as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(DisableDrawScreens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).Animation3dSmoothTime as *const _ as usize
        },
        932usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Animation3dSmoothTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Animation3dFPS as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Animation3dFPS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RunModMul as *const _ as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RunModMul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RunModDiv as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RunModDiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).RunModAdd as *const _ as usize },
        948usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(RunModAdd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).MapZooming as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(MapZooming)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SpritesZoom as *const _ as usize },
        956usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SpritesZoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SpritesZoomMax as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SpritesZoomMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).SpritesZoomMin as *const _ as usize },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SpritesZoomMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).EffectValues as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(EffectValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AlwaysRun as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AlwaysRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AlwaysRunMoveDist as *const _ as usize },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AlwaysRunMoveDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).AlwaysRunUseDist as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(AlwaysRunUseDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).KeyboardRemap as *const _ as usize },
        1020usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(KeyboardRemap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).CritterFidgetTime as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CritterFidgetTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Anim2CombatBegin as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Anim2CombatBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Anim2CombatIdle as *const _ as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Anim2CombatIdle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).Anim2CombatEnd as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(Anim2CombatEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ClientPath as *const _ as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ClientPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ServerPath as *const _ as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ServerPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowCorners as *const _ as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowCorners)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowCuttedSprites as *const _ as usize },
        1133usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowCuttedSprites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ShowDrawOrder as *const _ as usize },
        1134usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ShowDrawOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).SplitTilesCollection as *const _ as usize
        },
        1135usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(SplitTilesCollection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).CritterChangeParameter as *const _ as usize
        },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CritterChangeParameter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).CritterTypes as *const _ as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(CritterTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ClientMap as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ClientMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ClientMapLight as *const _ as usize },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ClientMapLight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ClientMapWidth as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ClientMapWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ClientMapHeight as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ClientMapHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetDrawingSprites as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetDrawingSprites)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetSpriteInfo as *const _ as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetSpriteInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetSpriteColor as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetSpriteColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).IsSpriteHit as *const _ as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(IsSpriteHit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetNameByHash as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetNameByHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetHashByName as *const _ as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetHashByName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptLoadModule as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptLoadModule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptBind as *const _ as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptBind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptPrepare as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptPrepare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgInt8 as *const _ as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgInt8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgInt16 as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgInt16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgInt as *const _ as usize },
        1204usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgInt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgInt64 as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgInt64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgUInt8 as *const _ as usize },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgUInt8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgUInt16 as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgUInt16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgUInt as *const _ as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgUInt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgUInt64 as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgUInt64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgBool as *const _ as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgBool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgFloat as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgFloat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgDouble as *const _ as usize },
        1236usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgObject as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgObject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptSetArgAddress as *const _ as usize },
        1244usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptSetArgAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).ScriptRunPrepared as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptRunPrepared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedInt8 as *const _ as usize
        },
        1252usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedInt8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedInt16 as *const _ as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedInt16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedInt as *const _ as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedInt64 as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedInt64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedUInt8 as *const _ as usize
        },
        1268usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedUInt8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedUInt16 as *const _ as usize
        },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedUInt16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedUInt as *const _ as usize
        },
        1276usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedUInt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedUInt64 as *const _ as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedUInt64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedBool as *const _ as usize
        },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedBool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedFloat as *const _ as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedDouble as *const _ as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedDouble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedObject as *const _ as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedObject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GameOptions>())).ScriptGetReturnedAddress as *const _ as usize
        },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(ScriptGetReturnedAddress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetUseApCost as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetUseApCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameOptions>())).GetAttackDistantion as *const _ as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(GameOptions),
            "::",
            stringify!(GetAttackDistantion)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}FOnline"]
    pub static mut FOnline: *mut GameOptions;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mutex {
    pub Locker: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_Mutex() {
    assert_eq!(
        ::std::mem::size_of::<Mutex>(),
        24usize,
        concat!("Size of: ", stringify!(Mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<Mutex>(),
        4usize,
        concat!("Alignment of ", stringify!(Mutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Mutex>())).Locker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Mutex),
            "::",
            stringify!(Locker)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Spinlock {
    pub Locker: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_Spinlock() {
    assert_eq!(
        ::std::mem::size_of::<Spinlock>(),
        4usize,
        concat!("Size of: ", stringify!(Spinlock))
    );
    assert_eq!(
        ::std::mem::align_of::<Spinlock>(),
        4usize,
        concat!("Alignment of ", stringify!(Spinlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spinlock>())).Locker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Spinlock),
            "::",
            stringify!(Locker)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SyncObj {
    pub CurMngr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SyncObj() {
    assert_eq!(
        ::std::mem::size_of::<SyncObj>(),
        4usize,
        concat!("Size of: ", stringify!(SyncObj))
    );
    assert_eq!(
        ::std::mem::align_of::<SyncObj>(),
        4usize,
        concat!("Alignment of ", stringify!(SyncObj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SyncObj>())).CurMngr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SyncObj),
            "::",
            stringify!(CurMngr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CritterType {
    pub Enabled: bool,
    pub Name: [::std::os::raw::c_char; 64usize],
    pub SoundName: [::std::os::raw::c_char; 64usize],
    pub Alias: uint,
    pub Multihex: uint,
    pub AnimType: ::std::os::raw::c_int,
    pub CanWalk: bool,
    pub CanRun: bool,
    pub CanAim: bool,
    pub CanArmor: bool,
    pub CanRotate: bool,
    pub Anim1: [bool; 37usize],
}
#[test]
fn bindgen_test_layout_CritterType() {
    assert_eq!(
        ::std::mem::size_of::<CritterType>(),
        188usize,
        concat!("Size of: ", stringify!(CritterType))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterType>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).Enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(Enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).Name as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).SoundName as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(SoundName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).Alias as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(Alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).Multihex as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(Multihex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).AnimType as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(AnimType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).CanWalk as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(CanWalk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).CanRun as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(CanRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).CanAim as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(CanAim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).CanArmor as *const _ as usize },
        147usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(CanArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).CanRotate as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(CanRotate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterType>())).Anim1 as *const _ as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterType),
            "::",
            stringify!(Anim1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtoItem {
    pub ProtoId: uint16,
    pub Type: ::std::os::raw::c_int,
    pub PicMap: uint,
    pub PicInv: uint,
    pub Flags: uint,
    pub Stackable: bool,
    pub Deteriorable: bool,
    pub GroundLevel: bool,
    pub Corner: ::std::os::raw::c_int,
    pub Dir: ::std::os::raw::c_int,
    pub Slot: uint8,
    pub Weight: uint,
    pub Volume: uint,
    pub Cost: uint,
    pub StartCount: uint,
    pub SoundId: uint8,
    pub Material: uint8,
    pub LightFlags: uint8,
    pub LightDistance: uint8,
    pub LightIntensity: int8,
    pub LightColor: uint,
    pub DisableEgg: bool,
    pub AnimWaitBase: uint16,
    pub AnimWaitRndMin: uint16,
    pub AnimWaitRndMax: uint16,
    pub AnimStay: [uint8; 2usize],
    pub AnimShow: [uint8; 2usize],
    pub AnimHide: [uint8; 2usize],
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub SpriteCut: uint8,
    pub DrawOrderOffsetHexY: int8,
    pub RadioChannel: uint16,
    pub RadioFlags: uint16,
    pub RadioBroadcastSend: uint8,
    pub RadioBroadcastRecv: uint8,
    pub IndicatorStart: uint8,
    pub IndicatorMax: uint8,
    pub HolodiskNum: uint,
    pub StartValue: [::std::os::raw::c_int; 10usize],
    pub BlockLines: [uint8; 50usize],
    pub ChildPids: [uint16; 5usize],
    pub ChildLines: [[uint8; 6usize]; 5usize],
    pub MagicPower: ::std::os::raw::c_int,
    pub Unused: [uint8; 96usize],
    pub Armor_CrTypeMale: uint,
    pub Armor_CrTypeFemale: uint,
    pub Armor_AC: ::std::os::raw::c_int,
    pub Armor_Perk: uint,
    pub Armor_DRNormal: ::std::os::raw::c_int,
    pub Armor_DRLaser: ::std::os::raw::c_int,
    pub Armor_DRFire: ::std::os::raw::c_int,
    pub Armor_DRPlasma: ::std::os::raw::c_int,
    pub Armor_DRElectr: ::std::os::raw::c_int,
    pub Armor_DREmp: ::std::os::raw::c_int,
    pub Armor_DRExplode: ::std::os::raw::c_int,
    pub Armor_DTNormal: ::std::os::raw::c_int,
    pub Armor_DTLaser: ::std::os::raw::c_int,
    pub Armor_DTFire: ::std::os::raw::c_int,
    pub Armor_DTPlasma: ::std::os::raw::c_int,
    pub Armor_DTElectr: ::std::os::raw::c_int,
    pub Armor_DTEmp: ::std::os::raw::c_int,
    pub Armor_DTExplode: ::std::os::raw::c_int,
    pub Armor_Unused: [uint8; 28usize],
    pub Weapon_DmgType: [::std::os::raw::c_int; 3usize],
    pub Weapon_Anim2: [uint; 3usize],
    pub Weapon_DmgMin: [::std::os::raw::c_int; 3usize],
    pub Weapon_DmgMax: [::std::os::raw::c_int; 3usize],
    pub Weapon_Effect: [uint16; 3usize],
    pub Weapon_Remove: [bool; 3usize],
    pub Weapon_ReloadAp: uint,
    pub Weapon_UnarmedCriticalBonus: ::std::os::raw::c_int,
    pub Weapon_CriticalFailture: uint,
    pub Weapon_UnarmedArmorPiercing: bool,
    pub Weapon_Unused: [uint8; 27usize],
    pub Ammo_AcMod: ::std::os::raw::c_int,
    pub Ammo_DrMod: ::std::os::raw::c_int,
    pub Ammo_DmgMult: uint,
    pub Ammo_DmgDiv: uint,
    pub Food_Thirst: uint16,
    pub Food_Restore: uint16,
    pub Food_Flags: uint,
    pub Wait_Time_0: uint16,
    pub Wait_Time_1: uint16,
    pub Wait_Time_2: uint16,
    pub Wait_Time_3: uint16,
    pub Item_UseAp: uint16,
    pub UnusedEnd: [uint8; 166usize],
    pub Weapon_IsUnarmed: bool,
    pub Weapon_UnarmedTree: ::std::os::raw::c_int,
    pub Weapon_UnarmedPriority: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinAgility: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinUnarmed: ::std::os::raw::c_int,
    pub Weapon_UnarmedMinLevel: ::std::os::raw::c_int,
    pub Weapon_Anim1: uint,
    pub Weapon_MaxAmmoCount: uint,
    pub Weapon_Caliber: ::std::os::raw::c_int,
    pub Weapon_DefaultAmmoPid: uint16,
    pub Weapon_MinStrength: ::std::os::raw::c_int,
    pub Weapon_Perk: ::std::os::raw::c_int,
    pub Weapon_ActiveUses: uint,
    pub Weapon_Skill: [::std::os::raw::c_int; 3usize],
    pub Weapon_PicUse: [uint; 3usize],
    pub Weapon_MaxDist: [uint; 3usize],
    pub Weapon_Round: [uint; 3usize],
    pub Weapon_ApCost: [uint; 3usize],
    pub Weapon_Aim: [bool; 3usize],
    pub Weapon_SoundId: [uint8; 3usize],
    pub Ammo_Caliber: ::std::os::raw::c_int,
    pub Door_NoBlockMove: bool,
    pub Door_NoBlockShoot: bool,
    pub Door_NoBlockLight: bool,
    pub Container_Volume: uint,
    pub Container_CannotPickUp: bool,
    pub Container_MagicHandsGrnd: bool,
    pub Container_Changeble: bool,
    pub Locker_Condition: uint16,
    pub Grid_Type: ::std::os::raw::c_int,
    pub Car_Speed: uint,
    pub Car_Passability: uint,
    pub Car_DeteriorationRate: uint,
    pub Car_CrittersCapacity: uint,
    pub Car_TankVolume: uint,
    pub Car_MaxDeterioration: uint,
    pub Car_FuelConsumption: uint,
    pub Car_Entrance: uint,
    pub Car_MovementType: uint,
}
#[test]
fn bindgen_test_layout_ProtoItem() {
    assert_eq!(
        ::std::mem::size_of::<ProtoItem>(),
        908usize,
        concat!("Size of: ", stringify!(ProtoItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ProtoId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).PicMap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(PicMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).PicInv as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(PicInv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Stackable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Stackable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Deteriorable as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Deteriorable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).GroundLevel as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(GroundLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Corner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Corner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Dir as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Slot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weight as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Volume as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Cost as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).StartCount as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(StartCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).SoundId as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(SoundId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Material as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Material)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightFlags as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightDistance as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightIntensity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).LightColor as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).DisableEgg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(DisableEgg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitBase as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitRndMin as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitRndMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimWaitRndMax as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimWaitRndMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimStay as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimStay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimShow as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimShow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).AnimHide as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(AnimHide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).OffsetX as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).OffsetY as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).SpriteCut as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(SpriteCut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).DrawOrderOffsetHexY as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(DrawOrderOffsetHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioChannel as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioFlags as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioBroadcastSend as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioBroadcastSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).RadioBroadcastRecv as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(RadioBroadcastRecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).IndicatorStart as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(IndicatorStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).IndicatorMax as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(IndicatorMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).HolodiskNum as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(HolodiskNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).StartValue as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(StartValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).BlockLines as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(BlockLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ChildPids as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ChildPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).ChildLines as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(ChildLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).MagicPower as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(MagicPower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Unused as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_CrTypeMale as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_CrTypeMale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_CrTypeFemale as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_CrTypeFemale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_AC as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_AC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_Perk as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_Perk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRNormal as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRNormal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRLaser as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRLaser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRFire as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRFire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRPlasma as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRPlasma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRElectr as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRElectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DREmp as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DREmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DRExplode as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DRExplode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTNormal as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTNormal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTLaser as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTLaser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTFire as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTFire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTPlasma as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTPlasma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTElectr as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTElectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTEmp as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTEmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_DTExplode as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_DTExplode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Armor_Unused as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Armor_Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgType as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Anim2 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Anim2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgMin as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DmgMax as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DmgMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Effect as *const _ as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Effect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Remove as *const _ as usize },
        482usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ReloadAp as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ReloadAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedCriticalBonus as *const _ as usize
        },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedCriticalBonus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_CriticalFailture as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_CriticalFailture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedArmorPiercing as *const _ as usize
        },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedArmorPiercing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Unused as *const _ as usize },
        501usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_AcMod as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_AcMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DrMod as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DrMod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DmgMult as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DmgMult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_DmgDiv as *const _ as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_DmgDiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Food_Thirst as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Food_Thirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Food_Restore as *const _ as usize },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Food_Restore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Food_Flags as *const _ as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Food_Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Wait_Time_0 as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Wait_Time_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Wait_Time_1 as *const _ as usize },
        554usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Wait_Time_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Wait_Time_2 as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Wait_Time_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Wait_Time_3 as *const _ as usize },
        558usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Wait_Time_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Item_UseAp as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Item_UseAp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).UnusedEnd as *const _ as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(UnusedEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_IsUnarmed as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_IsUnarmed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedTree as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedTree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedPriority as *const _ as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedPriority)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinAgility as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinAgility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinUnarmed as *const _ as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinUnarmed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Weapon_UnarmedMinLevel as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_UnarmedMinLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Anim1 as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Anim1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MaxAmmoCount as *const _ as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MaxAmmoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Caliber as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Caliber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_DefaultAmmoPid as *const _ as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_DefaultAmmoPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MinStrength as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MinStrength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Perk as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Perk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ActiveUses as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ActiveUses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Skill as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Skill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_PicUse as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_PicUse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_MaxDist as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_MaxDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Round as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Round)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_ApCost as *const _ as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_ApCost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_Aim as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_Aim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Weapon_SoundId as *const _ as usize },
        843usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Weapon_SoundId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Ammo_Caliber as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Ammo_Caliber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockMove as *const _ as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockShoot as *const _ as usize },
        853usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockShoot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Door_NoBlockLight as *const _ as usize },
        854usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Door_NoBlockLight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Container_Volume as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_Volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Container_CannotPickUp as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_CannotPickUp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoItem>())).Container_MagicHandsGrnd as *const _ as usize
        },
        861usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_MagicHandsGrnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Container_Changeble as *const _ as usize },
        862usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Container_Changeble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Locker_Condition as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Locker_Condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Grid_Type as *const _ as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Grid_Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Speed as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Passability as *const _ as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Passability)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_DeteriorationRate as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_DeteriorationRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_CrittersCapacity as *const _ as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_CrittersCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_TankVolume as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_TankVolume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_MaxDeterioration as *const _ as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_MaxDeterioration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_FuelConsumption as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_FuelConsumption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_Entrance as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_Entrance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoItem>())).Car_MovementType as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoItem),
            "::",
            stringify!(Car_MovementType)
        )
    );
}
#[repr(C)]
pub struct TemplateVar {
    pub Type: ::std::os::raw::c_int,
    pub TempId: uint16,
    pub Name: stlp_std_string,
    pub Desc: stlp_std_string,
    pub StartVal: ::std::os::raw::c_int,
    pub MinVal: ::std::os::raw::c_int,
    pub MaxVal: ::std::os::raw::c_int,
    pub Flags: uint,
}
#[test]
fn bindgen_test_layout_TemplateVar() {
    assert_eq!(
        ::std::mem::size_of::<TemplateVar>(),
        72usize,
        concat!("Size of: ", stringify!(TemplateVar))
    );
    assert_eq!(
        ::std::mem::align_of::<TemplateVar>(),
        4usize,
        concat!("Alignment of ", stringify!(TemplateVar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).TempId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(TempId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).Name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).Desc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(Desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).StartVal as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(StartVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).MinVal as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(MinVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).MaxVal as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(MaxVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TemplateVar>())).Flags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TemplateVar),
            "::",
            stringify!(Flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GameVar {
    pub MasterId: uint,
    pub SlaveId: uint,
    pub VarValue: ::std::os::raw::c_int,
    pub VarTemplate: *const TemplateVar,
    pub QuestVarIndex: uint,
    pub Type: uint16,
    pub RefCount: int16,
    pub Sync: SyncObj,
}
#[test]
fn bindgen_test_layout_GameVar() {
    assert_eq!(
        ::std::mem::size_of::<GameVar>(),
        28usize,
        concat!("Size of: ", stringify!(GameVar))
    );
    assert_eq!(
        ::std::mem::align_of::<GameVar>(),
        4usize,
        concat!("Alignment of ", stringify!(GameVar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).MasterId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(MasterId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).SlaveId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(SlaveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).VarValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(VarValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).VarTemplate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(VarTemplate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).QuestVarIndex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(QuestVarIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).Type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).RefCount as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(RefCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameVar>())).Sync as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GameVar),
            "::",
            stringify!(Sync)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NpcPlane {
    pub Type: ::std::os::raw::c_int,
    pub Priority: uint,
    pub Identifier: ::std::os::raw::c_int,
    pub IdentifierExt: uint,
    pub ChildPlane: *const NpcPlane,
    pub IsMove: bool,
    pub __bindgen_anon_1: NpcPlane__bindgen_ty_1,
    pub Move: NpcPlane__bindgen_ty_2,
    pub Assigned: bool,
    pub RefCounter: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NpcPlane__bindgen_ty_1 {
    pub Misc: NpcPlane__bindgen_ty_1__bindgen_ty_1,
    pub Attack: NpcPlane__bindgen_ty_1__bindgen_ty_2,
    pub Walk: NpcPlane__bindgen_ty_1__bindgen_ty_3,
    pub Pick: NpcPlane__bindgen_ty_1__bindgen_ty_4,
    pub Buffer: NpcPlane__bindgen_ty_1__bindgen_ty_5,
    _bindgen_union_align: [u32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_1 {
    pub IsRun: bool,
    pub WaitSecond: uint,
    pub ScriptBindId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).WaitSecond as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(WaitSecond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_1>())).ScriptBindId
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ScriptBindId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_2 {
    pub IsRun: bool,
    pub TargId: uint,
    pub MinHp: ::std::os::raw::c_int,
    pub IsGag: bool,
    pub GagHexX: uint16,
    pub GagHexY: uint16,
    pub LastHexX: uint16,
    pub LastHexY: uint16,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).TargId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).MinHp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(MinHp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).IsGag as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(IsGag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexX as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).GagHexY as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(GagHexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexX as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_2>())).LastHexY as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LastHexY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_3 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
    pub Cut: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Dir as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_3>())).Cut as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Cut)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_4 {
    pub IsRun: bool,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Pid: uint16,
    pub UseItemId: uint,
    pub ToOpen: bool,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).IsRun as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexX as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).HexY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).Pid as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(Pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).UseItemId as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(UseItemId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_4>())).ToOpen as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(ToOpen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_1__bindgen_ty_5 {
    pub Buffer: [uint; 8usize],
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1__bindgen_ty_5>())).Buffer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(Buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Misc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Attack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Attack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Walk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Walk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Pick as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Pick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_1>())).Buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_1),
            "::",
            stringify!(Buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NpcPlane__bindgen_ty_2 {
    pub PathNum: uint,
    pub Iter: uint,
    pub IsRun: bool,
    pub TargId: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Cut: uint,
    pub Trace: uint,
}
#[test]
fn bindgen_test_layout_NpcPlane__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane__bindgen_ty_2>(),
        28usize,
        concat!("Size of: ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).PathNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(PathNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Iter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).IsRun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(IsRun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).TargId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(TargId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).HexY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Cut as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane__bindgen_ty_2>())).Trace as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane__bindgen_ty_2),
            "::",
            stringify!(Trace)
        )
    );
}
#[test]
fn bindgen_test_layout_NpcPlane() {
    assert_eq!(
        ::std::mem::size_of::<NpcPlane>(),
        92usize,
        concat!("Size of: ", stringify!(NpcPlane))
    );
    assert_eq!(
        ::std::mem::align_of::<NpcPlane>(),
        4usize,
        concat!("Alignment of ", stringify!(NpcPlane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Identifier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).IdentifierExt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(IdentifierExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).ChildPlane as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(ChildPlane)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).IsMove as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(IsMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Move as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Move)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).Assigned as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(Assigned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NpcPlane>())).RefCounter as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NpcPlane),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Item {
    pub Id: uint,
    pub Proto: *const ProtoItem,
    pub From: ::std::os::raw::c_int,
    pub Accessory: uint8,
    pub ViewPlaceOnMap: bool,
    pub Reserved0: int16,
    pub __bindgen_anon_1: Item__bindgen_ty_1,
    pub Data: Item__Data,
    pub RefCounter: int16,
    pub IsNotValid: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Item__bindgen_ty_1 {
    pub AccHex: Item__bindgen_ty_1__bindgen_ty_1,
    pub AccCritter: Item__bindgen_ty_1__bindgen_ty_2,
    pub AccContainer: Item__bindgen_ty_1__bindgen_ty_3,
    pub AccBuffer: [::std::os::raw::c_char; 8usize],
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item__bindgen_ty_1__bindgen_ty_1 {
    pub MapId: uint,
    pub HexX: uint16,
    pub HexY: uint16,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).MapId as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).HexX as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_1>())).HexY as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(HexY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item__bindgen_ty_1__bindgen_ty_2 {
    pub Id: uint,
    pub Slot: uint8,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_2>())).Id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_2>())).Slot as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item__bindgen_ty_1__bindgen_ty_3 {
    pub ContainerId: uint,
    pub StackId: uint,
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_3>())).ContainerId as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ContainerId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Item__bindgen_ty_1__bindgen_ty_3>())).StackId as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(StackId)
        )
    );
}
#[test]
fn bindgen_test_layout_Item__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Item__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Item__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Item__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccHex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccHex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccCritter as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccContainer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccContainer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__bindgen_ty_1>())).AccBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__bindgen_ty_1),
            "::",
            stringify!(AccBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item__Data {
    pub SortValue: uint16,
    pub Info: uint8,
    pub Indicator: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub AnimWaitBase: uint16,
    pub AnimStay: [uint8; 2usize],
    pub AnimShow: [uint8; 2usize],
    pub AnimHide: [uint8; 2usize],
    pub Flags: uint,
    pub Rate: uint8,
    pub LightIntensity: int8,
    pub LightDistance: uint8,
    pub LightFlags: uint8,
    pub LightColor: uint,
    pub ScriptId: uint16,
    pub TrapValue: int16,
    pub Count: uint,
    pub Cost: uint,
    pub ScriptValues: [::std::os::raw::c_int; 10usize],
    pub BrokenFlags: uint8,
    pub BrokenCount: uint8,
    pub Deterioration: uint16,
    pub AmmoPid: uint16,
    pub AmmoCount: uint16,
    pub LockerId: uint,
    pub LockerCondition: uint16,
    pub LockerComplexity: uint16,
    pub HolodiskNumber: uint,
    pub RadioChannel: uint16,
    pub RadioFlags: uint16,
    pub RadioBroadcastSend: uint8,
    pub RadioBroadcastRecv: uint8,
    pub Charge: uint16,
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub Dir: int16,
    pub Reserved: [::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_Item__Data() {
    assert_eq!(
        ::std::mem::size_of::<Item__Data>(),
        120usize,
        concat!("Size of: ", stringify!(Item__Data))
    );
    assert_eq!(
        ::std::mem::align_of::<Item__Data>(),
        4usize,
        concat!("Alignment of ", stringify!(Item__Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).SortValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(SortValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Info as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Indicator as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Indicator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).PicMapHash as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).PicInvHash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimWaitBase as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimWaitBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimStay as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimStay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimShow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimShow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AnimHide as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AnimHide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Rate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightIntensity as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightDistance as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightFlags as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LightColor as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).ScriptId as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).TrapValue as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(TrapValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Count as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Cost as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).ScriptValues as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(ScriptValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).BrokenFlags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(BrokenFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).BrokenCount as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(BrokenCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Deterioration as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Deterioration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AmmoPid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AmmoPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).AmmoCount as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(AmmoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerId as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerCondition as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).LockerComplexity as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(LockerComplexity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).HolodiskNumber as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(HolodiskNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioChannel as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioFlags as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioBroadcastSend as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioBroadcastSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).RadioBroadcastRecv as *const _ as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(RadioBroadcastRecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Charge as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Charge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).OffsetX as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).OffsetY as *const _ as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Dir as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item__Data>())).Reserved as *const _ as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(Item__Data),
            "::",
            stringify!(Reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_Item() {
    assert_eq!(
        ::std::mem::size_of::<Item>(),
        148usize,
        concat!("Size of: ", stringify!(Item))
    );
    assert_eq!(
        ::std::mem::align_of::<Item>(),
        4usize,
        concat!("Alignment of ", stringify!(Item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Id as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Item), "::", stringify!(Id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Proto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).From as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(From)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Accessory as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Accessory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).ViewPlaceOnMap as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(ViewPlaceOnMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Reserved0 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).Data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).RefCounter as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(RefCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Item>())).IsNotValid as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(Item),
            "::",
            stringify!(IsNotValid)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GlobalMapGroup {
    pub Group: CrVec,
    pub Rule: *const Critter,
    pub CarId: uint,
    pub CurX: f32,
    pub CurY: f32,
    pub ToX: f32,
    pub ToY: f32,
    pub Speed: f32,
    pub IsSetMove: bool,
    pub TimeCanFollow: uint,
    pub IsMultiply: bool,
    pub ProcessLastTick: uint,
    pub EncounterDescriptor: uint,
    pub EncounterTick: uint,
    pub EncounterForce: bool,
}
#[test]
fn bindgen_test_layout_GlobalMapGroup() {
    assert_eq!(
        ::std::mem::size_of::<GlobalMapGroup>(),
        68usize,
        concat!("Size of: ", stringify!(GlobalMapGroup))
    );
    assert_eq!(
        ::std::mem::align_of::<GlobalMapGroup>(),
        4usize,
        concat!("Alignment of ", stringify!(GlobalMapGroup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Rule as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Rule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CarId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CarId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CurX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CurX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).CurY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(CurY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ToX as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ToX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ToY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ToY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).Speed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(Speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).IsSetMove as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(IsSetMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).TimeCanFollow as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(TimeCanFollow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).IsMultiply as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(IsMultiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).ProcessLastTick as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(ProcessLastTick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterDescriptor as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterDescriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterTick as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GlobalMapGroup>())).EncounterForce as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GlobalMapGroup),
            "::",
            stringify!(EncounterForce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CritterTimeEvent {
    pub FuncNum: uint,
    pub Rate: uint,
    pub NextTime: uint,
    pub Identifier: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CritterTimeEvent() {
    assert_eq!(
        ::std::mem::size_of::<CritterTimeEvent>(),
        16usize,
        concat!("Size of: ", stringify!(CritterTimeEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterTimeEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterTimeEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).FuncNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(FuncNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).Rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(Rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).NextTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(NextTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterTimeEvent>())).Identifier as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterTimeEvent),
            "::",
            stringify!(Identifier)
        )
    );
}
pub type CritterTimeEventVec = stlp_std_vector<CritterTimeEvent, stlp_std_allocator>;
pub type CritterTimeEventVecIt = const_iterator;
#[repr(C)]
pub struct Critter {
    pub Id: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub WorldX: uint16,
    pub WorldY: uint16,
    pub BaseType: uint,
    pub Dir: uint8,
    pub Cond: uint8,
    pub ReservedCE: uint8,
    pub Reserved0: uint8,
    pub ScriptId: uint,
    pub ShowCritterDist1: uint,
    pub ShowCritterDist2: uint,
    pub ShowCritterDist3: uint,
    pub Reserved00: uint16,
    pub Multihex: int16,
    pub GlobalGroupUid: uint,
    pub LastHexX: uint16,
    pub LastHexY: uint16,
    pub Reserved1: [uint; 4usize],
    pub MapId: uint,
    pub MapPid: uint16,
    pub Reserved2: uint16,
    pub Params: [::std::os::raw::c_int; 1000usize],
    pub Anim1Life: uint,
    pub Anim1Knockout: uint,
    pub Anim1Dead: uint,
    pub Anim2Life: uint,
    pub Anim2Knockout: uint,
    pub Anim2Dead: uint,
    pub Anim2KnockoutEnd: uint,
    pub Reserved3: [uint; 3usize],
    pub Lexems: [::std::os::raw::c_char; 128usize],
    pub Reserved4: [uint; 8usize],
    pub ClientToDelete: bool,
    pub Reserved5: uint8,
    pub Reserved6: uint16,
    pub Temp: uint,
    pub Reserved8: uint16,
    pub HoloInfoCount: uint16,
    pub HoloInfo: [uint; 250usize],
    pub Reserved9: [uint; 10usize],
    pub Scores: [::std::os::raw::c_int; 50usize],
    pub GlobalMapMoveCounter: uint,
    pub UserData: [uint8; 396usize],
    pub HomeMap: uint,
    pub HomeX: uint16,
    pub HomeY: uint16,
    pub HomeDir: uint8,
    pub Reserved11: uint8,
    pub ProtoId: uint16,
    pub Reserved12: uint,
    pub Reserved13: uint,
    pub Reserved14: uint,
    pub Reserved15: uint,
    pub IsDataExt: bool,
    pub Reserved16: uint8,
    pub Reserved17: uint16,
    pub Reserved18: [uint; 8usize],
    pub FavoriteItemPid: [uint16; 4usize],
    pub Reserved19: [uint; 10usize],
    pub EnemyStackCount: uint,
    pub EnemyStack: [uint; 30usize],
    pub Reserved20: [uint; 5usize],
    pub BagCurrentSet: [uint8; 20usize],
    pub BagRefreshTime: int16,
    pub Reserved21: uint8,
    pub BagSize: uint8,
    pub Bag: [Critter__bindgen_ty_1; 50usize],
    pub Reserved22: [uint; 100usize],
    pub DataExt: *mut Critter__bindgen_ty_2,
    pub Sync: SyncObj,
    pub CritterIsNpc: bool,
    pub Flags: uint,
    pub NameStr: ScriptString,
    pub GMapFog: Critter__bindgen_ty_3,
    pub IsRuning: bool,
    pub PrevHexTick: uint,
    pub PrevHexX: uint16,
    pub PrevHexY: uint16,
    pub LockMapTransfers: ::std::os::raw::c_int,
    pub ThisPtr: [*const Critter; 100usize],
    pub AllowedToDownloadMap: uint,
    pub ParamsIsChanged: [bool; 1000usize],
    pub ParamsChanged: IntVec,
    pub ParamLocked: ::std::os::raw::c_int,
    pub VisCr: CrVec,
    pub VisCrSelf: CrVec,
    pub VisCr1: UintSet,
    pub VisCr2: UintSet,
    pub VisCr3: UintSet,
    pub VisItem: UintSet,
    pub VisItemLocker: Spinlock,
    pub ViewMapId: uint,
    pub ViewMapPid: uint16,
    pub ViewMapLook: uint16,
    pub ViewMapHx: uint16,
    pub ViewMapHy: uint16,
    pub ViewMapDir: uint8,
    pub ViewMapLocId: uint,
    pub ViewMapLocEnt: uint,
    pub GroupSelf: *const GlobalMapGroup,
    pub GroupMove: *const GlobalMapGroup,
    pub InvItems: ItemVec,
    pub DefItemSlotHand: *const Item,
    pub DefItemSlotArmor: *const Item,
    pub ItemSlotMain: *const Item,
    pub ItemSlotExt: *const Item,
    pub ItemSlotArmor: *const Item,
    pub FuncId: [::std::os::raw::c_int; 44usize],
    pub KnockoutAp: uint,
    pub NextIntellectCachingTick: uint,
    pub IntellectCacheValue: uint16,
    pub LookCacheValue: uint,
    pub StartBreakTime: uint,
    pub BreakTime: uint,
    pub WaitEndTick: uint,
    pub DisableSend: ::std::os::raw::c_int,
    pub AccessContainerId: uint,
    pub ItemTransferCount: uint,
    pub TryingGoHomeTick: uint,
    pub CrTimeEvents: CritterTimeEventVec,
    pub GlobalIdleNextTick: uint,
    pub ApRegenerationTick: uint,
    pub IsNotValid: bool,
    pub RefCounter: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Critter__bindgen_ty_1 {
    pub ItemPid: uint,
    pub MinCnt: uint,
    pub MaxCnt: uint,
    pub ItemSlot: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemPid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MinCnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MinCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).MaxCnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(MaxCnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_1>())).ItemSlot as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_1),
            "::",
            stringify!(ItemSlot)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Critter__bindgen_ty_2 {
    pub Reserved23: [uint; 10usize],
    pub GlobalMapFog: [uint8; 2500usize],
    pub Reserved24: uint16,
    pub LocationsCount: uint16,
    pub LocationsId: [uint; 1000usize],
    pub Reserved25: [uint; 40usize],
    pub PlayIp: [uint; 20usize],
    pub PlayPort: [uint16; 20usize],
    pub CurrentIp: uint,
    pub Reserved26: [uint; 29usize],
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_2>(),
        6944usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved23 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).GlobalMapFog as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(GlobalMapFog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved24 as *const _ as usize
        },
        2540usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsCount as *const _ as usize
        },
        2542usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).LocationsId as *const _ as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(LocationsId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved25 as *const _ as usize
        },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved25)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayIp as *const _ as usize },
        6704usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayIp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).PlayPort as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(PlayPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).CurrentIp as *const _ as usize },
        6824usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(CurrentIp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter__bindgen_ty_2>())).Reserved26 as *const _ as usize
        },
        6828usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_2),
            "::",
            stringify!(Reserved26)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Critter__bindgen_ty_3 {
    pub IsAlloc: bool,
    pub Data: *const uint8,
    pub Width: uint,
    pub Height: uint,
    pub WidthB: uint,
}
#[test]
fn bindgen_test_layout_Critter__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<Critter__bindgen_ty_3>(),
        20usize,
        concat!("Size of: ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).IsAlloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(IsAlloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).Height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter__bindgen_ty_3>())).WidthB as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter__bindgen_ty_3),
            "::",
            stringify!(WidthB)
        )
    );
}
#[test]
fn bindgen_test_layout_Critter() {
    assert_eq!(
        ::std::mem::size_of::<Critter>(),
        9344usize,
        concat!("Size of: ", stringify!(Critter))
    );
    assert_eq!(
        ::std::mem::align_of::<Critter>(),
        4usize,
        concat!("Alignment of ", stringify!(Critter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WorldX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WorldX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WorldY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WorldY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BaseType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BaseType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Cond as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ReservedCE as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ReservedCE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved0 as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ScriptId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ShowCritterDist3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ShowCritterDist3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved00 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Multihex as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Multihex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalGroupUid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalGroupUid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LastHexX as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LastHexY as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LastHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).MapId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).MapPid as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(MapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved2 as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Params as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Life as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Knockout as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim1Dead as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim1Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Life as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Knockout as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2Dead as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Anim2KnockoutEnd as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Anim2KnockoutEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved3 as *const _ as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Lexems as *const _ as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Lexems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved4 as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ClientToDelete as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ClientToDelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved5 as *const _ as usize },
        4273usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved6 as *const _ as usize },
        4274usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Temp as *const _ as usize },
        4276usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved8 as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HoloInfoCount as *const _ as usize },
        4282usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HoloInfoCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HoloInfo as *const _ as usize },
        4284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HoloInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved9 as *const _ as usize },
        5284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Scores as *const _ as usize },
        5324usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Scores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalMapMoveCounter as *const _ as usize },
        5524usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalMapMoveCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).UserData as *const _ as usize },
        5528usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeMap as *const _ as usize },
        5924usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeX as *const _ as usize },
        5928usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeY as *const _ as usize },
        5930usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).HomeDir as *const _ as usize },
        5932usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(HomeDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved11 as *const _ as usize },
        5933usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ProtoId as *const _ as usize },
        5934usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved12 as *const _ as usize },
        5936usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved13 as *const _ as usize },
        5940usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved14 as *const _ as usize },
        5944usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved15 as *const _ as usize },
        5948usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsDataExt as *const _ as usize },
        5952usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsDataExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved16 as *const _ as usize },
        5953usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved17 as *const _ as usize },
        5954usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved17)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved18 as *const _ as usize },
        5956usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved18)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).FavoriteItemPid as *const _ as usize },
        5988usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(FavoriteItemPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved19 as *const _ as usize },
        5996usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved19)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).EnemyStackCount as *const _ as usize },
        6036usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(EnemyStackCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).EnemyStack as *const _ as usize },
        6040usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(EnemyStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved20 as *const _ as usize },
        6160usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagCurrentSet as *const _ as usize },
        6180usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagCurrentSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagRefreshTime as *const _ as usize },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagRefreshTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved21 as *const _ as usize },
        6202usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved21)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BagSize as *const _ as usize },
        6203usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BagSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Bag as *const _ as usize },
        6204usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Bag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Reserved22 as *const _ as usize },
        7004usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Reserved22)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DataExt as *const _ as usize },
        7404usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DataExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Sync as *const _ as usize },
        7408usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).CritterIsNpc as *const _ as usize },
        7412usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(CritterIsNpc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).Flags as *const _ as usize },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).NameStr as *const _ as usize },
        7420usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(NameStr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GMapFog as *const _ as usize },
        7452usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GMapFog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsRuning as *const _ as usize },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsRuning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexTick as *const _ as usize },
        7476usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexX as *const _ as usize },
        7480usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).PrevHexY as *const _ as usize },
        7482usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(PrevHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LockMapTransfers as *const _ as usize },
        7484usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LockMapTransfers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ThisPtr as *const _ as usize },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ThisPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).AllowedToDownloadMap as *const _ as usize },
        7888usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(AllowedToDownloadMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamsIsChanged as *const _ as usize },
        7892usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamsIsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamsChanged as *const _ as usize },
        8892usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ParamLocked as *const _ as usize },
        8904usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ParamLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr as *const _ as usize },
        8908usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCrSelf as *const _ as usize },
        8920usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCrSelf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr1 as *const _ as usize },
        8932usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr2 as *const _ as usize },
        8956usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisCr3 as *const _ as usize },
        8980usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisCr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisItem as *const _ as usize },
        9004usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).VisItemLocker as *const _ as usize },
        9028usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(VisItemLocker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapId as *const _ as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapPid as *const _ as usize },
        9036usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLook as *const _ as usize },
        9038usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapHx as *const _ as usize },
        9040usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapHx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapHy as *const _ as usize },
        9042usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapHy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapDir as *const _ as usize },
        9044usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLocId as *const _ as usize },
        9048usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLocId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ViewMapLocEnt as *const _ as usize },
        9052usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ViewMapLocEnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GroupSelf as *const _ as usize },
        9056usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GroupSelf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GroupMove as *const _ as usize },
        9060usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GroupMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).InvItems as *const _ as usize },
        9064usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(InvItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DefItemSlotHand as *const _ as usize },
        9076usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DefItemSlotHand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DefItemSlotArmor as *const _ as usize },
        9080usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DefItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotMain as *const _ as usize },
        9084usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotMain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotExt as *const _ as usize },
        9088usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemSlotArmor as *const _ as usize },
        9092usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).FuncId as *const _ as usize },
        9096usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(FuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).KnockoutAp as *const _ as usize },
        9272usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(KnockoutAp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Critter>())).NextIntellectCachingTick as *const _ as usize
        },
        9276usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(NextIntellectCachingTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IntellectCacheValue as *const _ as usize },
        9280usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IntellectCacheValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).LookCacheValue as *const _ as usize },
        9284usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(LookCacheValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).StartBreakTime as *const _ as usize },
        9288usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(StartBreakTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).BreakTime as *const _ as usize },
        9292usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(BreakTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).WaitEndTick as *const _ as usize },
        9296usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(WaitEndTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).DisableSend as *const _ as usize },
        9300usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(DisableSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).AccessContainerId as *const _ as usize },
        9304usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(AccessContainerId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ItemTransferCount as *const _ as usize },
        9308usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ItemTransferCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).TryingGoHomeTick as *const _ as usize },
        9312usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(TryingGoHomeTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).CrTimeEvents as *const _ as usize },
        9316usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(CrTimeEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).GlobalIdleNextTick as *const _ as usize },
        9328usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(GlobalIdleNextTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).ApRegenerationTick as *const _ as usize },
        9332usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(ApRegenerationTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).IsNotValid as *const _ as usize },
        9336usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Critter>())).RefCounter as *const _ as usize },
        9340usize,
        concat!(
            "Offset of field: ",
            stringify!(Critter),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
pub struct Client {
    pub _base: Critter,
    pub Name: [::std::os::raw::c_char; 31usize],
    pub PassHash: [::std::os::raw::c_char; 32usize],
    pub Access: uint8,
    pub LanguageMsg: uint,
}
#[test]
fn bindgen_test_layout_Client() {
    assert_eq!(
        ::std::mem::size_of::<Client>(),
        9412usize,
        concat!("Size of: ", stringify!(Client))
    );
    assert_eq!(
        ::std::mem::align_of::<Client>(),
        4usize,
        concat!("Alignment of ", stringify!(Client))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).Name as *const _ as usize },
        9344usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).PassHash as *const _ as usize },
        9375usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(PassHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).Access as *const _ as usize },
        9407usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(Access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Client>())).LanguageMsg as *const _ as usize },
        9408usize,
        concat!(
            "Offset of field: ",
            stringify!(Client),
            "::",
            stringify!(LanguageMsg)
        )
    );
}
#[repr(C)]
pub struct Npc {
    pub _base: Critter,
    pub NextRefreshBagTick: uint,
    pub AiPlanes: NpcPlaneVec,
    pub Reserved: uint,
}
#[test]
fn bindgen_test_layout_Npc() {
    assert_eq!(
        ::std::mem::size_of::<Npc>(),
        9364usize,
        concat!("Size of: ", stringify!(Npc))
    );
    assert_eq!(
        ::std::mem::align_of::<Npc>(),
        4usize,
        concat!("Alignment of ", stringify!(Npc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).NextRefreshBagTick as *const _ as usize },
        9344usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(NextRefreshBagTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).AiPlanes as *const _ as usize },
        9348usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(AiPlanes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Npc>())).Reserved as *const _ as usize },
        9360usize,
        concat!(
            "Offset of field: ",
            stringify!(Npc),
            "::",
            stringify!(Reserved)
        )
    );
}
#[repr(C)]
pub struct CritterCl {
    pub Id: uint,
    pub Pid: uint16,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
    pub Params: [::std::os::raw::c_int; 1000usize],
    pub NameColor: uint,
    pub ContourColor: uint,
    pub LastHexX: Uint16Vec,
    pub LastHexY: Uint16Vec,
    pub Cond: uint8,
    pub Anim1Life: uint,
    pub Anim1Knockout: uint,
    pub Anim1Dead: uint,
    pub Anim2Life: uint,
    pub Anim2Knockout: uint,
    pub Anim2Dead: uint,
    pub Flags: uint,
    pub BaseType: uint,
    pub BaseTypeAlias: uint,
    pub ApRegenerationTick: uint,
    pub Multihex: int16,
    pub Name: ScriptString,
    pub NameOnHead: ScriptString,
    pub Lexems: ScriptString,
    pub Avatar: ScriptString,
    pub PasswordReg: [::std::os::raw::c_char; 31usize],
    pub InvItems: ItemVec,
    pub DefItemSlotHand: *const Item,
    pub DefItemSlotArmor: *const Item,
    pub ItemSlotMain: *const Item,
    pub ItemSlotExt: *const Item,
    pub ItemSlotArmor: *const Item,
    pub ThisPtr: [*const CritterCl; 100usize],
    pub ParamsIsChanged: [bool; 1000usize],
    pub ParamsChanged: IntVec,
    pub ParamLocked: ::std::os::raw::c_int,
    pub IsRuning: bool,
    pub MoveSteps: Uint16PairVec,
}
#[test]
fn bindgen_test_layout_CritterCl() {
    assert_eq!(
        ::std::mem::size_of::<CritterCl>(),
        5716usize,
        concat!("Size of: ", stringify!(CritterCl))
    );
    assert_eq!(
        ::std::mem::align_of::<CritterCl>(),
        4usize,
        concat!("Alignment of ", stringify!(CritterCl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).HexX as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).HexY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Dir as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Params as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).NameColor as *const _ as usize },
        4012usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(NameColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ContourColor as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ContourColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).LastHexX as *const _ as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(LastHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).LastHexY as *const _ as usize },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(LastHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Cond as *const _ as usize },
        4044usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Life as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Knockout as *const _ as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim1Dead as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim1Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Life as *const _ as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Life)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Knockout as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Knockout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Anim2Dead as *const _ as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Anim2Dead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Flags as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).BaseType as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(BaseType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).BaseTypeAlias as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(BaseTypeAlias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ApRegenerationTick as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ApRegenerationTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Multihex as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Multihex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Name as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).NameOnHead as *const _ as usize },
        4124usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(NameOnHead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Lexems as *const _ as usize },
        4156usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Lexems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).Avatar as *const _ as usize },
        4188usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(Avatar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).PasswordReg as *const _ as usize },
        4220usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(PasswordReg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).InvItems as *const _ as usize },
        4252usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(InvItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).DefItemSlotHand as *const _ as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(DefItemSlotHand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).DefItemSlotArmor as *const _ as usize },
        4268usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(DefItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotMain as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotMain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotExt as *const _ as usize },
        4276usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotExt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ItemSlotArmor as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ItemSlotArmor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ThisPtr as *const _ as usize },
        4284usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ThisPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamsIsChanged as *const _ as usize },
        4684usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamsIsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamsChanged as *const _ as usize },
        5684usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).ParamLocked as *const _ as usize },
        5696usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(ParamLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).IsRuning as *const _ as usize },
        5700usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(IsRuning)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CritterCl>())).MoveSteps as *const _ as usize },
        5704usize,
        concat!(
            "Offset of field: ",
            stringify!(CritterCl),
            "::",
            stringify!(MoveSteps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MapObject {
    pub MapObjType: uint8,
    pub ProtoId: uint16,
    pub MapX: uint16,
    pub MapY: uint16,
    pub Dir: int16,
    pub UID: uint,
    pub ContainerUID: uint,
    pub ParentUID: uint,
    pub ParentChildIndex: uint,
    pub LightRGB: uint,
    pub LightDay: uint8,
    pub LightDirOff: uint8,
    pub LightDistance: uint8,
    pub LightIntensity: int8,
    pub ScriptName: [::std::os::raw::c_char; 26usize],
    pub FuncName: [::std::os::raw::c_char; 26usize],
    pub Reserved: [uint; 7usize],
    pub UserData: [::std::os::raw::c_int; 10usize],
    pub __bindgen_anon_1: MapObject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MapObject__bindgen_ty_1 {
    pub MCritter: MapObject__bindgen_ty_1__bindgen_ty_1,
    pub MItem: MapObject__bindgen_ty_1__bindgen_ty_2,
    pub MScenery: MapObject__bindgen_ty_1__bindgen_ty_3,
    _bindgen_union_align: [u32; 63usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_1 {
    pub Cond: uint8,
    pub Anim1: uint,
    pub Anim2: uint,
    pub ParamIndex: [int16; 40usize],
    pub ParamValue: [::std::os::raw::c_int; 40usize],
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_1>(),
        252usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Cond as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Cond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Anim1 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Anim1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).Anim2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(Anim2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).ParamIndex as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ParamIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_1>())).ParamValue as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ParamValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_2 {
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub InfoOffset: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub Count: uint,
    pub ItemSlot: uint8,
    pub BrokenFlags: uint8,
    pub BrokenCount: uint8,
    pub Deterioration: uint16,
    pub AmmoPid: uint16,
    pub AmmoCount: uint,
    pub LockerDoorId: uint,
    pub LockerCondition: uint16,
    pub LockerComplexity: uint16,
    pub TrapValue: int16,
    pub Val: [::std::os::raw::c_int; 10usize],
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_2>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).OffsetX as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).OffsetY as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimStayBegin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimStayEnd
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AnimWait as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).InfoOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).PicMapHash as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).PicInvHash as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Count as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).ItemSlot as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ItemSlot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).BrokenFlags
                as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(BrokenFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).BrokenCount
                as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(BrokenCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Deterioration
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Deterioration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AmmoPid as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AmmoPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).AmmoCount as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(AmmoCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerDoorId
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerDoorId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerCondition
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerCondition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).LockerComplexity
                as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(LockerComplexity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).TrapValue as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(TrapValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_2>())).Val as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(Val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapObject__bindgen_ty_1__bindgen_ty_3 {
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub InfoOffset: uint8,
    pub PicMapHash: uint,
    pub PicInvHash: uint,
    pub CanUse: bool,
    pub CanTalk: bool,
    pub TriggerNum: uint,
    pub ParamsCount: uint8,
    pub Param: [::std::os::raw::c_int; 5usize],
    pub ToMapPid: uint16,
    pub ToEntire: uint,
    pub ToDir: uint8,
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1__bindgen_ty_3>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).OffsetX as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).OffsetY as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimStayBegin
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimStayEnd
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).AnimWait as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).InfoOffset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).PicMapHash as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).PicInvHash as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(PicInvHash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).CanUse as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(CanUse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).CanTalk as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(CanTalk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).TriggerNum as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(TriggerNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ParamsCount
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ParamsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).Param as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(Param)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToMapPid as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToMapPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToEntire as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToEntire)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1__bindgen_ty_3>())).ToDir as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(ToDir)
        )
    );
}
#[test]
fn bindgen_test_layout_MapObject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MapObject__bindgen_ty_1>(),
        252usize,
        concat!("Size of: ", stringify!(MapObject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(MapObject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MCritter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MCritter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MItem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MapObject__bindgen_ty_1>())).MScenery as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject__bindgen_ty_1),
            "::",
            stringify!(MScenery)
        )
    );
}
#[test]
fn bindgen_test_layout_MapObject() {
    assert_eq!(
        ::std::mem::size_of::<MapObject>(),
        408usize,
        concat!("Size of: ", stringify!(MapObject))
    );
    assert_eq!(
        ::std::mem::align_of::<MapObject>(),
        4usize,
        concat!("Alignment of ", stringify!(MapObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapObjType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapObjType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ProtoId as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).MapY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(MapY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).Dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).UID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(UID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ContainerUID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ContainerUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ParentUID as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ParentUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ParentChildIndex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ParentChildIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightRGB as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightRGB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDay as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDirOff as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDirOff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightDistance as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).LightIntensity as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).ScriptName as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(ScriptName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).FuncName as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(FuncName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).Reserved as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapObject>())).UserData as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(MapObject),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapEntire {
    pub Number: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub Dir: uint8,
}
#[test]
fn bindgen_test_layout_MapEntire() {
    assert_eq!(
        ::std::mem::size_of::<MapEntire>(),
        12usize,
        concat!("Size of: ", stringify!(MapEntire))
    );
    assert_eq!(
        ::std::mem::align_of::<MapEntire>(),
        4usize,
        concat!("Alignment of ", stringify!(MapEntire))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).Number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(Number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MapEntire>())).Dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MapEntire),
            "::",
            stringify!(Dir)
        )
    );
}
pub type EntiresVec = stlp_std_vector<MapEntire, stlp_std_allocator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceneryToClient {
    pub ProtoId: uint16,
    pub Flags: uint8,
    pub Reserved0: uint8,
    pub MapX: uint16,
    pub MapY: uint16,
    pub OffsetX: int16,
    pub OffsetY: int16,
    pub LightColor: uint,
    pub LightDistance: uint8,
    pub LightFlags: uint8,
    pub LightIntensity: int8,
    pub InfoOffset: uint8,
    pub AnimStayBegin: uint8,
    pub AnimStayEnd: uint8,
    pub AnimWait: uint16,
    pub PicMapHash: uint,
    pub Dir: int16,
    pub Reserved1: uint16,
}
#[test]
fn bindgen_test_layout_SceneryToClient() {
    assert_eq!(
        ::std::mem::size_of::<SceneryToClient>(),
        32usize,
        concat!("Size of: ", stringify!(SceneryToClient))
    );
    assert_eq!(
        ::std::mem::align_of::<SceneryToClient>(),
        4usize,
        concat!("Alignment of ", stringify!(SceneryToClient))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).ProtoId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(ProtoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).Flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).Reserved0 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(Reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).MapX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(MapX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).MapY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(MapY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).OffsetX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(OffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).OffsetY as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(OffsetY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightDistance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightDistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightFlags as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).LightIntensity as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(LightIntensity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).InfoOffset as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(InfoOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimStayBegin as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimStayBegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimStayEnd as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimStayEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).AnimWait as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(AnimWait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).PicMapHash as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(PicMapHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).Dir as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(Dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SceneryToClient>())).Reserved1 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SceneryToClient),
            "::",
            stringify!(Reserved1)
        )
    );
}
pub type SceneryToClientVec = stlp_std_vector<SceneryToClient, stlp_std_allocator>;
#[repr(C)]
pub struct ProtoMap {
    pub Header: ProtoMap__bindgen_ty_1,
    pub MObjects: MapObjectVec,
    pub LastObjectUID: uint,
    pub Tiles: ProtoMap_TileVec,
    pub MapEntires: EntiresVec,
    pub PathType: ::std::os::raw::c_int,
    pub Name: stlp_std_string,
    pub Pid: uint16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtoMap__bindgen_ty_1 {
    pub Version: uint,
    pub MaxHexX: uint16,
    pub MaxHexY: uint16,
    pub WorkHexX: ::std::os::raw::c_int,
    pub WorkHexY: ::std::os::raw::c_int,
    pub ScriptModule: [::std::os::raw::c_char; 65usize],
    pub ScriptFunc: [::std::os::raw::c_char; 65usize],
    pub Time: ::std::os::raw::c_int,
    pub NoLogOut: bool,
    pub DayTime: [::std::os::raw::c_int; 4usize],
    pub DayColor: [uint8; 12usize],
    pub HeaderSize: uint16,
    pub Packed: bool,
    pub UnpackedDataLen: uint,
}
#[test]
fn bindgen_test_layout_ProtoMap__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap__bindgen_ty_1>(),
        192usize,
        concat!("Size of: ", stringify!(ProtoMap__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).MaxHexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(MaxHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).MaxHexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(MaxHexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).WorkHexX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(WorkHexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).WorkHexY as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(WorkHexY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).ScriptModule as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(ScriptModule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).ScriptFunc as *const _ as usize
        },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(ScriptFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Time as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).NoLogOut as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(NoLogOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).DayTime as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(DayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).DayColor as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(DayColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).HeaderSize as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(HeaderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).Packed as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(Packed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProtoMap__bindgen_ty_1>())).UnpackedDataLen as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap__bindgen_ty_1),
            "::",
            stringify!(UnpackedDataLen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtoMap_Tile {
    pub NameHash: uint,
    pub HexX: uint16,
    pub HexY: uint16,
    pub OffsX: int8,
    pub OffsY: int8,
    pub Layer: uint8,
    pub IsRoof: bool,
}
#[test]
fn bindgen_test_layout_ProtoMap_Tile() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap_Tile>(),
        12usize,
        concat!("Size of: ", stringify!(ProtoMap_Tile))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap_Tile>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap_Tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).NameHash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(NameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).HexX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).HexY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).OffsX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).OffsY as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).Layer as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(Layer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap_Tile>())).IsRoof as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap_Tile),
            "::",
            stringify!(IsRoof)
        )
    );
}
pub type ProtoMap_TileVec = stlp_std_vector<ProtoMap_Tile, stlp_std_allocator>;
#[test]
fn bindgen_test_layout_ProtoMap() {
    assert_eq!(
        ::std::mem::size_of::<ProtoMap>(),
        264usize,
        concat!("Size of: ", stringify!(ProtoMap))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoMap>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).MObjects as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(MObjects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).LastObjectUID as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(LastObjectUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Tiles as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).MapEntires as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(MapEntires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).PathType as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(PathType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Name as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoMap>())).Pid as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoMap),
            "::",
            stringify!(Pid)
        )
    );
}
#[repr(C)]
pub struct Map {
    pub Sync: SyncObj,
    pub DataLocker: Mutex,
    pub HexFlags: *const uint8,
    pub MapCritters: CrVec,
    pub MapPlayers: ClVec,
    pub MapNpcs: PcVec,
    pub HexItems: ItemVec,
    pub MapLocation: *const Location,
    pub Data: Map__bindgen_ty_1,
    pub Proto: *const ProtoMap,
    pub NeedProcess: bool,
    pub FuncId: [uint; 12usize],
    pub LoopEnabled: [uint; 5usize],
    pub LoopLastTick: [uint; 5usize],
    pub LoopWaitTick: [uint; 5usize],
    pub IsTurnBasedOn: bool,
    pub TurnBasedEndTick: uint,
    pub TurnSequenceCur: ::std::os::raw::c_int,
    pub TurnSequence: UintVec,
    pub IsTurnBasedTimeout: bool,
    pub TurnBasedBeginSecond: uint,
    pub NeedEndTurnBased: bool,
    pub TurnBasedRound: uint,
    pub TurnBasedTurn: uint,
    pub TurnBasedWholeTurn: uint,
    pub IsNotValid: bool,
    pub RefCounter: int16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Map__bindgen_ty_1 {
    pub MapId: uint,
    pub MapPid: uint16,
    pub MapRain: uint8,
    pub IsTurnBasedAviable: bool,
    pub MapTime: ::std::os::raw::c_int,
    pub ScriptId: uint,
    pub MapDayTime: [::std::os::raw::c_int; 4usize],
    pub MapDayColor: [uint8; 12usize],
    pub Reserved: [uint; 20usize],
    pub UserData: [::std::os::raw::c_int; 100usize],
}
#[test]
fn bindgen_test_layout_Map__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Map__bindgen_ty_1>(),
        524usize,
        concat!("Size of: ", stringify!(Map__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Map__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Map__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapPid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapRain as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapRain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Map__bindgen_ty_1>())).IsTurnBasedAviable as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(IsTurnBasedAviable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).ScriptId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(ScriptId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapDayTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapDayTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).MapDayColor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(MapDayColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).Reserved as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map__bindgen_ty_1>())).UserData as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Map__bindgen_ty_1),
            "::",
            stringify!(UserData)
        )
    );
}
#[test]
fn bindgen_test_layout_Map() {
    assert_eq!(
        ::std::mem::size_of::<Map>(),
        776usize,
        concat!("Size of: ", stringify!(Map))
    );
    assert_eq!(
        ::std::mem::align_of::<Map>(),
        4usize,
        concat!("Alignment of ", stringify!(Map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Sync as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Map), "::", stringify!(Sync))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).DataLocker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(DataLocker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).HexFlags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(HexFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapCritters as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapCritters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapPlayers as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapPlayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapNpcs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapNpcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).HexItems as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(HexItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).MapLocation as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(MapLocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Data as *const _ as usize },
        84usize,
        concat!("Offset of field: ", stringify!(Map), "::", stringify!(Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).Proto as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).NeedProcess as *const _ as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(NeedProcess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).FuncId as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(FuncId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopEnabled as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopLastTick as *const _ as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopLastTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).LoopWaitTick as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(LoopWaitTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsTurnBasedOn as *const _ as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsTurnBasedOn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedEndTick as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedEndTick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnSequenceCur as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnSequenceCur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnSequence as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnSequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsTurnBasedTimeout as *const _ as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsTurnBasedTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedBeginSecond as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedBeginSecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).NeedEndTurnBased as *const _ as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(NeedEndTurnBased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedRound as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedRound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedTurn as *const _ as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedTurn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).TurnBasedWholeTurn as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(TurnBasedWholeTurn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).IsNotValid as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Map>())).RefCounter as *const _ as usize },
        774usize,
        concat!(
            "Offset of field: ",
            stringify!(Map),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
pub struct ProtoLocation {
    pub IsInit: bool,
    pub LocPid: uint16,
    pub Name: stlp_std_string,
    pub MaxPlayers: uint,
    pub ProtoMapPids: Uint16Vec,
    pub AutomapsPids: Uint16Vec,
    pub Entrance: UintPairVec,
    pub ScriptBindId: ::std::os::raw::c_int,
    pub Radius: uint16,
    pub Visible: bool,
    pub AutoGarbage: bool,
    pub GeckVisible: bool,
}
#[test]
fn bindgen_test_layout_ProtoLocation() {
    assert_eq!(
        ::std::mem::size_of::<ProtoLocation>(),
        80usize,
        concat!("Size of: ", stringify!(ProtoLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<ProtoLocation>(),
        4usize,
        concat!("Alignment of ", stringify!(ProtoLocation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).IsInit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(IsInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).LocPid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(LocPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).MaxPlayers as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(MaxPlayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).ProtoMapPids as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(ProtoMapPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).AutomapsPids as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(AutomapsPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Entrance as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Entrance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).ScriptBindId as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(ScriptBindId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Radius as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).Visible as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(Visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).AutoGarbage as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(AutoGarbage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ProtoLocation>())).GeckVisible as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ProtoLocation),
            "::",
            stringify!(GeckVisible)
        )
    );
}
#[repr(C)]
pub struct Location {
    pub Sync: SyncObj,
    pub LocMaps: MapVec,
    pub Data: Location__bindgen_ty_1,
    pub Proto: *const ProtoLocation,
    pub GeckCount: ::std::os::raw::c_int,
    pub IsNotValid: bool,
    pub RefCounter: int16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Location__bindgen_ty_1 {
    pub LocId: uint,
    pub LocPid: uint16,
    pub WX: uint16,
    pub WY: uint16,
    pub Radius: uint16,
    pub Visible: bool,
    pub GeckVisible: bool,
    pub AutoGarbage: bool,
    pub ToGarbage: bool,
    pub Color: uint,
    pub Reserved3: [uint; 59usize],
}
#[test]
fn bindgen_test_layout_Location__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Location__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(Location__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Location__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Location__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).LocId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(LocId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).LocPid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(LocPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).WX as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(WX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).WY as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(WY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Radius as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Visible as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).GeckVisible as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(GeckVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).AutoGarbage as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(AutoGarbage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).ToGarbage as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(ToGarbage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Location__bindgen_ty_1>())).Reserved3 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Location__bindgen_ty_1),
            "::",
            stringify!(Reserved3)
        )
    );
}
#[test]
fn bindgen_test_layout_Location() {
    assert_eq!(
        ::std::mem::size_of::<Location>(),
        284usize,
        concat!("Size of: ", stringify!(Location))
    );
    assert_eq!(
        ::std::mem::align_of::<Location>(),
        4usize,
        concat!("Alignment of ", stringify!(Location))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Sync as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).LocMaps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(LocMaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).Proto as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(Proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).GeckCount as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(GeckCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).IsNotValid as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(IsNotValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Location>())).RefCounter as *const _ as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(Location),
            "::",
            stringify!(RefCounter)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct Field {
    pub Crit: *mut CritterCl,
    pub DeadCrits: CrClVec,
    pub ScrX: ::std::os::raw::c_int,
    pub ScrY: ::std::os::raw::c_int,
    pub Tiles: Field_TileVec,
    pub Roofs: Field_TileVec,
    pub Items: ItemVec,
    pub RoofNum: int16,
    pub ScrollBlock: bool,
    pub IsWall: bool,
    pub IsWallSAI: bool,
    pub IsWallTransp: bool,
    pub IsScen: bool,
    pub IsExitGrid: bool,
    pub IsNotPassed: bool,
    pub IsNotRaked: bool,
    pub Corner: uint8,
    pub IsNoLight: bool,
    pub LightValues: [uint8; 3usize],
    pub IsMultihex: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Field_Tile {
    pub Anim: *mut ::std::os::raw::c_void,
    pub OffsX: int16,
    pub OffsY: int16,
    pub Layer: uint8,
}
#[test]
fn bindgen_test_layout_Field_Tile() {
    assert_eq!(
        ::std::mem::size_of::<Field_Tile>(),
        12usize,
        concat!("Size of: ", stringify!(Field_Tile))
    );
    assert_eq!(
        ::std::mem::align_of::<Field_Tile>(),
        4usize,
        concat!("Alignment of ", stringify!(Field_Tile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field_Tile>())).Anim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Field_Tile),
            "::",
            stringify!(Anim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field_Tile>())).OffsX as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Field_Tile),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field_Tile>())).OffsY as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Field_Tile),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field_Tile>())).Layer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Field_Tile),
            "::",
            stringify!(Layer)
        )
    );
}
pub type Field_TileVec = stlp_std_vector<Field_Tile, stlp_std_allocator>;
#[test]
fn bindgen_test_layout_Field() {
    assert_eq!(
        ::std::mem::size_of::<Field>(),
        76usize,
        concat!("Size of: ", stringify!(Field))
    );
    assert_eq!(
        ::std::mem::align_of::<Field>(),
        4usize,
        concat!("Alignment of ", stringify!(Field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).Crit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(Crit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).DeadCrits as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(DeadCrits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).ScrX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(ScrX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).ScrY as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(ScrY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).Tiles as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(Tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).Roofs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(Roofs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).Items as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(Items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).RoofNum as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(RoofNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).ScrollBlock as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(ScrollBlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsWall as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsWall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsWallSAI as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsWallSAI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsWallTransp as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsWallTransp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsScen as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsScen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsExitGrid as *const _ as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsExitGrid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsNotPassed as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsNotPassed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsNotRaked as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsNotRaked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).Corner as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(Corner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsNoLight as *const _ as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsNoLight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).LightValues as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(LightValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Field>())).IsMultihex as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(Field),
            "::",
            stringify!(IsMultihex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteInfo {
    pub Surface: *const ::std::os::raw::c_void,
    pub SurfaceUV: [f32; 4usize],
    pub Width: uint16,
    pub Height: uint16,
    pub OffsX: int16,
    pub OffsY: int16,
    pub Effect: *const ::std::os::raw::c_void,
    pub Anim3d: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SpriteInfo() {
    assert_eq!(
        ::std::mem::size_of::<SpriteInfo>(),
        36usize,
        concat!("Size of: ", stringify!(SpriteInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SpriteInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(SpriteInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Surface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Surface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).SurfaceUV as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(SurfaceUV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Height as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).OffsX as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).OffsY as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Effect as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Effect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SpriteInfo>())).Anim3d as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteInfo),
            "::",
            stringify!(Anim3d)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sprite {
    pub DrawOrderType: ::std::os::raw::c_int,
    pub DrawOrderPos: uint,
    pub TreeIndex: uint,
    pub SprId: uint,
    pub PSprId: *mut uint,
    pub HexX: ::std::os::raw::c_int,
    pub HexY: ::std::os::raw::c_int,
    pub ScrX: ::std::os::raw::c_int,
    pub ScrY: ::std::os::raw::c_int,
    pub OffsX: *mut int16,
    pub OffsY: *mut int16,
    pub CutType: ::std::os::raw::c_int,
    pub Parent: *mut Sprite,
    pub Child: *mut Sprite,
    pub CutX: f32,
    pub CutW: f32,
    pub CutTexL: f32,
    pub CutTexR: f32,
    pub Alpha: *mut uint8,
    pub Light: *mut uint8,
    pub EggType: ::std::os::raw::c_int,
    pub ContourType: ::std::os::raw::c_int,
    pub ContourColor: uint,
    pub Color: uint,
    pub FlashMask: uint,
    pub ValidCallback: *mut bool,
    pub Valid: bool,
}
#[test]
fn bindgen_test_layout_Sprite() {
    assert_eq!(
        ::std::mem::size_of::<Sprite>(),
        108usize,
        concat!("Size of: ", stringify!(Sprite))
    );
    assert_eq!(
        ::std::mem::align_of::<Sprite>(),
        4usize,
        concat!("Alignment of ", stringify!(Sprite))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).DrawOrderType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(DrawOrderType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).DrawOrderPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(DrawOrderPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).TreeIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(TreeIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).SprId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(SprId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).PSprId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(PSprId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).HexX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(HexX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).HexY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(HexY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ScrX as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ScrX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ScrY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ScrY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).OffsX as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(OffsX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).OffsY as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(OffsY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutType as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Parent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Child as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutX as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutW as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutTexL as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutTexL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).CutTexR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(CutTexR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Alpha as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Light as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Light)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).EggType as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(EggType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ContourType as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ContourType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ContourColor as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ContourColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Color as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).FlashMask as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(FlashMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).ValidCallback as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(ValidCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Sprite>())).Valid as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Sprite),
            "::",
            stringify!(Valid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[test]
fn __bindgen_test_layout_stlp_std_basic_ios_open0_char_stlp_std_char_traits_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_basic_ios<::std::os::raw::c_char>>(),
        80usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_basic_ios<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_basic_ios<::std::os::raw::c_char>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_basic_ios<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_7() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_wchar_t_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_8() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_wchar_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_9() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_wchar_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_10() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_11() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_12() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_13() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_basic_string_open0_char_stlp_std_char_traits_open1_char_close1_stlp_std_allocator_open1_char_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_basic_string_open0_wchar_t_stlp_std_char_traits_open1_wchar_t_close1_stlp_std_allocator_open1_wchar_t_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_basic_string<u32, stlp_std_allocator>>(),
        72usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_basic_string < u32 , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_basic_string<u32, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_basic_string < u32 , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_14() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_wchar_t_close0_instantiation_4() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_unary_function_open0_unsigned_long_unsigned_long_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_unary_function>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_unary_function)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_unary_function>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_unary_function)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_15() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_16() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_17() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_18() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_19() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_wchar_t_close0_instantiation_20() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_iterator_open0_stlp_std_output_iterator_tag_void_void_void_void_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_iterator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_iterator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv___basic_iostring_open0_char_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv____basic_iostring<::std::os::raw::c_char>>(),
        284usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv____basic_iostring<::std::os::raw::c_char>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv____basic_iostring<::std::os::raw::c_char>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv____basic_iostring<::std::os::raw::c_char>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv___basic_iostring_open0_wchar_t_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv____basic_iostring<u32>>(),
        1100usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv____basic_iostring<u32>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv____basic_iostring<u32>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv____basic_iostring<u32>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_wchar_t_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_char_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        16usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_ctype_open0_wchar_t_close0_instantiation_3() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_ctype>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_ctype>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_ctype)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv__Bit_iter_open0_bool__ptr_const_bool_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___Bit_iter>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___Bit_iter)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___Bit_iter>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___Bit_iter)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv__Bit_iter_open0_stlp_std_priv__Bit_reference_ptr__Bit_reference_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___Bit_iter>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___Bit_iter)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___Bit_iter>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___Bit_iter)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_priv__Rb_global_open0_bool__close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_priv___Rb_global>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_priv___Rb_global)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_priv___Rb_global>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_priv___Rb_global)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_map_open0_stlp_std_string_ScriptDictionary_valueStruct_stlp_std_less_open1_stlp_std_basic_string_open2_char_stlp_std_char_traits_open3_char_close3_stlp_std_allocator_open3_char_close3_close2_close1_stlp_std_allocator_open1_stlp_std_pair_open2_stlp_std_basic_string_open3_char_stlp_std_char_traits_open4_char_close4_stlp_std_allocator_open4_char_close4_close3_ScriptDictionary_valueStruct_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_map>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_map)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_map>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_map)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_less_open0_stlp_std_basic_string_open1_char_stlp_std_char_traits_open2_char_close2_stlp_std_allocator_open2_char_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_basic_string_open0_char_stlp_std_char_traits_open1_char_close1_stlp_std_allocator_open1_char_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_21() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_5() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_stlp_std_pair_open1_stlp_std_basic_string_open2_char_stlp_std_char_traits_open3_char_close3_stlp_std_allocator_open3_char_close3_close2_ScriptDictionary_valueStruct_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_basic_string_open0_char_stlp_std_char_traits_open1_char_close1_stlp_std_allocator_open1_char_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_basic_string<::std::os::raw::c_char, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_basic_string < :: std :: os :: raw :: c_char , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_char_traits_open0_char_close0_instantiation_22() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_char_traits>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_char_traits)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_char_close0_instantiation_6() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_uint_stlp_std_allocator_open1_unsigned_int_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<uint, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < uint , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<uint, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < uint , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = ::std::os::raw::c_uint;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_uint16_stlp_std_allocator_open1_unsigned_short_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<uint16, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < uint16 , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<uint16, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < uint16 , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_unsigned_short_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = ::std::os::raw::c_ushort;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_int_stlp_std_allocator_open1_int_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<::std::os::raw::c_int, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < :: std :: os :: raw :: c_int , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<::std::os::raw::c_int, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < :: std :: os :: raw :: c_int , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = ::std::os::raw::c_int;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_UintPair_stlp_std_allocator_open1_stlp_std_pair_open2_unsigned_int_unsigned_int_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<UintPair, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < UintPair , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<UintPair, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < UintPair , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_stlp_std_pair_open1_unsigned_int_unsigned_int_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_Uint16Pair_stlp_std_allocator_open1_stlp_std_pair_open2_unsigned_short_unsigned_short_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<Uint16Pair, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < Uint16Pair , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<Uint16Pair, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < Uint16Pair , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_stlp_std_pair_open1_unsigned_short_unsigned_short_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_set_open0_int_stlp_std_less_open1_int_close1_stlp_std_allocator_open1_int_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_set>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_set)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_set>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_less_open0_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_int_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type value_type = ::std::os::raw::c_int;
pub type _ConstTraits = stlp_std_priv___ConstSetTraitsT;
#[test]
fn __bindgen_test_layout_stlp_std_set_open0_uint_stlp_std_less_open1_unsigned_int_close1_stlp_std_allocator_open1_unsigned_int_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_set>(),
        24usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_set)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_set>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_set)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_less_open0_unsigned_int_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_unsigned_int_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type value_type = ::std::os::raw::c_uint;
pub type _ConstTraits = stlp_std_priv___ConstSetTraitsT;
#[test]
fn __bindgen_test_layout_stlp_std_less_open0_int_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_less>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_less)
        )
    );
}
pub type value_type = ::std::os::raw::c_int;
pub type _ConstTraits = stlp_std_priv___ConstSetTraitsT;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_NpcPlane_stlp_std_allocator_open1_ptr_NpcPlane_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut NpcPlane, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut NpcPlane, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut NpcPlane, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut NpcPlane, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_NpcPlane_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut NpcPlane;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Critter_stlp_std_allocator_open1_ptr_Critter_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Critter, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Critter, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Critter, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Critter, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Critter_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Critter;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_CritterCl_stlp_std_allocator_open1_ptr_CritterCl_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut CritterCl, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut CritterCl, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut CritterCl, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut CritterCl, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_CritterCl_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut CritterCl;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Client_stlp_std_allocator_open1_ptr_Client_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Client, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Client, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Client, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Client, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Client_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Client;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Npc_stlp_std_allocator_open1_ptr_Npc_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Npc, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Npc, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Npc, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Npc, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Npc_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Npc;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Item_stlp_std_allocator_open1_ptr_Item_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Item, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Item, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Item, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Item, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Item_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Item;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_MapObject_stlp_std_allocator_open1_ptr_MapObject_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut MapObject, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut MapObject, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut MapObject, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut MapObject, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_MapObject_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut MapObject;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Map_stlp_std_allocator_open1_ptr_Map_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Map, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Map, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Map, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Map, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Map_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Map;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ptr_Location_stlp_std_allocator_open1_ptr_Location_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<*mut Location, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_vector<*mut Location, stlp_std_allocator>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<*mut Location, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_vector<*mut Location, stlp_std_allocator>)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ptr_Location_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = *mut Location;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_CritterTimeEvent_stlp_std_allocator_open1_CritterTimeEvent_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<CritterTimeEvent, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < CritterTimeEvent , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<CritterTimeEvent, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < CritterTimeEvent , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_CritterTimeEvent_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
pub type const_iterator = *const value_type;
pub type value_type = CritterTimeEvent;
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_MapEntire_stlp_std_allocator_open1_MapEntire_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<MapEntire, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < MapEntire , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<MapEntire, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < MapEntire , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_MapEntire_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_ProtoMap_Tile_stlp_std_allocator_open1_ProtoMap_Tile_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<ProtoMap_Tile, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < ProtoMap_Tile , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<ProtoMap_Tile, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < ProtoMap_Tile , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_ProtoMap_Tile_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_vector_open0_Field_Tile_stlp_std_allocator_open1_Field_Tile_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_vector<Field_Tile, stlp_std_allocator>>(),
        12usize,
        concat!(
            "Size of template specialization: ",
            stringify ! ( stlp_std_vector < Field_Tile , stlp_std_allocator > )
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_vector<Field_Tile, stlp_std_allocator>>(),
        4usize,
        concat!(
            "Alignment of template specialization: ",
            stringify ! ( stlp_std_vector < Field_Tile , stlp_std_allocator > )
        )
    );
}
#[test]
fn __bindgen_test_layout_stlp_std_allocator_open0_Field_Tile_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Size of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<stlp_std_allocator>(),
        1usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(stlp_std_allocator)
        )
    );
}
